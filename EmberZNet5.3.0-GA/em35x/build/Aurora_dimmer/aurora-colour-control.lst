###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:33:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-control.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-control.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-colour-control.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-colour-control.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-colour-control.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-control.c
      1          #include <string.h>
      2          #include "app/framework/include/af.h"
      3          #include "app/framework/include/af-types.h"
      4          #include "aurora-colour-control.h"
      5          #include "aurora-colour-conversion.h"
      6          #include "../aurora-level-control/aurora-level-control.h"
      7          #include "../aurora-level-control/aurora-level-control-hal.h"
      8          
      9          #include "../aurora-pwm/aurora-pwm.h"
     10          
     11          
     12          
     13          #define COL_1               0
     14          #define COL_2               1
     15          #define COL_3               2
     16          
     17          #define ROW_1               0
     18          #define ROW_2               1
     19          #define ROW_3               2
     20          
     21          // CIE1931 correction table
     22          // Automatically generated
     23          

   \                                 In section .rodata, align 4, keep-with-next
     24          const int8u intensityCorrection[256] = {
   \                     intensityCorrection:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2
   \              0x00 0x00    
   \              0x00 0x01    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x01 0x01    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02 0x02    
   \              0x02         
   \   00000017   0x03 0x03          DC8 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6
   \              0x03 0x03    
   \              0x03 0x03    
   \              0x03 0x03    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x04 0x04    
   \              0x05 0x05    
   \              0x05 0x05    
   \              0x05 0x06    
   \              0x06 0x06    
   \              0x06         
   \   0000002E   0x06 0x07          DC8 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12
   \              0x07 0x07    
   \              0x07 0x08    
   \              0x08 0x08    
   \              0x08 0x09    
   \              0x09 0x09    
   \              0x0A 0x0A    
   \              0x0A 0x0A    
   \              0x0B 0x0B    
   \              0x0B 0x0C    
   \   00000042   0x0C 0x0C          DC8 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18
   \              0x0D 0x0D    
   \              0x0D 0x0E    
   \              0x0E 0x0F    
   \              0x0F 0x0F    
   \              0x10 0x10    
   \              0x11 0x11    
   \              0x11 0x12    
   \              0x12         
   \   00000053   0x13 0x13          DC8 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27
   \              0x14 0x14    
   \              0x15 0x15    
   \              0x16 0x16    
   \              0x17 0x17    
   \              0x18 0x18    
   \              0x19 0x19    
   \              0x1A 0x1A    
   \              0x1B         
   \   00000064   0x1C 0x1C          DC8 28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 34, 34, 35, 36, 37, 37, 38
   \              0x1D 0x1D    
   \              0x1E 0x1F    
   \              0x1F 0x20    
   \              0x20 0x21    
   \              0x22 0x22    
   \              0x23 0x24    
   \              0x25 0x25    
   \              0x26         
   \   00000075   0x27 0x27          DC8 39, 39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52
   \              0x28 0x29    
   \              0x2A 0x2B    
   \              0x2B 0x2C    
   \              0x2D 0x2E    
   \              0x2F 0x2F    
   \              0x30 0x31    
   \              0x32 0x33    
   \              0x34         
   \   00000086   0x35 0x36          DC8 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x3A 0x3B    
   \              0x3C 0x3D    
   \              0x3E 0x3F    
   \              0x40 0x41    
   \              0x42 0x43    
   \              0x44         
   \   00000097   0x46 0x47          DC8 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88
   \              0x48 0x49    
   \              0x4A 0x4B    
   \              0x4C 0x4D    
   \              0x4F 0x50    
   \              0x51 0x52    
   \              0x53 0x55    
   \              0x56 0x57    
   \              0x58         
   \   000000A8   0x5A 0x5B          DC8 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 105, 106, 108, 109
   \              0x5C 0x5E    
   \              0x5F 0x60    
   \              0x62 0x63    
   \              0x64 0x66    
   \              0x67 0x69    
   \              0x6A 0x6C    
   \              0x6D         
   \   000000B7   0x6E 0x70          DC8 110, 112, 113, 115, 116, 118, 120, 121, 123, 124, 126, 128, 129
   \              0x71 0x73    
   \              0x74 0x76    
   \              0x78 0x79    
   \              0x7B 0x7C    
   \              0x7E 0x80    
   \              0x81         
   \   000000C4   0x83 0x84          DC8 131, 132, 134, 136, 138, 139, 141, 143, 145, 146, 148, 150, 152
   \              0x86 0x88    
   \              0x8A 0x8B    
   \              0x8D 0x8F    
   \              0x91 0x92    
   \              0x94 0x96    
   \              0x98         
   \   000000D1   0x9A 0x9B          DC8 154, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177
   \              0x9D 0x9F    
   \              0xA1 0xA3    
   \              0xA5 0xA7    
   \              0xA9 0xAB    
   \              0xAD 0xAF    
   \              0xB1         
   \   000000DE   0xB3 0xB5          DC8 179, 181, 183, 185, 187, 189, 191, 193, 196, 198, 200, 202, 204
   \              0xB7 0xB9    
   \              0xBB 0xBD    
   \              0xBF 0xC1    
   \              0xC4 0xC6    
   \              0xC8 0xCA    
   \              0xCC         
   \   000000EB   0xCF 0xD1          DC8 207, 209, 211, 214, 216, 218, 220, 223, 225, 228, 230, 232, 235
   \              0xD3 0xD6    
   \              0xD8 0xDA    
   \              0xDC 0xDF    
   \              0xE1 0xE4    
   \              0xE6 0xE8    
   \              0xEB         
   \   000000F8   0xED 0xF0          DC8 237, 240, 242, 245, 247, 250, 252, 255
   \              0xF2 0xF5    
   \              0xF7 0xFA    
   \              0xFC 0xFF    
     25          	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
     26          	1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 
     27          	2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 
     28          	3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 
     29          	5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 
     30          	7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 
     31          	10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 
     32          	13, 14, 14, 15, 15, 15, 16, 16, 17, 17, 
     33          	17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 
     34          	22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 
     35          	28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 
     36          	34, 34, 35, 36, 37, 37, 38, 39, 39, 40, 
     37          	41, 42, 43, 43, 44, 45, 46, 47, 47, 48, 
     38          	49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 
     39          	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 
     40          	68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 
     41          	80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 
     42          	92, 94, 95, 96, 98, 99, 100, 102, 103, 105, 
     43          	106, 108, 109, 110, 112, 113, 115, 116, 118, 120, 
     44          	121, 123, 124, 126, 128, 129, 131, 132, 134, 136, 
     45          	138, 139, 141, 143, 145, 146, 148, 150, 152, 154, 
     46          	155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 
     47          	175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 
     48          	196, 198, 200, 202, 204, 207, 209, 211, 214, 216, 
     49          	218, 220, 223, 225, 228, 230, 232, 235, 237, 240, 
     50          	242, 245, 247, 250, 252, 255, 
     51          };
     52          #define CIE_RGB         1
     53          #define SRGB            2
     54          
     55          #define COLOR_SPACE    CIE_RGB
     56          //------------------------------------------------------------------------------------------------------
     57          // Color space conversion matrix source: http://brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
     58          //------------------------------------------------------------------------------------------------------
     59          #if (COLOR_SPACE == CIE_RGB)

   \                                 In section .rodata, align 4, keep-with-next
     60          const float conversionMatrix[3][3] = {
   \                     conversionMatrix:
   \   00000000   0x4017B921         DC32 4017B921H, 0BF66690EH, 0BEF0F6EAH, 0BF038DF8H, 3FB67059H
   \              0xBF66690E   
   \              0xBEF0F6EA   
   \              0xBF038DF8   
   \              0x3FB67059   
   \   00000014   0x3DB56A2A         DC32 3DB56A2AH, 3BAD9C86H, 0BC70C2E1H, 3F8133EAH
   \              0x3BAD9C86   
   \              0xBC70C2E1   
   \              0x3F8133EA   
     61                                          {2.3706743, -0.9000405, -0.4706338},
     62                                          {-0.5138850,  1.4253036,  0.0885814},
     63                                          {0.0052982, -0.0146949,  1.0093968},
     64                                          };
     65          #elif (COLOR_SPACE == SRGB)
     66          const float conversionMatrix[3][3] = {
     67                                          {3.2404542, -1.5371385, -0.4985314},
     68                                          {-0.9692660,  1.8760108,  0.0415560},
     69                                          { 0.0556434, -0.2040259,  1.0572252},
     70                                          };
     71          #endif
     72          
     73          
     74          
     75          
     76          // This structure holds the definition of the gamut, the Color space that can be generated by the light
     77          typedef struct {
     78              float x1;
     79              float y1;
     80              float x2;
     81              float y2;
     82              float x3;
     83              float y3;
     84          } t_gamut;
     85          
     86          typedef struct {
     87              int16u originalColorX;
     88              int16u originalColorY;
     89              int16u currentColorX;
     90              int16u currentColorY;
     91              int16u targetColorX;
     92              int16u targetColorY;    
     93              int16s stepSize;       
     94              int16u transitionTime;
     95          } t_moveToColor;
     96          
     97          
     98          typedef struct {
     99              int16u currentColorX;
    100              int16u currentColorY;
    101              int16s rateX;
    102              int16s rateY;
    103          } t_moveColor;
    104          
    105          
    106          //------------------------------------------------------------------------------------------------------
    107          // CIE 1931 RGB Color space: http://en.wikipedia.org/wiki/RGB_color_space
    108          //------------------------------------------------------------------------------------------------------

   \                                 In section .data, align 4
   \   00000000   0x3F3C154D         DC32 3F3C154DH, 3E87D567H, 3E8C2F83H, 3F37A787H, 3E2A9931H, 3C12CCF7H
   \              0x3E87D567   
   \              0x3E8C2F83   
   \              0x3F37A787   
   \              0x3E2A9931   
   \              0x3C12CCF7   
    109          static t_gamut gamut = {0.7347, 0.2653, 0.2738, 0.7174, 0.1666, 0.00896}; 

   \                                 In section .bss, align 4
    110          static t_moveToColor moveToColor;
    111          static t_moveColor moveColor;
    112          
    113          
    114          EmberEventControl emberAfPluginAuroraColourControlMoveToColorEventControl;
   \                     emberAfPluginAuroraColourControlMoveToColorEventControl:
   \   00000000                      DS8 8
    115          EmberEventControl emberAfPluginAuroraColourControlMoveColorEventControl;
   \                     emberAfPluginAuroraColourControlMoveColorEventControl:
   \   00000008                      DS8 8
    116          EmberEventControl emberAfPluginAuroraColourControlMoveStepEventControl;
    117          EmberEventControl emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl;
   \                     emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl:
   \   00000010                      DS8 8
   \   00000018                      DS8 16
   \   00000028                      DS8 8

   \                                 In section .bss, align 4
   \                     emberAfPluginAuroraColourControlMoveStepEventControl:
   \   00000000                      DS8 8
    118          
    119          void emberAfPluginAuroraColourControlMoveToColorEventHandler(void);
    120          void emberAfPluginAuroraColourControlMoveColorEventHandler(void);
    121          void emberAfPluginAuroraColourControlMoveStepEventHandler(void);
    122          void emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler(void);
    123          
    124          static int16u interpolate(int16u x0, int16u y0, int16u x1, int16u y1, int16u x);
    125          static boolean isColorInGamut(int16u x, int16u y);
    126          static void xyYtoRGBConversion(int16u currentX, int16u currentY, t_RGB *RGB);
    127          static EmberAfStatus getCurrentColor(int16u *currentX, int16u *currentY);
    128          static EmberAfStatus setCurrentColor(int16u currentX, int16u currentY);
    129          static void stopAllEvents(void);
    130          
    131          

   \                                 In section .text, align 2, keep-with-next
    132          EmberAfStatus emberAfPluginAuroraColourControlMoveToColor(int16u colorX, int16u colorY, int16u transitionTime)
    133          {
   \                     emberAfPluginAuroraColourControlMoveToColor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4617             MOV      R7,R2
    134              EmberAfStatus status;
    135              int16u currentX;
    136              int16u currentY;
    137          
    138              //emberAfDebugPrintln("MoveToColor(strt), tran=%d", transitionTime);    
    139              
    140              stopAllEvents(); // Stop any other events
   \   00000008   0x.... 0x....      BL       stopAllEvents
    141              
    142              if (isColorInGamut(colorX, colorY)) 
   \   0000000C   0x4631             MOV      R1,R6
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      BL       isColorInGamut
   \   00000014   0xB310             CBZ.N    R0,??emberAfPluginAuroraColourControlMoveToColor_0
    143              {    
    144                  status = getCurrentColor(&currentX, &currentY);
   \   00000016   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_4: (+1)
   \   0000001A   0x0004             MOVS     R4,R0
    145                  if (status == EMBER_ZCL_STATUS_SUCCESS) 
   \   0000001C   0xD11F             BNE.N    ??emberAfPluginAuroraColourControlMoveToColor_1
    146                  {
    147                      moveToColor.originalColorX = currentX;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable18
   \   00000022   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000026   0x8301             STRH     R1,[R0, #+24]
    148                      moveToColor.originalColorY = currentY;
    149                      moveToColor.currentColorX = currentX;
    150                      moveToColor.currentColorY = currentY;
    151                      moveToColor.targetColorX = colorX;
   \   00000028   0x8405             STRH     R5,[R0, #+32]
    152                      moveToColor.targetColorY = colorY;
   \   0000002A   0x8446             STRH     R6,[R0, #+34]
   \   0000002C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000030   0x8341             STRH     R1,[R0, #+26]
   \   00000032   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000036   0x8381             STRH     R1,[R0, #+28]
   \   00000038   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000003C   0x83C1             STRH     R1,[R0, #+30]
    153                      moveToColor.transitionTime = transitionTime > 0 ? transitionTime : 1;
   \   0000003E   0xB907             CBNZ.N   R7,??emberAfPluginAuroraColourControlMoveToColor_2
   \   00000040   0x2701             MOVS     R7,#+1
   \                     ??emberAfPluginAuroraColourControlMoveToColor_2: (+1)
   \   00000042   0x84C7             STRH     R7,[R0, #+38]
   \   00000044   0x8CC1             LDRH     R1,[R0, #+38]
   \   00000046   0x8B02             LDRH     R2,[R0, #+24]
   \   00000048   0x2902             CMP      R1,#+2
   \   0000004A   0xBFA6             ITTE     GE 
   \   0000004C   0x1AAA             SUBGE    R2,R5,R2
   \   0000004E   0xFB92 0xF1F1      SDIVGE   R1,R2,R1
   \   00000052   0x1AA9             SUBLT    R1,R5,R2
   \   00000054   0x8481             STRH     R1,[R0, #+36]
    154                      moveToColor.stepSize = moveToColor.transitionTime > 1 ? (((int)moveToColor.targetColorX - (int)moveToColor.originalColorX) / moveToColor.transitionTime) : 
    155                                                                              ((int)moveToColor.targetColorX - (int)moveToColor.originalColorX);
    156                      //emberAfDebugPrint("MTC step size %d\r\n", moveToColor.stepSize); 
    157                                                                                 
    158                      emberEventControlSetActive(emberAfPluginAuroraColourControlMoveToColorEventControl); 
   \   00000056   0x.... 0x....      BL       emEventControlSetActive
   \   0000005A   0xE000             B.N      ??emberAfPluginAuroraColourControlMoveToColor_1
    159                  }
    160              }
    161              else
    162              {
    163                  status = EMBER_ZCL_STATUS_INVALID_VALUE;          
   \                     ??emberAfPluginAuroraColourControlMoveToColor_0: (+1)
   \   0000005C   0x2487             MOVS     R4,#+135
    164              }
    165                  
    166              return status;
   \                     ??emberAfPluginAuroraColourControlMoveToColor_1: (+1)
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    167          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0xF10D 0x0002      ADD      R0,SP,#+2
   \   00000006   0x....             B.N      getCurrentColor
    168          

   \                                 In section .text, align 2, keep-with-next
    169          void emberAfPluginAuroraColourControlMoveToColorEventHandler(void)
    170          {
   \                     emberAfPluginAuroraColourControlMoveToColorEventHandler: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
    171              t_RGB RGB;
    172              boolean finished = FALSE;
    173          
    174              //emberAfDebugPrintln("MoveToColor (hdlr), tran=%d", moveToColor.transitionTime);    
    175              
    176              emberEventControlSetInactive(emberAfPluginAuroraColourControlMoveToColorEventControl);
   \   00000004   0x....             LDR.N    R4,??DataTable18
    177                  
    178              if (moveToColor.transitionTime > 0) 
   \   00000006   0x8C25             LDRH     R5,[R4, #+32]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x7020             STRB     R0,[R4, #+0]
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0x8CE0             LDRH     R0,[R4, #+38]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD044             BEQ.N    ??emberAfPluginAuroraColourControlMoveToColorEv_0
    179              {
    180                  // Find the new value for x and then use linear interpolation to find the corresponding y
    181                  moveToColor.currentColorX = moveToColor.currentColorX + moveToColor.stepSize;
   \   00000014   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000016   0xF9B4 0x1024      LDRSH    R1,[R4, #+36]
    182                  moveToColor.currentColorY = interpolate(moveToColor.originalColorX, 
    183                                                                  moveToColor.originalColorY, 
    184                                                                  moveToColor.targetColorX, 
    185                                                                  moveToColor.targetColorY, 
    186                                                                  moveToColor.currentColorX);
   \   0000001A   0x8B27             LDRH     R7,[R4, #+24]
   \   0000001C   0xF8B4 0x901A      LDRH     R9,[R4, #+26]
   \   00000020   0x180E             ADDS     R6,R1,R0
   \   00000022   0x42AF             CMP      R7,R5
   \   00000024   0x83A6             STRH     R6,[R4, #+28]
   \   00000026   0xD01E             BEQ.N    ??emberAfPluginAuroraColourControlMoveToColorEv_1
   \   00000028   0x4648             MOV      R0,R9
   \   0000002A   0x.... 0x....      BL       __aeabi_ui2f
   \   0000002E   0x4680             MOV      R8,R0
   \   00000030   0x8C60             LDRH     R0,[R4, #+34]
   \   00000032   0xEBA0 0x0009      SUB      R0,R0,R9
   \   00000036   0x.... 0x....      BL       __aeabi_i2f
   \   0000003A   0x4681             MOV      R9,R0
   \   0000003C   0xB2B6             UXTH     R6,R6
   \   0000003E   0x1BF0             SUBS     R0,R6,R7
   \   00000040   0x.... 0x....      BL       __aeabi_i2f
   \   00000044   0x4682             MOV      R10,R0
   \   00000046   0x1BE8             SUBS     R0,R5,R7
   \   00000048   0x.... 0x....      BL       __aeabi_i2f
   \   0000004C   0x4601             MOV      R1,R0
   \   0000004E   0x4650             MOV      R0,R10
   \   00000050   0x.... 0x....      BL       __aeabi_fdiv
   \   00000054   0x4649             MOV      R1,R9
   \   00000056   0x.... 0x....      BL       __aeabi_fmul
   \   0000005A   0x4641             MOV      R1,R8
   \   0000005C   0x.... 0x....      BL       __aeabi_fadd
   \   00000060   0x.... 0x....      BL       __aeabi_f2iz
   \   00000064   0x4681             MOV      R9,R0
    187              } 
   \                     ??emberAfPluginAuroraColourControlMoveToColorEv_1: (+1)
   \   00000066   0xF8A4 0x901E      STRH     R9,[R4, #+30]
    188              else 
    189              {
    190                  moveToColor.currentColorX = moveToColor.targetColorX;
    191                  moveToColor.currentColorY = moveToColor.targetColorY;
    192                  finished = TRUE;
    193              }
    194          
    195              if (!finished) 
    196              {
    197                  // Check that the color is within the gamut for the device
    198                  if (isColorInGamut(moveToColor.currentColorX, moveToColor.currentColorY)) 
   \   0000006A   0xB2B0             UXTH     R0,R6
   \   0000006C   0x8BE1             LDRH     R1,[R4, #+30]
   \   0000006E   0x.... 0x....      BL       isColorInGamut
   \   00000072   0xB158             CBZ.N    R0,??emberAfPluginAuroraColourControlMoveToColorEv_2
    199                  {   
    200                      // Convert the color to RGB and set it
    201                      xyYtoRGBConversion(moveToColor.currentColorX, moveToColor.currentColorY, &RGB);
   \   00000074   0x8BE1             LDRH     R1,[R4, #+30]
   \   00000076   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000078   0xAA00             ADD      R2,SP,#+0
   \   0000007A   0x.... 0x....      BL       xyYtoRGBConversion
    202                      emberAfPluginAuroraColourControlSetRgbColorCallback(&RGB);        
   \   0000007E   0xA800             ADD      R0,SP,#+0
   \   00000080   0x.... 0x....      BL       emberAfPluginAuroraColourControlSetRgbColorCallback
    203                      setCurrentColor(moveToColor.currentColorX, moveToColor.currentColorY);
   \   00000084   0x8BE1             LDRH     R1,[R4, #+30]
   \   00000086   0x8BA0             LDRH     R0,[R4, #+28]
   \   00000088   0x.... 0x....      BL       setCurrentColor
    204                  } 
    205                  else 
    206                  {
    207                      finished = FALSE;
    208                  }
    209              }
    210          
    211              if (finished) 
    212              {
    213                  memset(&moveToColor, 0, sizeof(t_moveToColor));
    214              }
    215              else
    216              {
    217                  moveToColor.transitionTime--;
   \                     ??emberAfPluginAuroraColourControlMoveToColorEv_2: (+1)
   \   0000008C   0x8CE0             LDRH     R0,[R4, #+38]
   \   0000008E   0x1E40             SUBS     R0,R0,#+1
   \   00000090   0x84E0             STRH     R0,[R4, #+38]
    218                  
    219                  // Set an event for the next step
    220                  emberEventControlSetDelayMS(emberAfPluginAuroraColourControlMoveToColorEventControl, MILLISECOND_TICKS_PER_DECISECOND);          
   \   00000092   0x2166             MOVS     R1,#+102
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       emEventControlSetDelayMS
    221              }
    222          }
   \                     ??emberAfPluginAuroraColourControlMoveToColorEv_3: (+1)
   \   0000009A   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
   \                     ??emberAfPluginAuroraColourControlMoveToColorEv_0: (+1)
   \   0000009E   0x8C60             LDRH     R0,[R4, #+34]
   \   000000A0   0x83E0             STRH     R0,[R4, #+30]
   \   000000A2   0x83A5             STRH     R5,[R4, #+28]
   \   000000A4   0xF104 0x0018      ADD      R0,R4,#+24
   \   000000A8   0x2100             MOVS     R1,#+0
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x460B             MOV      R3,R1
   \   000000AE   0x460C             MOV      R4,R1
   \   000000B0   0xC01E             STM      R0!,{R1-R4}
   \   000000B2   0xE7F2             B.N      ??emberAfPluginAuroraColourControlMoveToColorEv_3
    223          

   \                                 In section .text, align 2, keep-with-next
    224          EmberAfStatus emberAfPluginAuroraColourControlMoveColor(int16s rateX, int16s rateY)
    225          {
   \                     emberAfPluginAuroraColourControlMoveColor: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xB082             SUB      SP,SP,#+8
    226              EmberAfStatus status;
    227              int16u currentX;
    228              int16u currentY;
    229              
    230              emberAfDebugPrintln("MoveColor(strt)");    
   \   00000008   0x.... 0x....      ADR.W    R1,?_0
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       emberAfPrintln
    231              
    232              stopAllEvents();  // Stop any other events
   \   00000012   0x.... 0x....      BL       stopAllEvents
    233              
    234              status = getCurrentColor(&currentX, &currentY);
   \   00000016   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000001A   0x0006             MOVS     R6,R0
    235              if (status == EMBER_ZCL_STATUS_SUCCESS) 
   \   0000001C   0xD10B             BNE.N    ??emberAfPluginAuroraColourControlMoveColor_0
    236              {
    237                  moveColor.currentColorX = currentX;
   \   0000001E   0x....             LDR.N    R0,??DataTable18
   \   00000020   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000024   0x8501             STRH     R1,[R0, #+40]
    238                  moveColor.currentColorY = currentY;
    239                  moveColor.rateX = rateX;
   \   00000026   0x8584             STRH     R4,[R0, #+44]
    240                  moveColor.rateY = rateY;
   \   00000028   0x85C5             STRH     R5,[R0, #+46]
   \   0000002A   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000002E   0x8541             STRH     R1,[R0, #+42]
    241          
    242                  emberEventControlSetActive(emberAfPluginAuroraColourControlMoveColorEventControl); 
   \   00000030   0x3008             ADDS     R0,R0,#+8
   \   00000032   0x.... 0x....      BL       emEventControlSetActive
    243              }
    244              
    245              return status;
   \                     ??emberAfPluginAuroraColourControlMoveColor_0: (+1)
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void emberAfPluginAuroraColourControlMoveColorEventHandler(void)
    249          {
   \                     emberAfPluginAuroraColourControlMoveColorEventHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    250              t_RGB RGB;
    251              int32u delay;
    252              
    253              emberAfDebugPrintln("MoveColor(hdlr)");    
   \   00000004   0x.... 0x....      ADR.W    R1,?_1
   \   00000008   0x....             LDR.N    R4,??DataTable18
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       emberAfPrintln
    254              
    255              emberEventControlSetInactive(emberAfPluginAuroraColourControlMoveColorEventControl);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x7220             STRB     R0,[R4, #+8]
    256          
    257              if ((moveColor.rateX == 0) && (moveColor.rateY == 0)) 
   \   00000014   0xF9B4 0x102C      LDRSH    R1,[R4, #+44]
   \   00000018   0xF9B4 0x002E      LDRSH    R0,[R4, #+46]
   \   0000001C   0x2900             CMP      R1,#+0
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x2800             CMPEQ    R0,#+0
   \   00000022   0xD02B             BEQ.N    ??emberAfPluginAuroraColourControlMoveColorEven_0
    258              {
    259                  return;
    260              } 
    261              else if (((moveColor.rateX / 10) == 0) || ((moveColor.rateY / 10) == 0)) 
   \   00000024   0x250A             MOVS     R5,#+10
   \   00000026   0xFB91 0xF5F5      SDIV     R5,R1,R5
   \   0000002A   0x2D00             CMP      R5,#+0
   \   0000002C   0x8D22             LDRH     R2,[R4, #+40]
   \   0000002E   0x8D63             LDRH     R3,[R4, #+42]
   \   00000030   0xBF1E             ITTT     NE 
   \   00000032   0x260A             MOVNE    R6,#+10
   \   00000034   0xFB90 0xF6F6      SDIVNE   R6,R0,R6
   \   00000038   0x2E00             CMPNE    R6,#+0
   \   0000003A   0xD104             BNE.N    ??emberAfPluginAuroraColourControlMoveColorEven_1
    262              {
    263                  moveColor.currentColorX = moveColor.currentColorX + moveColor.rateX;
   \   0000003C   0x1889             ADDS     R1,R1,R2
    264                  moveColor.currentColorY = moveColor.currentColorY + moveColor.rateY;
   \   0000003E   0x18C0             ADDS     R0,R0,R3
    265                  delay = MILLISECOND_TICKS_PER_SECOND;
   \   00000040   0xF44F 0x6580      MOV      R5,#+1024
   \   00000044   0xE002             B.N      ??emberAfPluginAuroraColourControlMoveColorEven_2
    266              } 
    267              else 
    268              {
    269                  moveColor.currentColorX = moveColor.currentColorX + moveColor.rateX / 10;
   \                     ??emberAfPluginAuroraColourControlMoveColorEven_1: (+1)
   \   00000046   0x18A9             ADDS     R1,R5,R2
    270                  moveColor.currentColorY = moveColor.currentColorY + moveColor.rateY / 10;
   \   00000048   0x18F0             ADDS     R0,R6,R3
    271                  delay = MILLISECOND_TICKS_PER_DECISECOND;
   \   0000004A   0x2566             MOVS     R5,#+102
   \                     ??emberAfPluginAuroraColourControlMoveColorEven_2: (+1)
   \   0000004C   0x8521             STRH     R1,[R4, #+40]
   \   0000004E   0x8560             STRH     R0,[R4, #+42]
    272              }
    273              
    274              if (isColorInGamut(moveColor.currentColorX, moveColor.currentColorY)) 
   \   00000050   0x8D61             LDRH     R1,[R4, #+42]
   \   00000052   0x8D20             LDRH     R0,[R4, #+40]
   \   00000054   0x.... 0x....      BL       isColorInGamut
   \   00000058   0xB180             CBZ.N    R0,??emberAfPluginAuroraColourControlMoveColorEven_0
    275              {    
    276                  // Convert the Color to RGB and set it
    277                  xyYtoRGBConversion(moveColor.currentColorX, moveColor.currentColorY, &RGB);
   \   0000005A   0x8D61             LDRH     R1,[R4, #+42]
   \   0000005C   0x8D20             LDRH     R0,[R4, #+40]
   \   0000005E   0xAA00             ADD      R2,SP,#+0
   \   00000060   0x.... 0x....      BL       xyYtoRGBConversion
    278                  emberAfPluginAuroraColourControlSetRgbColorCallback(&RGB);
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       emberAfPluginAuroraColourControlSetRgbColorCallback
    279                  
    280                  setCurrentColor(moveColor.currentColorX, moveColor.currentColorY);
   \   0000006A   0x8D61             LDRH     R1,[R4, #+42]
   \   0000006C   0x8D20             LDRH     R0,[R4, #+40]
   \   0000006E   0x.... 0x....      BL       setCurrentColor
    281          
    282                  // Set an event for the next step
    283                  emberEventControlSetDelayMS(emberAfPluginAuroraColourControlMoveColorEventControl, delay); 
   \   00000072   0x4629             MOV      R1,R5
   \   00000074   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000078   0x.... 0x....      BL       emEventControlSetDelayMS
    284              }
    285          }
   \                     ??emberAfPluginAuroraColourControlMoveColorEven_0: (+1)
   \   0000007C   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    286          

   \                                 In section .text, align 2, keep-with-next
    287          EmberAfStatus emberAfPluginAuroraColourControlStepColor(int16s stepX, int16s stepY, int16u transitionTime)
    288          {
   \                     emberAfPluginAuroraColourControlStepColor: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    289              EmberAfStatus status;
    290              int16u currentX;
    291              int16u currentY;
    292              int16u ColorX;
    293              int16u ColorY;
    294          
    295              emberAfDebugPrintln("StepColor(strt), tran=%d", transitionTime);
   \   00000008   0x.... 0x....      ADR.W    R1,?_2
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x.... 0x....      BL       emberAfPrintln
    296              
    297              stopAllEvents(); // Stop any other events
   \   00000012   0x.... 0x....      BL       stopAllEvents
    298              
    299              status = getCurrentColor(&currentX, &currentY);
   \   00000016   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000001A   0x0007             MOVS     R7,R0
    300              if (status == EMBER_ZCL_STATUS_SUCCESS) 
   \   0000001C   0xD10F             BNE.N    ??emberAfPluginAuroraColourControlStepColor_0
    301              {        
    302                  ColorX = currentX + stepX;
   \   0000001E   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000022   0x1824             ADDS     R4,R4,R0
    303                  ColorY = currentY + stepY;
   \   00000024   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000028   0x182D             ADDS     R5,R5,R0
    304                  
    305                  if (isColorInGamut(ColorX, ColorY)) 
   \   0000002A   0xB2A9             UXTH     R1,R5
   \   0000002C   0xB2A0             UXTH     R0,R4
   \   0000002E   0x.... 0x....      BL       isColorInGamut
   \   00000032   0xB120             CBZ.N    R0,??emberAfPluginAuroraColourControlStepColor_0
    306                  {
    307                      emberAfPluginAuroraColourControlMoveToColor(ColorX, ColorY, transitionTime);
   \   00000034   0x4632             MOV      R2,R6
   \   00000036   0xB2A9             UXTH     R1,R5
   \   00000038   0xB2A0             UXTH     R0,R4
   \   0000003A   0x.... 0x....      BL       emberAfPluginAuroraColourControlMoveToColor
    308                  }       
    309              }
    310              
    311              return status;
   \                     ??emberAfPluginAuroraColourControlStepColor_0: (+1)
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    312          }
    313          

   \                                 In section .text, align 2, keep-with-next
    314          EmberAfStatus emberAfPluginAuroraColourControlMoveToColorTemperature(int16u colorTemperature, int16u transitionTime)
    315          {
    316              // Command not implemented yet, just return success so that we send default response.
    317              return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfPluginAuroraColourControlMoveToColorTemperature: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    318          }
    319          

   \                                 In section .text, align 2, keep-with-next
    320          void emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler(void)
    321          {
    322          }
   \                     emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    323          

   \                                 In section .text, align 2, keep-with-next
    324          static void stopAllEvents(void)
    325          {
    326              emberEventControlSetInactive(emberAfPluginAuroraColourControlMoveToColorEventControl);
   \                     stopAllEvents: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable18
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    327              emberEventControlSetInactive(emberAfPluginAuroraColourControlMoveColorEventControl);
   \   00000006   0x7201             STRB     R1,[R0, #+8]
    328              emberEventControlSetInactive(emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl);
   \   00000008   0x7401             STRB     R1,[R0, #+16]
    329          }
   \   0000000A   0x4770             BX       LR               ;; return
    330          

   \                                 In section .text, align 2, keep-with-next
    331          void emberAfPluginAuroraColourControlSetOnOff(boolean on)
    332          {
   \                     emberAfPluginAuroraColourControlSetOnOff: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    333              EmberAfStatus status;
    334              int16u currentX;
    335              int16u currentY;
    336          
    337              status = getCurrentColor(&currentX, &currentY);
    338              if (status == EMBER_ZCL_STATUS_SUCCESS) 
   \   00000006   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000000A   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_6
    339              {
    340                  emberAfPluginAuroraPwmEnable(on); // Update pwm on/off state.    
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfPluginAuroraPwmEnable
    341                  emberAfPluginAuroraColourControlMoveToColor(currentX, currentY, 0);  // Move to the current Color.
   \   00000012   0x.... 0x....      BL       ?Subroutine1
    342              }    
    343          }
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000016   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000004   0xF8BD 0x0002      LDRH     R0,[SP, #+2]
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x....             B.N      emberAfPluginAuroraColourControlMoveToColor
    344          

   \                                 In section .text, align 2, keep-with-next
    345          void emberAfPluginAuroraColourControlSetNewLevel(void)
    346          {
   \                     emberAfPluginAuroraColourControlSetNewLevel: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    347              EmberAfStatus status;
    348              int16u currentX;
    349              int16u currentY;
    350          
    351              status = getCurrentColor(&currentX, &currentY);    
    352              if (status == EMBER_ZCL_STATUS_SUCCESS) 
   \   00000002   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0xB908             CBNZ.N   R0,??CrossCallReturnLabel_5
    353              {
    354                  emberAfPluginAuroraColourControlMoveToColor(currentX, currentY, 0);  // Move to the current Color.
   \   00000008   0x.... 0x....      BL       ?Subroutine1
    355              }
    356          }
   \                     ??CrossCallReturnLabel_5: (+1)
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
    357          
    358          /** @brief Interpolate
    359           *
    360           * Find the value of y for a given x on the line between (x0, y0) and (x1, y1)
    361           *
    362           */
    363          static int16u interpolate(int16u x0, int16u y0, int16u x1, int16u y1, int16u x)
    364          {
    365              int16u y;
    366              
    367              if (x0 == x1) 
    368              {
    369                  y = y0;
    370              } 
    371              else 
    372              {
    373                  y = (int16u)((float)y0 + (float)(y1 - y0) * ((float)(x - x0) / (float)(x1 - x0)));
    374              }
    375          
    376              //GB emberAfDebugPrint("Interpolate (%2x, %2x) (%2x, %2x)  (%2x, %2x) \r\n", x0, y0, x1, y1, x, y);
    377              
    378              return y;
    379          }
    380          
    381          /** @brief Is Color in the gamut of the device
    382           *
    383           * Find out if the Color is within the gamut triangle in the Color space for the device.
    384           * Returns TRUE if it is, FALSE otherwise.
    385           *
    386           */

   \                                 In section .text, align 2, keep-with-next
    387          static boolean isColorInGamut(int16u x_int, int16u y_int)
    388          {
   \                     isColorInGamut: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x460C             MOV      R4,R1
    389              float x;
    390              float y;
    391              float lambda1;
    392              float lambda2;
    393              float lambda3;
    394              int lambda1_int;
    395              int lambda2_int;
    396              int lambda3_int;
    397              
    398              
    399              x = (float)x_int / 65536.0f;
   \   00000006   0x.... 0x....      BL       __aeabi_ui2f
   \   0000000A   0xF04F 0x555E      MOV      R5,#+931135488
   \   0000000E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000012   0x4606             MOV      R6,R0
    400              y = (float)y_int / 65536.0f;
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       __aeabi_ui2f
   \   0000001A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000001E   0x4601             MOV      R1,R0
   \   00000020   0x....             LDR.N    R0,??DataTable18_1  ;; 0xbc12ccf7
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0x4604             MOV      R4,R0
   \   00000028   0x....             LDR.N    R0,??DataTable18_2  ;; 0xbe2a9931
   \   0000002A   0x4631             MOV      R1,R6
   \   0000002C   0x.... 0x....      BL       __aeabi_fadd
   \   00000030   0x4605             MOV      R5,R0
   \   00000032   0x....             LDR.N    R0,??DataTable18_3  ;; 0x3f355c53
   \   00000034   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000038   0x4606             MOV      R6,R0
   \   0000003A   0x....             LDR.N    R0,??DataTable18_4  ;; 0xbddb8baa
   \   0000003C   0x4621             MOV      R1,R4
   \   0000003E   0x.... 0x....      BL       __aeabi_fmul
   \   00000042   0x4631             MOV      R1,R6
   \   00000044   0x.... 0x....      BL       __aeabi_fadd
   \   00000048   0x....             LDR.N    R1,??DataTable18_5  ;; 0x3ebffe0e
   \   0000004A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000004E   0x4606             MOV      R6,R0
    401          
    402              lambda1 = (((gamut.y2 - gamut.y3)*(x - gamut.x3)) + ((gamut.x3 - gamut.x2) * (y - gamut.y3))) / (((gamut.y2 - gamut.y3) * (gamut.x1 - gamut.x3)) + ((gamut.x3 - gamut.x2) * (gamut.y1 - gamut.y3)));
    403              lambda2 = (((gamut.y3 - gamut.y1)*(x - gamut.x3)) + ((gamut.x1 - gamut.x3) * (y - gamut.y3))) / (((gamut.y2 - gamut.y3) * (gamut.x1 - gamut.x3)) + ((gamut.x3 - gamut.x2) * (gamut.y1 - gamut.y3)));
   \   00000050   0x....             LDR.N    R0,??DataTable18_6  ;; 0xbe833eff
   \   00000052   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000056   0x4605             MOV      R5,R0
   \   00000058   0x....             LDR.N    R0,??DataTable18_7  ;; 0x3f116f01
   \   0000005A   0x4621             MOV      R1,R4
   \   0000005C   0x.... 0x....      BL       __aeabi_fmul
   \   00000060   0x4629             MOV      R1,R5
   \   00000062   0x.... 0x....      BL       __aeabi_fadd
   \   00000066   0x....             LDR.N    R1,??DataTable18_5  ;; 0x3ebffe0e
    404              lambda3 = 1 - lambda1 - lambda2;
    405          
    406              lambda1_int = (int)(lambda1 * 1000);
    407              lambda2_int = (int)(lambda2 * 1000);
    408              lambda3_int = (int)(lambda3 * 1000);
   \   00000068   0x....             LDR.N    R5,??DataTable18_8  ;; 0x447a0000
   \   0000006A   0x.... 0x....      BL       __aeabi_fdiv
   \   0000006E   0x4604             MOV      R4,R0
   \   00000070   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000074   0x4631             MOV      R1,R6
   \   00000076   0x.... 0x....      BL       __aeabi_fsub
   \   0000007A   0x4621             MOV      R1,R4
   \   0000007C   0x.... 0x....      BL       __aeabi_fsub
   \   00000080   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000084   0x.... 0x....      BL       __aeabi_f2iz
   \   00000088   0x4607             MOV      R7,R0
    409              
    410              if (((lambda1_int >= 0) && (lambda1_int <= 1000)) &&
    411                  ((lambda2_int >= 0) && (lambda2_int <= 1000)) &&
    412                  ((lambda3_int >= 0) && (lambda3_int <= 1000))) 
   \   0000008A   0x4630             MOV      R0,R6
   \   0000008C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000090   0x.... 0x....      BL       __aeabi_f2iz
   \   00000094   0xF240 0x38E9      MOVW     R8,#+1001
   \   00000098   0x4540             CMP      R0,R8
   \   0000009A   0xD209             BCS.N    ??isColorInGamut_0
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000A2   0x.... 0x....      BL       __aeabi_f2iz
   \   000000A6   0x4540             CMP      R0,R8
   \   000000A8   0xBF3C             ITT      CC 
   \   000000AA   0x4547             CMPCC    R7,R8
   \   000000AC   0x2001             MOVCC    R0,#+1
    413              {
    414                  //emberAfDebugPrint("Color Ok\r\n");
    415                  return TRUE;
   \   000000AE   0xD305             BCC.N    ??isColorInGamut_1
    416              }
    417          
    418          #if 0    
    419              // Floating point version of gamut check...
    420              if (((lambda1 >= 0.0) && (lambda1 <= 1.0)) &&
    421                  ((lambda2 >= 0.0) && (lambda2 <= 1.0)) &&
    422                  ((lambda3 >= 0.0) && (lambda3 <= 1.0))) 
    423              {
    424                  //emberAfDebugPrint("Color Ok\r\n");
    425                  return TRUE;
    426              }
    427          #endif
    428              
    429              emberAfDebugPrint("Color Invalid\r\n");
   \                     ??isColorInGamut_0: (+1)
   \   000000B0   0x.... 0x....      ADR.W    R1,?_3
   \   000000B4   0x2002             MOVS     R0,#+2
   \   000000B6   0x.... 0x....      BL       emberAfPrint
    430              
    431              return FALSE;
   \   000000BA   0x2000             MOVS     R0,#+0
   \                     ??isColorInGamut_1: (+1)
   \   000000BC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    432          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4629             MOV      R1,R5
   \   00000002   0x.... 0x....      B.W      __aeabi_fmul
    433          
    434          /** @brief Convert from xyY to RGB 
    435           *
    436           * Convert from the CIE xyY Color space to the RGB Color space so that the light 
    437           * can be controlled using the RGB values.
    438           */

   \                                 In section .text, align 2, keep-with-next
    439          static void xyYtoRGBConversion(int16u currentX, int16u currentY, t_RGB* RGB)
    440          {
   \                     xyYtoRGBConversion: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x460E             MOV      R6,R1
   \   00000008   0x4614             MOV      R4,R2
    441              tVec3 RGB_Color;
    442              tVec2 Yxy_Color;
    443              float Y;
    444              int8u currentLevel;
    445              
    446              emAfPluginLevelControlClusterGetCurrentLevel(&currentLevel);
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x.... 0x....      BL       emAfPluginLevelControlClusterGetCurrentLevel
    447              //emberAfDebugPrintln("xyYtoRGB- get current level= 0x%X", currentLevel);
    448                  
    449              Yxy_Color.x = (float)currentX / 65536.0f; // the given x value
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       __aeabi_ui2f
   \   00000016   0xF04F 0x575E      MOV      R7,#+931135488
   \   0000001A   0x4639             MOV      R1,R7
   \   0000001C   0x.... 0x....      BL       __aeabi_fmul
   \   00000020   0x9003             STR      R0,[SP, #+12]
    450              Yxy_Color.y = (float)currentY / 65536.0f; // the given y value
    451              Y = ((float)currentLevel / 0xFF);
    452          
    453              //emberAfDebugPrintln("xyYtoRGB (%d, %d)", (int)(Yxy_Color.x * 1000), (int)(Yxy_Color.y * 1000));  
    454              
    455              emberAfPluginAuroraColourControlConvertColor(&Yxy_Color, Y, &RGB_Color);
   \   00000022   0xAD05             ADD      R5,SP,#+20
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x.... 0x....      BL       __aeabi_ui2f
   \   0000002A   0x4639             MOV      R1,R7
   \   0000002C   0x.... 0x....      BL       __aeabi_fmul
   \   00000030   0x9004             STR      R0,[SP, #+16]
   \   00000032   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000036   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003A   0x....             LDR.N    R1,??DataTable18_9  ;; 0x437f0000
   \   0000003C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000040   0x4601             MOV      R1,R0
   \   00000042   0x462A             MOV      R2,R5
   \   00000044   0xA803             ADD      R0,SP,#+12
   \   00000046   0x.... 0x....      BL       emberAfPluginAuroraColourControlConvertColor
    456                  
    457              int8u R,G,B,W;
    458              R = (int)(RGB_Color.x * 255);
   \   0000004A   0x....             LDR.N    R5,??DataTable18_9  ;; 0x437f0000
   \   0000004C   0x9805             LDR      R0,[SP, #+20]
   \   0000004E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000052   0x.... 0x....      BL       __aeabi_f2iz
   \   00000056   0x4606             MOV      R6,R0
    459              G = (int)(RGB_Color.y * 255);
   \   00000058   0x9806             LDR      R0,[SP, #+24]
   \   0000005A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000005E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000062   0x4607             MOV      R7,R0
    460              B = (int)(RGB_Color.z * 255);
   \   00000064   0x9807             LDR      R0,[SP, #+28]
   \   00000066   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000006A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000006E   0x4605             MOV      R5,R0
    461              
    462              int8u mode = getAuroraDimmerMode();
   \   00000070   0x.... 0x....      BL       getAuroraDimmerMode
    463              if (mode == AURORA_MODE_RGBW)
   \   00000074   0xB978             CBNZ.N   R0,??xyYtoRGBConversion_0
    464              {
    465                  // White value is equal to the MINIMUM of the RGB values.    
    466                  W = R < G ? (R < B ? R : B) : (G < B ? G : B);
   \   00000076   0xB2F6             UXTB     R6,R6
   \   00000078   0xB2FF             UXTB     R7,R7
   \   0000007A   0x42BE             CMP      R6,R7
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0xD202             BCS.N    ??xyYtoRGBConversion_1
   \   00000080   0x4631             MOV      R1,R6
   \   00000082   0x42AE             CMP      R6,R5
   \   00000084   0xE001             B.N      ??xyYtoRGBConversion_2
   \                     ??xyYtoRGBConversion_1: (+1)
   \   00000086   0x4639             MOV      R1,R7
   \   00000088   0x42AF             CMP      R7,R5
   \                     ??xyYtoRGBConversion_2: (+1)
   \   0000008A   0xBF88             IT       HI 
   \   0000008C   0x4629             MOVHI    R1,R5
    467                  
    468                  // Now subtract the found White level from each of the RGB values.
    469                  R -= W;
   \   0000008E   0x1A76             SUBS     R6,R6,R1
    470                  G -= W;
   \   00000090   0x1A7F             SUBS     R7,R7,R1
    471                  B -= W;
   \   00000092   0x1A6D             SUBS     R5,R5,R1
   \   00000094   0xE006             B.N      ??xyYtoRGBConversion_3
    472              }
    473              else
    474              {
    475                  // Just set the White level to the current Level.
    476                  W = currentLevel;      
   \                     ??xyYtoRGBConversion_0: (+1)
   \   00000096   0xF89D 0x1008      LDRB     R1,[SP, #+8]
    477                  
    478                  if (mode == AURORA_MODE_DIM)
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD102             BNE.N    ??xyYtoRGBConversion_3
    479                  {
    480                      // Single light mode so set R,G,B levels = 0 (we are only interested in the W level) 
    481                      R = 0;
   \   0000009E   0x2600             MOVS     R6,#+0
    482                      G = 0;
   \   000000A0   0x2700             MOVS     R7,#+0
    483                      B = 0;        
   \   000000A2   0x4635             MOV      R5,R6
    484                  }
    485              }
    486                  
    487              // Set return values.
    488              RGB->R = R;
   \                     ??xyYtoRGBConversion_3: (+1)
   \   000000A4   0x7026             STRB     R6,[R4, #+0]
    489              RGB->G = G;
    490              RGB->B = B;
    491              RGB->W = W;             
   \   000000A6   0x70E1             STRB     R1,[R4, #+3]
   \   000000A8   0x7067             STRB     R7,[R4, #+1]
   \   000000AA   0x70A5             STRB     R5,[R4, #+2]
    492              
    493              emberAfDebugPrintln("xyYtoRGB R=%d, G=%d, B=%d, W=%d", RGB->R, RGB->G, RGB->B, RGB->W);  
   \   000000AC   0x78E0             LDRB     R0,[R4, #+3]
   \   000000AE   0x.... 0x....      ADR.W    R1,?_4
   \   000000B2   0x9001             STR      R0,[SP, #+4]
   \   000000B4   0x78A0             LDRB     R0,[R4, #+2]
   \   000000B6   0x9000             STR      R0,[SP, #+0]
   \   000000B8   0x7863             LDRB     R3,[R4, #+1]
   \   000000BA   0x7822             LDRB     R2,[R4, #+0]
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0x.... 0x....      BL       emberAfPrintln
    494          }
   \   000000C2   0xB009             ADD      SP,SP,#+36
   \   000000C4   0xBDF0             POP      {R4-R7,PC}       ;; return
    495          
    496          /** @brief Get the current Color on the light
    497           *
    498           * Reads the local attributes in the Color control cluster and 
    499           * returns them in the variables passed in.
    500           * 
    501           */

   \                                 In section .text, align 2, keep-with-next
    502          static EmberAfStatus getCurrentColor(int16u *currentX, int16u *currentY)
    503          {
   \                     getCurrentColor: (+1)
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
    504              EmberAfStatus status;
    505              int8u endpoint = 1;
    506              EmberAfClusterId cluster = ZCL_COLOR_CONTROL_CLUSTER_ID;
    507              int8u mask = CLUSTER_MASK_SERVER;
    508              int16u dataPtr;
    509              int8u readLength = sizeof(int16u);
    510              int8u dataType;
    511              
    512              status = emberAfReadAttribute(endpoint, cluster, ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID, mask, (int8u*)&dataPtr, readLength, &dataType);
   \   00000004   0xA803             ADD      R0,SP,#+12
   \   00000006   0x9002             STR      R0,[SP, #+8]
   \   00000008   0x460C             MOV      R4,R1
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x2340             MOVS     R3,#+64
   \   00000010   0xF10D 0x000E      ADD      R0,SP,#+14
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2203             MOVS     R2,#+3
   \   00000018   0xF44F 0x7140      MOV      R1,#+768
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       emberAfReadAttribute
   \   00000022   0x0006             MOVS     R6,R0
    513              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000024   0xD003             BEQ.N    ??getCurrentColor_0
    514              {
    515                  emberAfLevelControlClusterPrintln("ERR: reading currentX", status);
   \   00000026   0x4632             MOV      R2,R6
   \   00000028   0x.... 0x....      ADR.W    R1,?_5
   \   0000002C   0xE015             B.N      ??getCurrentColor_1
    516                  return status;
    517              }
    518              *currentX = dataPtr;
   \                     ??getCurrentColor_0: (+1)
   \   0000002E   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   00000032   0x8028             STRH     R0,[R5, #+0]
    519          
    520              status = emberAfReadAttribute(endpoint, cluster, ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID, mask, (int8u*)&dataPtr, readLength, &dataType);
   \   00000034   0x2340             MOVS     R3,#+64
   \   00000036   0xA803             ADD      R0,SP,#+12
   \   00000038   0x9002             STR      R0,[SP, #+8]
   \   0000003A   0x2204             MOVS     R2,#+4
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x9001             STR      R0,[SP, #+4]
   \   00000040   0xF44F 0x7140      MOV      R1,#+768
   \   00000044   0xF10D 0x000E      ADD      R0,SP,#+14
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       emberAfReadAttribute
   \   00000050   0x0006             MOVS     R6,R0
    521              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000052   0xD007             BEQ.N    ??getCurrentColor_2
    522              {
    523                  emberAfLevelControlClusterPrintln("ERR: reading currentY", status);
   \   00000054   0x4632             MOV      R2,R6
   \   00000056   0x.... 0x....      ADR.W    R1,?_6
   \                     ??getCurrentColor_1: (+1)
   \   0000005A   0x2020             MOVS     R0,#+32
   \   0000005C   0x.... 0x....      BL       emberAfPrintln
    524                  return status;        
   \   00000060   0x4630             MOV      R0,R6
   \   00000062   0xE003             B.N      ??getCurrentColor_3
    525              }    
    526              *currentY = dataPtr;
   \                     ??getCurrentColor_2: (+1)
   \   00000064   0xF8BD 0x000E      LDRH     R0,[SP, #+14]
   \   00000068   0x8020             STRH     R0,[R4, #+0]
    527              
    528              return status;
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??getCurrentColor_3: (+1)
   \   0000006C   0xB004             ADD      SP,SP,#+16
   \   0000006E   0xBD70             POP      {R4-R6,PC}       ;; return
    529          }
    530          
    531          /** @brief Set the current Color attributes
    532           *
    533           * Writes the local attributes in the Color control cluster.
    534           * 
    535           */

   \                                 In section .text, align 2, keep-with-next
    536          static EmberAfStatus setCurrentColor(int16u currentX, int16u currentY)
    537          {
   \                     setCurrentColor: (+1)
   \   00000000   0xB513             PUSH     {R0,R1,R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    538              EmberAfStatus status;
    539              int8u endpoint = 1;
    540              EmberAfClusterId cluster = ZCL_COLOR_CONTROL_CLUSTER_ID;
    541          
    542              status = emberAfWriteServerAttribute(endpoint, cluster, ZCL_COLOR_CONTROL_CURRENT_X_ATTRIBUTE_ID, (int8u*)&currentX, sizeof(int16u));
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0xAB02             ADD      R3,SP,#+8
   \   0000000A   0x2203             MOVS     R2,#+3
   \   0000000C   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000010   0x0004             MOVS     R4,R0
    543              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000012   0xD003             BEQ.N    ??setCurrentColor_0
    544              {
    545                  emberAfLevelControlClusterPrintln("ERR: writing currentX %x", status);
   \   00000014   0x4622             MOV      R2,R4
   \   00000016   0x.... 0x....      ADR.W    R1,?_7
   \   0000001A   0xE00A             B.N      ??setCurrentColor_1
    546                  return status;
    547              }
    548              
    549              status = emberAfWriteServerAttribute(endpoint, cluster, ZCL_COLOR_CONTROL_CURRENT_Y_ATTRIBUTE_ID, (int8u*)&currentY, sizeof(int16u));
   \                     ??setCurrentColor_0: (+1)
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x9000             STR      R0,[SP, #+0]
   \   00000020   0xAB03             ADD      R3,SP,#+12
   \   00000022   0x2204             MOVS     R2,#+4
   \   00000024   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000028   0x0004             MOVS     R4,R0
    550              if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000002A   0xD007             BEQ.N    ??setCurrentColor_2
    551              {
    552                  emberAfLevelControlClusterPrintln("ERR: writing currentY %x", status);
   \   0000002C   0x4622             MOV      R2,R4
   \   0000002E   0x.... 0x....      ADR.W    R1,?_8
   \                     ??setCurrentColor_1: (+1)
   \   00000032   0x2020             MOVS     R0,#+32
   \   00000034   0x.... 0x....      BL       emberAfPrintln
    553                  return status;
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0xE008             B.N      ??setCurrentColor_3
    554              }
    555              
    556              emberAfDebugPrint("Set current Color: X=0x%2x,Y=0x%2x\r\n", currentX, currentX);      
   \                     ??setCurrentColor_2: (+1)
   \   0000003C   0xF8BD 0x3008      LDRH     R3,[SP, #+8]
   \   00000040   0x.... 0x....      ADR.W    R1,?_9
   \   00000044   0x461A             MOV      R2,R3
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       emberAfPrint
    557              
    558              return status;
   \   0000004C   0x2000             MOVS     R0,#+0
   \                     ??setCurrentColor_3: (+1)
   \   0000004E   0xB004             ADD      SP,SP,#+16
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
    559          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xF44F 0x7140      MOV      R1,#+768
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      B.W      emberAfWriteServerAttribute

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   0x........         DC32     emberAfPluginAuroraColourControlMoveToColorEventControl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   0xBC12CCF7         DC32     0xbc12ccf7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   0xBE2A9931         DC32     0xbe2a9931

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   0x3F355C53         DC32     0x3f355c53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   0xBDDB8BAA         DC32     0xbddb8baa

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   0x3EBFFE0E         DC32     0x3ebffe0e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   0xBE833EFF         DC32     0xbe833eff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   0x3F116F01         DC32     0x3f116f01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \   00000000   0x437F0000         DC32     0x437f0000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4D 0x6F          DC8 "MoveColor(strt)"
   \              0x76 0x65    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x28    
   \              0x73 0x74    
   \              0x72 0x74    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x4D 0x6F          DC8 "MoveColor(hdlr)"
   \              0x76 0x65    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x28    
   \              0x68 0x64    
   \              0x6C 0x72    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x53 0x74          DC8 "StepColor(strt), tran=%d"
   \              0x65 0x70    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x28    
   \              0x73 0x74    
   \              0x72 0x74    
   \              0x29 0x2C    
   \              0x20 0x74    
   \              0x72 0x61    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x43 0x6F          DC8 "Color Invalid\015\012"
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x49 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x78 0x79          DC8 "xyYtoRGB R=%d, G=%d, B=%d, W=%d"
   \              0x59 0x74    
   \              0x6F 0x52    
   \              0x47 0x42    
   \              0x20 0x52    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x20 0x47    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x20 0x42    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x20 0x57    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x45 0x52          DC8 "ERR: reading currentX"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x58 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x45 0x52          DC8 "ERR: reading currentY"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x59 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x45 0x52          DC8 "ERR: writing currentX %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x58 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x45 0x52          DC8 "ERR: writing currentY %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x59 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x53 0x65          DC8 "Set current Color: X=0x%2x,Y=0x%2x\015\012"
   \              0x74 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x3A    
   \              0x20 0x58    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x2C 0x59    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    560          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   emberAfPluginAuroraColourControlMoveColor
        24   -> emEventControlSetActive
        24   -> emberAfPrintln
        24   -> getCurrentColor
        24   -> stopAllEvents
      24   emberAfPluginAuroraColourControlMoveColorEventHandler
        24   -> emEventControlSetDelayMS
        24   -> emberAfPluginAuroraColourControlSetRgbColorCallback
        24   -> emberAfPrintln
        24   -> isColorInGamut
        24   -> setCurrentColor
        24   -> xyYtoRGBConversion
      24   emberAfPluginAuroraColourControlMoveToColor
        24   -> emEventControlSetActive
        24   -> getCurrentColor
        24   -> isColorInGamut
        24   -> stopAllEvents
      40   emberAfPluginAuroraColourControlMoveToColorEventHandler
        40   -> __aeabi_f2iz
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f
        40   -> emEventControlSetDelayMS
        40   -> emberAfPluginAuroraColourControlSetRgbColorCallback
        40   -> isColorInGamut
        40   -> setCurrentColor
        40   -> xyYtoRGBConversion
       0   emberAfPluginAuroraColourControlMoveToColorTemperature
       0   emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler
       8   emberAfPluginAuroraColourControlSetNewLevel
         8   -> emberAfPluginAuroraColourControlMoveToColor
         8   -> getCurrentColor
      16   emberAfPluginAuroraColourControlSetOnOff
        16   -> emberAfPluginAuroraColourControlMoveToColor
        16   -> emberAfPluginAuroraPwmEnable
        16   -> getCurrentColor
      24   emberAfPluginAuroraColourControlStepColor
        24   -> emberAfPluginAuroraColourControlMoveToColor
        24   -> emberAfPrintln
        24   -> getCurrentColor
        24   -> isColorInGamut
        24   -> stopAllEvents
      32   getCurrentColor
        32   -> emberAfPrintln
        32   -> emberAfReadAttribute
      24   isColorInGamut
        24   -> __aeabi_f2iz
        24   -> __aeabi_fadd
        24   -> __aeabi_fdiv
        24   -> __aeabi_fmul
        24   -> __aeabi_fsub
        24   -> __aeabi_ui2f
        24   -> emberAfPrint
      24   setCurrentColor
        24   -> emberAfPrint
        24   -> emberAfPrintln
        24   -> emberAfWriteServerAttribute
       0   stopAllEvents
      56   xyYtoRGBConversion
        56   -> __aeabi_f2iz
        56   -> __aeabi_fdiv
        56   -> __aeabi_fmul
        56   -> __aeabi_ui2f
        56   -> emAfPluginLevelControlClusterGetCurrentLevel
        56   -> emberAfPluginAuroraColourControlConvertColor
        56   -> emberAfPrintln
        56   -> getAuroraDimmerMode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_2
       4  ??DataTable18_3
       4  ??DataTable18_4
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
       8  ?Subroutine0
      12  ?Subroutine1
       6  ?Subroutine2
      10  ?Subroutine3
      16  ?_0
      16  ?_1
      28  ?_2
      16  ?_3
      32  ?_4
      24  ?_5
      24  ?_6
      28  ?_7
      28  ?_8
      40  ?_9
      36  conversionMatrix
      58  emberAfPluginAuroraColourControlMoveColor
     126  emberAfPluginAuroraColourControlMoveColorEventHandler
       8  emberAfPluginAuroraColourControlMoveStepEventControl
      98  emberAfPluginAuroraColourControlMoveToColor
      48  emberAfPluginAuroraColourControlMoveToColorEventControl
          emberAfPluginAuroraColourControlMoveColorEventControl
          emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl
          moveToColor
          moveColor
     180  emberAfPluginAuroraColourControlMoveToColorEventHandler
       4  emberAfPluginAuroraColourControlMoveToColorTemperature
       2  emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler
      14  emberAfPluginAuroraColourControlSetNewLevel
      24  emberAfPluginAuroraColourControlSetOnOff
      66  emberAfPluginAuroraColourControlStepColor
      24  gamut
     112  getCurrentColor
     256  intensityCorrection
     192  isColorInGamut
      82  setCurrentColor
      12  stopAllEvents
     198  xyYtoRGBConversion

 
    56 bytes in section .bss
    24 bytes in section .data
   292 bytes in section .rodata
 1 496 bytes in section .text
 
 1 496 bytes of CODE  memory
   292 bytes of CONST memory
    80 bytes of DATA  memory

Errors: none
Warnings: none
