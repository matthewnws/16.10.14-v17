###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:33:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-host-protocol\aurora-host-plc-protocol.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-host-protocol\aurora-host-plc-protocol.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-host-plc-protocol.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-host-protocol\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-host-plc-protocol.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-host-plc-protocol.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-host-protocol\aurora-host-plc-protocol.c
      1          #include <string.h>
      2          #include "app/framework/include/af.h"
      3          #include "aurora-host-hal.h" 
      4          #include "aurora-host-protocol.h" 
      5          #include "aurora-host-plc-protocol.h" 
      6          
      7          
      8          #define UART_NOT_READY_NOTIFY_LIMIT         32     // gives a Uart ready TO of 8 seconds
      9          #define MAX_NUM_PLC_CMD_RETRIES             3     
     10          
     11          #define EXTERNAL_BUFFER_LENGTH              128     // For building zcl transparent cmds.
     12          
     13          #define ZCL_PLC_ERROR_TYPE_ID               0xEE   // For reporting plc serial errors to gateway.
     14          #define ZCL_PLC_UART_READY_TIMEOUT_ERROR    0x04
     15          #define ZCL_PLC_RSP_TIMEOUT_ERROR           0x05    
     16          #define ZCL_PLC_TUNNEL_RSP_ERROR            0x06
     17          #define ZCL_PLC_UNSOLICITED_RSP_ERROR       0x07
     18          
     19          EmberEventControl emberAfPluginAuroraHostProtocolPlcTimeoutEventControl;
     20          void emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler(void);
     21          

   \                                 In section .data, align 4
     22          EmberEventControl emberAfPluginAuroraHostProtocolInterCommandDelayEventControl;
     23          void emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler(void);
     24          void emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart(boolean restart, int16u toMs);
     25          void emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop(void);
     26          void emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(int8u* payload, int8u payloadLen);
     27          
     28          static int8u plcCountUartNotReady = 0;
   \                     plcCountUartNotReady:
   \   00000000   0x00               DC8 0
   \   00000001   0x00               DC8 0
   \   00000002   0x00               DC8 0
   \   00000003   0x01               DC8 1
   \                     emberAfPluginAuroraHostProtocolInterCommandDelayEventControl:
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .bss, align 4
     29          
     30          static int8u plcCalculateCrc(int8u* command);
     31          static void plcBufferCommand(int8u* data);
     32          static void plcSendCommand(void);
     33          
     34          static int8u plcCmdBuffer[MAX_PLC_COMMAND_LENGTH];
     35          static int8u plcCmdLength;
     36          static int8u plcNumCmdRetries = 0;
     37          
     38          static boolean plcEnableSend = TRUE;
     39          static int8u plcRspBuffer[MAX_PLC_COMMAND_LENGTH];
     40          static int8u plcRspLength;
     41          
     42          static boolean plcSerialTimeOutActive = FALSE;
   \                     plcSerialTimeOutActive:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     emberAfPluginAuroraHostProtocolPlcTimeoutEventControl:
   \   00000004                      DS8 8

   \                                 In section .bss, align 4
   \                     plcCmdBuffer:
   \   00000000                      DS8 64

   \                                 In section .bss, align 4
   \                     plcRspBuffer:
   \   00000000                      DS8 64
   \   00000040                      DS8 1
     43          
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void plcSendTunnelCommand(int8u* data, int8u length)
     46          {
   \                     plcSendTunnelCommand: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
     47              int8u command[MAX_PLC_COMMAND_LENGTH] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP2};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      ADR.W    R1,?_0
   \   0000000E   0x2240             MOVS     R2,#+64
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
     48                  
     49              emberAfDebugPrint("Tunnel command %d\r\n", length);    
   \   00000014   0x462A             MOV      R2,R5
   \   00000016   0x.... 0x....      ADR.W    R1,?_1
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x.... 0x....      BL       emberAfPrint
     50              
     51              command[1] = length + 2;
   \   00000020   0x1CA8             ADDS     R0,R5,#+2
   \   00000022   0xF88D 0x0001      STRB     R0,[SP, #+1]
     52              memcpy(&command[3], data, length);
   \   00000026   0x462A             MOV      R2,R5
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0xF10D 0x0003      ADD      R0,SP,#+3
   \   0000002E   0x.... 0x....      BL       __aeabi_memcpy
     53              plcBufferCommand(command);
   \   00000032   0xA800             ADD      R0,SP,#+0
   \   00000034   0x.... 0x....      BL       plcBufferCommand
     54          }
   \   00000038   0xB011             ADD      SP,SP,#+68
   \   0000003A   0xBD30             POP      {R4,R5,PC}       ;; return
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void plcSendOnCommand(void)
     57          {
   \                     plcSendOnCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
     58              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1,  AURORA_HOST_PLC_ON_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0};
   \   00000002   0x.... 0x....      ADR.W    R1,?_2
   \   00000006   0x....             B.N      ?Subroutine0
     59                
     60              // Set the command length
     61              command[1] = 4;
     62              plcBufferCommand(command);
     63          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0xB083             SUB      SP,SP,#+12
   \   00000002   0xC90C             LDM      R1!,{R2,R3}
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0xC00C             STM      R0!,{R2,R3}
   \   00000008   0x2004             MOVS     R0,#+4
   \   0000000A   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000000E   0xA800             ADD      R0,SP,#+0
   \   00000010   0x.... 0x....      BL       plcBufferCommand
   \   00000014   0xBD07             POP      {R0-R2,PC}       ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          void plcSendOffCommand(void)
     66          {
   \                     plcSendOffCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
     67              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1, AURORA_HOST_PLC_OFF_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0};
   \   00000002   0x.... 0x....      ADR.W    R1,?_3
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
     68                
     69              // Set the command length
     70              command[1] = 4;
     71              plcBufferCommand(command);
     72          }
     73          

   \                                 In section .text, align 2, keep-with-next
     74          void plcSendSetPowerLevelCommand(int8u powerLevel)
     75          {
   \                     plcSendSetPowerLevelCommand: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
     76              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1, AURORA_HOST_PLC_SET_POWER_LEVEL_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0, 0};
   \   00000002   0x.... 0x....      ADR.W    R2,?_4
   \   00000006   0x....             B.N      ?Subroutine1
     77              
     78              // Set the command length
     79              command[1] = 5;
     80          
     81              command[5] = powerLevel;
     82              
     83              plcBufferCommand(command);
     84          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xCA18             LDM      R2!,{R3,R4}
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0xC118             STM      R1!,{R3,R4}
   \   00000006   0x2105             MOVS     R1,#+5
   \   00000008   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   0000000C   0xF88D 0x1001      STRB     R1,[SP, #+1]
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       plcBufferCommand
   \   00000016   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void plcSendSetColorCommand(int8u red, int8u green, int8u blue, int8u white)
     87          {
   \                     plcSendSetColorCommand: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
     88              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1, AURORA_HOST_PLC_SET_COLOUR_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0, 0, 0, 0, 0};
   \   00000002   0x.... 0x....      ADR.W    R5,?_5
   \   00000006   0xE8B5 0x10C0      LDM      R5!,{R6,R7,R12}
   \   0000000A   0xAC00             ADD      R4,SP,#+0
   \   0000000C   0xE8A4 0x10C0      STM      R4!,{R6,R7,R12}
     89              
     90              // Set the command length
     91              command[1] = 8;
     92          
     93              command[5] = red;
   \   00000010   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000014   0x2408             MOVS     R4,#+8
     94              command[6] = green;
   \   00000016   0xF88D 0x1006      STRB     R1,[SP, #+6]
     95              command[7] = blue;
   \   0000001A   0xF88D 0x2007      STRB     R2,[SP, #+7]
     96              command[8] = white;
   \   0000001E   0xF88D 0x3008      STRB     R3,[SP, #+8]
   \   00000022   0xF88D 0x4001      STRB     R4,[SP, #+1]
     97              
     98              plcBufferCommand(command);
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x.... 0x....      BL       plcBufferCommand
     99          }
   \   0000002C   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void plcSendSetCctCommand(int8u cct)
    102          {
   \                     plcSendSetCctCommand: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    103              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1, AURORA_HOST_PLC_SET_CCT_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0, 0};
   \   00000002   0x.... 0x....      ADR.W    R2,?_6
   \   00000006                      REQUIRE ?Subroutine1
   \   00000006                      ;; // Fall through to label ?Subroutine1
    104              
    105              // Set the command length
    106              command[1] = 5;
    107          
    108              command[5] = cct;
    109              
    110              plcBufferCommand(command);
    111          }
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void plcSendStatusRequestCommand(void)
    114          {
   \                     plcSendStatusRequestCommand: (+1)
   \   00000000   0xB500             PUSH     {LR}
    115              int8u command[] = {AURORA_HOST_PLC_START_BYTE, 0, AURORA_CMD_TYPE_EP1, AURORA_HOST_PLC_STATUS_REQUEST_COMMAND, AURORA_HOST_PLC_GLOBAL_ADDRESS, 0};
   \   00000002   0x.... 0x....      ADR.W    R1,?_7
   \   00000006   0x....             B.N      ?Subroutine0
    116              
    117              // Set the command length
    118              command[1] = 4;
    119          
    120              plcBufferCommand(command);
    121          }
    122          

   \                                 In section .text, align 2, keep-with-next
    123          void emberAfPluginAuroraHostHalPlcCheckHost(void)
    124          {
   \                     emberAfPluginAuroraHostHalPlcCheckHost: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable36_1
   \   00000006   0xE004             B.N      ??emberAfPluginAuroraHostHalPlcCheckHost_0
    125              while (1)  // Loop until a PLC message is decoded or no valid PLC message is found.
    126              {              
    127                  emberAfPluginAuroraHostHalPlcReadBytes();
    128                         
    129                  plcRspLength = peekReadBuffer(plcRspBuffer, MAX_PLC_COMMAND_LENGTH);                
    130                  if (plcRspLength > 0) 
    131                  {            
    132                      emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart(FALSE, 500);  // Start 500mS rx TO (dont restart if TO already running).
    133                  }        
    134                  if (plcRspLength < 2) 
    135                  {
    136                      return;  // Keep collecting PLC serial bytes.   
    137                  }
    138                  if (plcRspLength < plcRspBuffer[1] + 2) 
    139                  {
    140                      return;  // Keep collecting PLC serial bytes.
    141                  }
    142                  
    143                  receiveReadBuffer(plcRspBuffer, plcRspLength);
    144                          
    145                  if (emberAfPluginAuroraHostHalPlcHandleReceivedData(plcRspBuffer, plcRspLength))
    146                  {
    147                      // Buffer processing completed.          
    148                      emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop();          
    149                      return;  // terminate receive buffer process loop.
    150                  }
    151                  else
    152                  {  
    153                      emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart(TRUE, 500);  // Start 500mS rx TO (always restart).
   \                     ??emberAfPluginAuroraHostHalPlcCheckHost_1: (+1)
   \   00000008   0xF44F 0x71FA      MOV      R1,#+500
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart
    154                  }        
   \                     ??emberAfPluginAuroraHostHalPlcCheckHost_0: (+1)
   \   00000012   0x.... 0x....      BL       emberAfPluginAuroraHostHalPlcReadBytes
   \   00000016   0x2140             MOVS     R1,#+64
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       peekReadBuffer
   \   0000001E   0xF884 0x0040      STRB     R0,[R4, #+64]
   \   00000022   0xB120             CBZ.N    R0,??emberAfPluginAuroraHostHalPlcCheckHost_2
   \   00000024   0xF44F 0x71FA      MOV      R1,#+500
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart
   \                     ??emberAfPluginAuroraHostHalPlcCheckHost_2: (+1)
   \   0000002E   0xF894 0x1040      LDRB     R1,[R4, #+64]
   \   00000032   0x2902             CMP      R1,#+2
   \   00000034   0xBFA2             ITTT     GE 
   \   00000036   0x7862             LDRBGE   R2,[R4, #+1]
   \   00000038   0x1C92             ADDGE    R2,R2,#+2
   \   0000003A   0x4291             CMPGE    R1,R2
   \   0000003C   0xDB0C             BLT.N    ??emberAfPluginAuroraHostHalPlcCheckHost_3
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       receiveReadBuffer
   \   00000044   0xF894 0x1040      LDRB     R1,[R4, #+64]
   \   00000048   0x4620             MOV      R0,R4
   \   0000004A   0x.... 0x....      BL       emberAfPluginAuroraHostHalPlcHandleReceivedData
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD0DA             BEQ.N    ??emberAfPluginAuroraHostHalPlcCheckHost_1
   \   00000052   0xE8BD 0x4010      POP      {R4,LR}
   \   00000056   0x....             B.N      emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop
    155              }        
   \                     ??emberAfPluginAuroraHostHalPlcCheckHost_3: (+1)
   \   00000058   0xBD10             POP      {R4,PC}          ;; return
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          boolean emberAfPluginAuroraHostHalPlcHandleReceivedData(int8u* data, int8u size)
    159          {
   \                     emberAfPluginAuroraHostHalPlcHandleReceivedData: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    160              int8u crc;
    161              int8u crcLocation;
    162              
    163              debugBuffer(data, size);
   \   00000008   0x.... 0x....      BL       debugBuffer
    164              
    165              // Check PLC message is at start of data buffer.
    166              crc = plcCalculateCrc(data);
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       plcCalculateCrc
    167              crcLocation = data[1] + 1;
   \   00000012   0x7861             LDRB     R1,[R4, #+1]
   \   00000014   0x1C4E             ADDS     R6,R1,#+1
   \   00000016   0xB2F6             UXTB     R6,R6
    168              
    169              if (crc == data[crcLocation]) 
   \   00000018   0x5D33             LDRB     R3,[R6, R4]
   \   0000001A   0x4298             CMP      R0,R3
   \   0000001C   0xD11D             BNE.N    ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_0
    170              {
    171                  // Valid PLC message found.
    172                  emberAfPluginAuroraHostHalPlcDecodeResponse(data, size);
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       emberAfPluginAuroraHostHalPlcDecodeResponse
    173                  
    174                  int8u nextMsgLocation = crcLocation + 1;
   \   00000026   0x1C76             ADDS     R6,R6,#+1
   \   00000028   0xB2F6             UXTB     R6,R6
    175                  
    176                  if (nextMsgLocation < size)
   \   0000002A   0x42AE             CMP      R6,R5
   \   0000002C   0xDA10             BGE.N    ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_1
    177                  {
    178                      // Handle any truncated data - copy any bytes following the decoded msg to start of the received data buffer. 
    179                      int8u numTruncatedBytes = size - nextMsgLocation;            
   \   0000002E   0x1BAD             SUBS     R5,R5,R6
    180                      emberAfDebugPrintln("Msg decoded - handle %d truncated data bytes", numTruncatedBytes);       
   \   00000030   0xB2ED             UXTB     R5,R5
   \   00000032   0x462A             MOV      R2,R5
   \   00000034   0x.... 0x....      ADR.W    R1,?_8
   \   00000038   0x.... 0x....      BL       ?Subroutine4
    181                      
    182                      copyToReceiveBuffer(&data[nextMsgLocation], numTruncatedBytes);  
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000003C   0x4629             MOV      R1,R5
   \   0000003E   0x1930             ADDS     R0,R6,R4
   \   00000040   0x.... 0x....      BL       copyToReceiveBuffer
    183                      
    184                      // Modify receive buffer pointers so we can receive more serial data from host in-thread.
    185                      setReceiveBufferIndexValues(0,                  // ReadIdx, always set back to start of buffer. 
    186                                                  numTruncatedBytes); // WriteIdx            
   \   00000044   0x4629             MOV      R1,R5
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       setReceiveBufferIndexValues
    187                      
    188                      return FALSE; // == buffer processing NOT completed.
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xBD76             POP      {R1,R2,R4-R6,PC}
    189                  }        
    190                  else
    191                  {
    192                      // PLC msg decoded, no truncated data.
    193                      emberAfDebugPrintln("Msg decoded - No truncated data");               
   \                     ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_1: (+1)
   \   00000050   0x.... 0x....      ADR.W    R1,?_9
   \   00000054   0x.... 0x....      BL       ?Subroutine5
    194                  }
    195              } 
   \                     ??CrossCallReturnLabel_13: (+1)
   \   00000058   0xE006             B.N      ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_2
    196              else 
    197              {
    198                  emberAfDebugPrintln("plc resp CRC error 0x%x 0x%x %d", crc, data[crcLocation], crcLocation);           
   \                     ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_0: (+1)
   \   0000005A   0x4602             MOV      R2,R0
   \   0000005C   0x9600             STR      R6,[SP, #+0]
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x.... 0x....      ADR.W    R1,?_10
   \   00000064   0x.... 0x....      BL       emberAfPrintln
    199              }        
    200              
    201              emberAfPluginAuroraHostHalPlcClearReceivedData();        
   \                     ??emberAfPluginAuroraHostHalPlcHandleReceivedDa_2: (+1)
   \   00000068   0x.... 0x....      BL       clearReceiveBuffer
    202              return TRUE; // == buffer processing completed.   
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    203          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    204          

   \                                 In section .text, align 2, keep-with-next
    205          void emberAfPluginAuroraHostHalPlcClearReceivedData(void)
    206          { 
    207              // Clear hal serial receive buffer.
    208              clearReceiveBuffer();  
   \                     emberAfPluginAuroraHostHalPlcClearReceivedData: (+1)
   \   00000000   0x.... 0x....      B.W      clearReceiveBuffer
    209          }
    210            

   \                                 In section .text, align 2, keep-with-next
    211          void emberAfPluginAuroraHostHalPlcDecodeResponse(int8u* data, int8u size)
    212          {  
    213              int8u responseType = data[2];
    214              
    215              switch (responseType) 
   \                     emberAfPluginAuroraHostHalPlcDecodeResponse: (+1)
   \   00000000   0x7882             LDRB     R2,[R0, #+2]
   \   00000002   0xB142             CBZ.N    R2,??emberAfPluginAuroraHostHalPlcDecodeResponse_0
   \   00000004   0x2A80             CMP      R2,#+128
   \   00000006   0xD005             BEQ.N    ??emberAfPluginAuroraHostHalPlcDecodeResponse_1
   \   00000008   0x2A81             CMP      R2,#+129
   \   0000000A   0xD002             BEQ.N    ??emberAfPluginAuroraHostHalPlcDecodeResponse_2
   \   0000000C   0x2AFF             CMP      R2,#+255
   \   0000000E   0xD103             BNE.N    ??emberAfPluginAuroraHostHalPlcDecodeResponse_3
    216              {
    217                  case AURORA_HOST_PLC_DATA_ACK:
    218                  {
    219                      emberAfPluginAuroraHostHalProcessDataAck(data, size);
   \   00000010   0x....             B.N      emberAfPluginAuroraHostHalProcessDataAck
    220                      break;
    221                  }            
    222                  case AURORA_HOST_PLC_TUNNEL_RESPONSE:
    223                  {
    224                      emberAfPluginAuroraHostHalProcessTunnelResponse(data, size);
   \                     ??emberAfPluginAuroraHostHalPlcDecodeResponse_2: (+1)
   \   00000012   0x....             B.N      emberAfPluginAuroraHostHalProcessTunnelResponse
    225                      break;
    226                  }            
    227                  case AURORA_HOST_PLC_STATUS_RESPONSE:
    228                  {
    229                      emberAfPluginAuroraHostHalProcessStatusResponse(data, size);
   \                     ??emberAfPluginAuroraHostHalPlcDecodeResponse_1: (+1)
   \   00000014   0x....             B.N      emberAfPluginAuroraHostHalProcessStatusResponse
    230                      break;
    231                  }
    232                  case AURORA_HOST_PLC_UNSOLICITED_RESPONSE:
    233                  {
    234                      emberAfPluginAuroraHostHalProcessUnsolicitedResponse(data, size);
   \                     ??emberAfPluginAuroraHostHalPlcDecodeResponse_0: (+1)
   \   00000016   0x....             B.N      emberAfPluginAuroraHostHalProcessUnsolicitedResponse
    235                      break;
    236                  }            
    237              }
    238          }
   \                     ??emberAfPluginAuroraHostHalPlcDecodeResponse_3: (+1)
   \   00000018   0x4770             BX       LR               ;; return
    239          

   \                                 In section .text, align 2, keep-with-next
    240          void emberAfPluginAuroraHostHalProcessDataAck(int8u* data, int8u size)
    241          {
   \                     emberAfPluginAuroraHostHalProcessDataAck: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    242              int8u status = data[AURORA_PLC_CMD_ACK_STATUS];
   \   00000002   0x7904             LDRB     R4,[R0, #+4]
    243              
    244              switch (status) 
   \   00000004   0x....             LDR.N    R5,??DataTable36_2
   \   00000006   0xB134             CBZ.N    R4,??emberAfPluginAuroraHostHalProcessDataAck_0
   \   00000008   0x2C02             CMP      R4,#+2
   \   0000000A   0xD031             BEQ.N    ??emberAfPluginAuroraHostHalProcessDataAck_1
   \   0000000C   0xD30A             BCC.N    ??emberAfPluginAuroraHostHalProcessDataAck_2
   \   0000000E   0x2C04             CMP      R4,#+4
   \   00000010   0xD037             BEQ.N    ??emberAfPluginAuroraHostHalProcessDataAck_3
   \   00000012   0xD307             BCC.N    ??emberAfPluginAuroraHostHalProcessDataAck_2
   \   00000014   0xE041             B.N      ??emberAfPluginAuroraHostHalProcessDataAck_4
    245              {
    246                  case AURORA_PLC_CMD_ACK_STATUS_OK:
    247                  {
    248                      emberAfDebugPrintln("Data Ack: OK");                
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_0: (+1)
   \   00000016   0x.... 0x....      ADR.W    R1,?_11
   \   0000001A   0x.... 0x....      BL       ?Subroutine5
    249                      plcCmdLength = 0;  // Allows next plc cmd.   
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x7068             STRB     R0,[R5, #+1]
    250             
    251                      //GBHERE Push command via zcl transparent if the size is > ?? (i.e. an unsolicied Push cmd,
    252                      // not a data ACK
    253                      
    254                      break;
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}
    255                  }            
    256                  case AURORA_PLC_CMD_ACK_STATUS_CRC_ERROR:
    257                  case AURORA_PLC_CMD_ACK_STATUS_UNKNOWN:
    258                  {
    259                      emberAfDebugPrintln("Data Ack: %s", (status == AURORA_PLC_CMD_ACK_STATUS_CRC_ERROR) ? "CRC Error" : "Unknown Error");    
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_2: (+1)
   \   00000024   0x2C01             CMP      R4,#+1
   \   00000026   0xBF0C             ITE      EQ 
   \   00000028   0x.... 0x....      ADREQ.W  R2,?_13
   \   0000002C   0x.... 0x....      ADRNE.W  R2,?_14
   \   00000030   0x.... 0x....      ADR.W    R1,?_12
   \   00000034   0x.... 0x....      BL       ?Subroutine4
    260                      
    261                      // Check if we should resend last plc cmd.
    262                      if (plcCmdLength > 0)
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000038   0x7868             LDRB     R0,[R5, #+1]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD031             BEQ.N    ??CrossCallReturnLabel_9
    263                      {            
    264                          ++plcNumCmdRetries;
   \   0000003E   0x78A8             LDRB     R0,[R5, #+2]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x70A8             STRB     R0,[R5, #+2]
    265                          if (plcNumCmdRetries < MAX_NUM_PLC_CMD_RETRIES)
   \   00000044   0xB2C0             UXTB     R0,R0
   \   00000046   0x2803             CMP      R0,#+3
   \   00000048   0xBFB8             IT       LT 
   \   0000004A   0x210A             MOVLT    R1,#+10
    266                          {
    267                              // Send retry cmd to host.
    268                              emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 10); // Send retry in 10mS.
   \   0000004C   0xDB21             BLT.N    ??emberAfPluginAuroraHostHalProcessDataAck_5
    269                          }
    270                          else
    271                          {   
    272                              plcCmdLength = 0;  // Allows next plc cmd.
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x7068             STRB     R0,[R5, #+1]
    273                              
    274                              // Report CMD ACK TO ERROR to Gateway.
    275                      
    276                              // Build a zcl error response.
    277                              int8u zclErrMsg[3];
    278                              int8u zclErrMsgLen = 3;
    279                              zclErrMsg[0] = ZCL_PLC_ERROR_TYPE_ID;  
   \   00000052   0x.... 0x....      BL       ?Subroutine7
    280                              zclErrMsg[1] = status;            // insert the error type.
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000056   0xA800             ADD      R0,SP,#+0
    281                              zclErrMsg[2] = plcCmdBuffer[1];   // the cmd Id that timed-out.
   \   00000058   0x....             LDR.N    R1,??DataTable36_3
   \   0000005A   0x784A             LDRB     R2,[R1, #+1]
   \   0000005C   0x7044             STRB     R4,[R0, #+1]
   \   0000005E   0x7082             STRB     R2,[R0, #+2]
    282                                          
    283                              // Were we expecting a tunnel response?
    284                              if (plcCmdBuffer[2] == AURORA_CMD_TYPE_EP2)
   \   00000060   0x7888             LDRB     R0,[R1, #+2]
   \   00000062   0x2801             CMP      R0,#+1
   \   00000064   0xD102             BNE.N    ??emberAfPluginAuroraHostHalProcessDataAck_6
    285                              {
    286                                  // Send error msg to coo over tunnel. 
    287                                  emberAfPluginAuroraHostProcessTunnelResponseCallback(zclErrMsg, zclErrMsgLen);
   \   00000066   0x.... 0x....      BL       ?Subroutine6
    288                              }
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000006A   0xBD31             POP      {R0,R4,R5,PC}
    289                              else
    290                              {
    291                                  // Send error msg to coo using zcl transparent msp command. 
    292                                  emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(zclErrMsg, zclErrMsgLen);
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_6: (+1)
   \   0000006C   0x2103             MOVS     R1,#+3
   \   0000006E   0x....             B.N      ?Subroutine2
    293                              }
    294                          }
    295                      }            
    296                      break;
    297                  }            
    298                  case AURORA_PLC_CMD_ACK_STATUS_BUSY:
    299                  {
    300                      emberAfDebugPrintln("Data Ack: Busy");    
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_1: (+1)
   \   00000070   0x.... 0x....      ADR.W    R1,?_15
   \   00000074   0x.... 0x....      BL       ?Subroutine5
    301                      plcEnableSend = FALSE;
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x70E8             STRB     R0,[R5, #+3]
    302                      emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 300);  // Dont allow a PLC cmd for 300mS.
   \   0000007C   0xF44F 0x7196      MOV      R1,#+300
   \   00000080   0xE007             B.N      ??emberAfPluginAuroraHostHalProcessDataAck_5
    303                      break;
    304                  }            
    305                  case AURORA_PLC_CMD_ACK_STARTUP_NOT_COMPLETE:
    306                  {
    307                      emberAfDebugPrintln("Data Ack: Startup Not Complete");    
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_3: (+1)
   \   00000082   0x.... 0x....      ADR.W    R1,?_16
   \   00000086   0x.... 0x....      BL       ?Subroutine5
    308                      plcEnableSend = FALSE;
   \                     ??CrossCallReturnLabel_10: (+1)
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x70E8             STRB     R0,[R5, #+3]
    309                      emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 2000);  // Dont allow a PLC cmd for 2000mS.
   \   0000008E   0xF44F 0x61FA      MOV      R1,#+2000
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_5: (+1)
   \   00000092   0x1D28             ADDS     R0,R5,#+4
   \   00000094   0x.... 0x....      BL       emEventControlSetDelayMS
    310                      break;
   \   00000098   0xBD31             POP      {R0,R4,R5,PC}
    311                  }    
    312                  default:
    313                  {
    314                      emberAfDebugPrintln("Data Ack: Invalid");    
   \                     ??emberAfPluginAuroraHostHalProcessDataAck_4: (+1)
   \   0000009A   0x.... 0x....      ADR.W    R1,?_17
   \   0000009E   0x.... 0x....      BL       ?Subroutine5
    315                      break;
    316                  }
    317              }
    318          }
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000000A2   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x.... 0x....      BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000004   0xBD31             POP      {R0,R4,R5,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x20EE             MOVS     R0,#+238
   \   00000002   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x2103             MOVS     R1,#+3
   \                     ??Subroutine8_0: (+1)
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x....             B.N      emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x2103             MOVS     R1,#+3
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x.... 0x....      B.W      emberAfPluginAuroraHostProcessTunnelResponseCallback
    319          

   \                                 In section .text, align 2, keep-with-next
    320          void emberAfPluginAuroraHostHalProcessTunnelResponse(int8u* data, int8u size)
    321          {
   \                     emberAfPluginAuroraHostHalProcessTunnelResponse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
    322              if (size >= 4) 
   \   00000004   0x462A             MOV      R2,R5
   \   00000006   0x2A04             CMP      R2,#+4
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0x....             LDR.N    R6,??DataTable36_2
   \   0000000E   0xDB0D             BLT.N    ??emberAfPluginAuroraHostHalProcessTunnelRespon_0
    323              {
    324                  emberAfDebugPrintln("Tunnel Response OK: 0x%x bytes", size);            
   \   00000010   0x.... 0x....      ADR.W    R1,?_18
   \   00000014   0x.... 0x....      BL       ?Subroutine4
    325                  
    326                  plcCmdLength = 0;  // Allows next plc cmd.
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x7070             STRB     R0,[R6, #+1]
    327                  
    328                  // Format the response, discarding the header and CRC from the PLC Host protocol.
    329                  // Add the length to the start of the response
    330                  data[2] = size - 4;
    331                  emberAfPluginAuroraHostProcessTunnelResponseCallback(&data[2], size - 3);
   \   0000001C   0x1EE9             SUBS     R1,R5,#+3
   \   0000001E   0x1F28             SUBS     R0,R5,#+4
   \   00000020   0x70A0             STRB     R0,[R4, #+2]
   \   00000022   0xB2C9             UXTB     R1,R1
   \   00000024   0x1CA0             ADDS     R0,R4,#+2
   \   00000026   0x.... 0x....      BL       emberAfPluginAuroraHostProcessTunnelResponseCallback
   \   0000002A   0xBD73             POP      {R0,R1,R4-R6,PC}
    332              }
    333              else
    334              {
    335                  emberAfDebugPrintln("Tunnel Response error: 0x%x bytes", size);            
   \                     ??emberAfPluginAuroraHostHalProcessTunnelRespon_0: (+1)
   \   0000002C   0x.... 0x....      ADR.W    R1,?_19
   \   00000030   0x.... 0x....      BL       ?Subroutine4
    336                  
    337                  // Check if we should resend last plc (tunnel) cmd to host.
    338                  if (plcCmdLength > 0)
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000034   0x7870             LDRB     R0,[R6, #+1]
   \   00000036   0xB1B8             CBZ.N    R0,??emberAfPluginAuroraHostHalProcessTunnelRespon_1
    339                  {            
    340                      ++plcNumCmdRetries;
   \   00000038   0x78B0             LDRB     R0,[R6, #+2]
   \   0000003A   0x1C40             ADDS     R0,R0,#+1
   \   0000003C   0x70B0             STRB     R0,[R6, #+2]
    341                      if (plcNumCmdRetries < MAX_NUM_PLC_CMD_RETRIES)
   \   0000003E   0xB2C0             UXTB     R0,R0
   \   00000040   0x2803             CMP      R0,#+3
   \   00000042   0xDA04             BGE.N    ??emberAfPluginAuroraHostHalProcessTunnelRespon_2
    342                      {
    343                          // Send retry cmd to host.
    344                          emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 10); // Send retry in 10mS.
   \   00000044   0x210A             MOVS     R1,#+10
   \   00000046   0x1D30             ADDS     R0,R6,#+4
   \   00000048   0x.... 0x....      BL       emEventControlSetDelayMS
   \   0000004C   0xBD73             POP      {R0,R1,R4-R6,PC}
    345                      }
    346                      else
    347                      {
    348                          plcCmdLength = 0;  // Allows next plc cmd.
   \                     ??emberAfPluginAuroraHostHalProcessTunnelRespon_2: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x7070             STRB     R0,[R6, #+1]
    349                          
    350                          // Build a zcl error response.
    351                          int8u zclErrMsg[3];
    352                          int8u zclErrMsgLen = 3;
    353                          zclErrMsg[0] = ZCL_PLC_ERROR_TYPE_ID;  
    354                          zclErrMsg[1] = ZCL_PLC_TUNNEL_RSP_ERROR; 
   \   00000052   0x2106             MOVS     R1,#+6
   \   00000054   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000058   0xA800             ADD      R0,SP,#+0
   \   0000005A   0x7041             STRB     R1,[R0, #+1]
    355                          zclErrMsg[2] = plcCmdBuffer[1];   // the cmd Id that gave the error rsp.
   \   0000005C   0x....             LDR.N    R1,??DataTable36_3
   \   0000005E   0x7849             LDRB     R1,[R1, #+1]
   \   00000060   0x7081             STRB     R1,[R0, #+2]
    356                                  
    357                          // Send error msg to coo over tunnel. 
    358                          emberAfPluginAuroraHostProcessTunnelResponseCallback(zclErrMsg, zclErrMsgLen);            
   \   00000062   0x2103             MOVS     R1,#+3
   \   00000064   0x.... 0x....      BL       emberAfPluginAuroraHostProcessTunnelResponseCallback
    359                      }
    360                  }
    361              }
    362          }
   \                     ??emberAfPluginAuroraHostHalProcessTunnelRespon_1: (+1)
   \   00000068   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    363          

   \                                 In section .text, align 2, keep-with-next
    364          void emberAfPluginAuroraHostHalProcessUnsolicitedResponse(int8u* data, int8u size)
    365          {
   \                     emberAfPluginAuroraHostHalProcessUnsolicitedResponse: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460D             MOV      R5,R1
    366              if (size >= 4) 
   \   00000004   0x462A             MOV      R2,R5
   \   00000006   0x2A04             CMP      R2,#+4
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xDB0B             BLT.N    ??emberAfPluginAuroraHostHalProcessUnsolicitedR_0
    367              {
    368                  emberAfDebugPrintln("Unsolicited Response OK: 0x%x bytes", size);            
   \   0000000C   0x.... 0x....      ADR.W    R1,?_20
   \   00000010   0x.... 0x....      BL       ?Subroutine4
    369                          
    370                  // Format the response, discarding the header and CRC from the PLC Host protocol.
    371                  // Add the length to the start of the response and send to coo using zcl transparent msp command.         
    372                  data[2] = size - 4;
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000014   0x1F28             SUBS     R0,R5,#+4
   \   00000016   0x70A0             STRB     R0,[R4, #+2]
    373                  emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(&data[2], size-3);
   \   00000018   0x1EE9             SUBS     R1,R5,#+3
   \   0000001A   0xB2C9             UXTB     R1,R1
   \   0000001C   0x1CA0             ADDS     R0,R4,#+2
   \   0000001E   0x.... 0x....      BL       emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
   \   00000022   0xBD31             POP      {R0,R4,R5,PC}
    374              }
    375              else
    376              {
    377                  emberAfDebugPrintln("Unsolicited Response error: 0x%x bytes", size);            
   \                     ??emberAfPluginAuroraHostHalProcessUnsolicitedR_0: (+1)
   \   00000024   0x.... 0x....      ADR.W    R1,?_21
   \   00000028   0x.... 0x....      BL       ?Subroutine4
    378          
    379                  // Note: No plc send msg retrying as we got an unsolicited response.
    380                  
    381                  // Build a zcl error response.
    382                  int8u zclErrMsg[3];
    383                  int8u zclErrMsgLen = 3;
    384                  zclErrMsg[0] = ZCL_PLC_ERROR_TYPE_ID;  
   \                     ??CrossCallReturnLabel_2: (+1)
   \   0000002C   0x.... 0x....      BL       ?Subroutine7
    385                  zclErrMsg[1] = ZCL_PLC_UNSOLICITED_RSP_ERROR; 
    386                  zclErrMsg[2] = 0;   // the cmd Id that gave the error rsp (n/a since we got an unsolicited response).
    387                          
    388                  // Send error msg to coo using zcl transparent msp command. 
    389                  emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(zclErrMsg, zclErrMsgLen);            
   \                     ??CrossCallReturnLabel_19: (+1)
   \   00000030   0x2103             MOVS     R1,#+3
   \   00000032   0x2007             MOVS     R0,#+7
   \   00000034   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   0000003E                      REQUIRE ?Subroutine2
   \   0000003E                      ;; // Fall through to label ?Subroutine2
    390              }
    391          }
    392          

   \                                 In section .text, align 2, keep-with-next
    393          void emberAfPluginAuroraHostHalProcessStatusResponse(int8u *data, int8u size)
    394          {
    395              if (size >= 10) 
   \                     emberAfPluginAuroraHostHalProcessStatusResponse: (+1)
   \   00000000   0x290A             CMP      R1,#+10
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0xBFAC             ITE      GE 
   \   00000006   0x.... 0x....      ADRGE.W  R1,?_22
   \   0000000A   0x.... 0x....      ADRLT.W  R1,?_23
    396              {
    397                  emberAfDebugPrintln("Status Response: 0x%x bytes", size);                       
    398              } 
    399              else 
    400              {
    401                  emberAfDebugPrintln("Status Response error: 0x%x bytes", size);                       
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x.... 0x....      B.W      emberAfPrintln
    402              }
    403          }
    404          

   \                                 In section .text, align 2, keep-with-next
    405          void emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler(void)
    406          {
   \                     emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    407              emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop();
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop
    408          
    409              // Clear the PLC receive buffer.
    410              emberAfPluginAuroraHostHalPlcClearReceivedData();
   \   00000006   0x.... 0x....      BL       clearReceiveBuffer
    411              
    412              emberAfDebugPrintln("PLC response TO"); 
   \   0000000A   0x.... 0x....      ADR.W    R1,?_24
   \   0000000E   0x.... 0x....      BL       ?Subroutine5
    413                  
    414              // Check if we should resend last plc cmd.
    415              if (plcCmdLength > 0)
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000012   0x....             LDR.N    R0,??DataTable36_2
   \   00000014   0x7841             LDRB     R1,[R0, #+1]
   \   00000016   0xB1B9             CBZ.N    R1,??CrossCallReturnLabel_24
    416              {            
    417                  ++plcNumCmdRetries;
   \   00000018   0x7881             LDRB     R1,[R0, #+2]
   \   0000001A   0x1C49             ADDS     R1,R1,#+1
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    418                  if (plcNumCmdRetries < MAX_NUM_PLC_CMD_RETRIES)
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0x2903             CMP      R1,#+3
   \   00000022   0xDA04             BGE.N    ??emberAfPluginAuroraHostProtocolPlcTimeoutEven_0
    419                  {
    420                      // Send retry cmd to host.
    421                      emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 10); // Send retry in 10mS.
   \   00000024   0x210A             MOVS     R1,#+10
   \   00000026   0x1D00             ADDS     R0,R0,#+4
   \   00000028   0x.... 0x....      BL       emEventControlSetDelayMS
   \   0000002C   0xBD01             POP      {R0,PC}
    422                  }
    423                  else
    424                  {
    425                      plcCmdLength = 0;  // Allows next plc cmd.
   \                     ??emberAfPluginAuroraHostProtocolPlcTimeoutEven_0: (+1)
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x7041             STRB     R1,[R0, #+1]
    426                      
    427                      // Report CMD ACK TO ERROR to Gateway.
    428                      
    429                      // Build a zcl error response.
    430                      int8u zclErrMsg[3];
    431                      int8u zclErrMsgLen = 3;
    432                      zclErrMsg[0] = ZCL_PLC_ERROR_TYPE_ID;  
   \   00000032   0x.... 0x....      BL       ?Subroutine7
    433                      zclErrMsg[1] = ZCL_PLC_RSP_TIMEOUT_ERROR;
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000036   0x2105             MOVS     R1,#+5
   \   00000038   0x.... 0x....      BL       ?Subroutine3
    434                      zclErrMsg[2] = plcCmdBuffer[1];   // the cmd Id that timed-out.
    435                                  
    436                      // Were we expecting a tunnel response?
    437                      if (plcCmdBuffer[2] == AURORA_CMD_TYPE_EP2)
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000003C   0xD102             BNE.N    ??emberAfPluginAuroraHostProtocolPlcTimeoutEven_1
    438                      {
    439                          // Send error msg to coo over tunnel. 
    440                          emberAfPluginAuroraHostProcessTunnelResponseCallback(zclErrMsg, zclErrMsgLen);
   \   0000003E   0x.... 0x....      BL       ?Subroutine6
    441                      }
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000042   0xBD01             POP      {R0,PC}
    442                      else
    443                      {
    444                          // Send error msg to coo using zcl transparent msp command. 
    445                          emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(zclErrMsg, zclErrMsgLen);
   \                     ??emberAfPluginAuroraHostProtocolPlcTimeoutEven_1: (+1)
   \   00000044   0x.... 0x....      BL       ?Subroutine8
    446                      }
    447                  }
    448              }
    449          }
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000048   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0xA800             ADD      R0,SP,#+0
   \   00000002   0x7041             STRB     R1,[R0, #+1]
   \   00000004   0x....             LDR.N    R1,??DataTable36_3
   \   00000006   0x784A             LDRB     R2,[R1, #+1]
   \   00000008   0x7082             STRB     R2,[R0, #+2]
   \   0000000A   0x7888             LDRB     R0,[R1, #+2]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0x4770             BX       LR
    450          

   \                                 In section .text, align 2, keep-with-next
    451          static void plcBufferCommand(int8u *data)
    452          {
   \                     plcBufferCommand: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    453              if (plcCmdLength > 0)
   \   00000002   0x....             LDR.N    R5,??DataTable36_2
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x7868             LDRB     R0,[R5, #+1]
   \   00000008   0xB9A0             CBNZ.N   R0,??plcBufferCommand_0
    454              {
    455                  return;  // There's already a command waiting to be sent.
    456              }
    457              
    458              plcNumCmdRetries = 0;
   \   0000000A   0x70A8             STRB     R0,[R5, #+2]
    459              
    460              memcpy(plcCmdBuffer, data, data[1] + 1);
   \   0000000C   0x4621             MOV      R1,R4
   \   0000000E   0x7860             LDRB     R0,[R4, #+1]
   \   00000010   0x....             LDR.N    R6,??DataTable36_3
   \   00000012   0x1C42             ADDS     R2,R0,#+1
   \   00000014   0x4630             MOV      R0,R6
   \   00000016   0x.... 0x....      BL       __aeabi_memcpy
    461              plcCmdLength = data[1] + 2;
   \   0000001A   0x7860             LDRB     R0,[R4, #+1]
   \   0000001C   0x1C84             ADDS     R4,R0,#+2
   \   0000001E   0x706C             STRB     R4,[R5, #+1]
    462          
    463              plcCmdBuffer[plcCmdLength-1] = plcCalculateCrc(plcCmdBuffer);
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       plcCalculateCrc
   \   00000026   0xB2E4             UXTB     R4,R4
   \   00000028   0x19A1             ADDS     R1,R4,R6
   \   0000002A   0xF801 0x0C01      STRB     R0,[R1, #-1]
    464              plcSendCommand();
   \   0000002E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000032   0x....             B.N      plcSendCommand
   \                     ??plcBufferCommand_0: (+1)
   \   00000034   0xBD70             POP      {R4-R6,PC}       ;; return
    465          }
    466          

   \                                 In section .text, align 2, keep-with-next
    467          static int8u plcCalculateCrc(int8u *command)
    468          {
   \                     plcCalculateCrc: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    469              int8u index;
    470              int8u crc = 0;
   \   00000002   0x2100             MOVS     R1,#+0
    471              
    472              for (index = 0; index < command[1] + 1; index++) 
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE002             B.N      ??plcCalculateCrc_0
    473              {
    474                  crc ^= command[index];
   \                     ??plcCalculateCrc_1: (+1)
   \   00000008   0x5C13             LDRB     R3,[R2, R0]
   \   0000000A   0x4059             EORS     R1,R3,R1
    475              }
   \   0000000C   0x1C52             ADDS     R2,R2,#+1
   \                     ??plcCalculateCrc_0: (+1)
   \   0000000E   0x7844             LDRB     R4,[R0, #+1]
   \   00000010   0xB2D2             UXTB     R2,R2
   \   00000012   0x1C64             ADDS     R4,R4,#+1
   \   00000014   0x42A2             CMP      R2,R4
   \   00000016   0xDBF7             BLT.N    ??plcCalculateCrc_1
    476              
    477              return crc;
   \   00000018   0xB2C8             UXTB     R0,R1
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
    478          }
    479          

   \                                 In section .text, align 2, keep-with-next
    480          static void plcSendCommand(void)
    481          {
   \                     plcSendCommand: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    482              if (!plcEnableSend)
   \   00000002   0x....             LDR.N    R4,??DataTable36_2
   \   00000004   0x78E0             LDRB     R0,[R4, #+3]
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0xB1D0             CBZ.N    R0,??CrossCallReturnLabel_23
    483              {
    484                  return;
    485              }
    486              
    487              // Check if Host uart is ready to receive data from module.   
    488              boolean plcUartReady = (HOST_UART_READY_IN & BIT(HOST_UART_READY));  
   \   0000000A   0x....             LDR.N    R0,??DataTable36_4  ;; 0x4000b408
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
    489                  
    490              if (plcUartReady) 
    491              {
    492                  emberAfDebugPrintln("PLC plc cmd, retry=%d", plcNumCmdRetries);
    493                  
    494                  emberAfPluginAuroraHostHalPlcSendCommand(plcCmdBuffer, plcCmdLength);
    495                  emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart(TRUE, 2000);  // Set plc serial response (ack) TO = 2S.
    496              }
    497              else
    498              {
    499                  plcEnableSend = FALSE;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x70E0             STRB     R0,[R4, #+3]
    500                  emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, 250);  // Try to send the command again in 250mS.
   \   00000012   0x21FA             MOVS     R1,#+250
   \   00000014   0x1D20             ADDS     R0,R4,#+4
   \   00000016   0x.... 0x....      BL       emEventControlSetDelayMS
    501                  
    502                  ++plcCountUartNotReady;        
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x7020             STRB     R0,[R4, #+0]
    503                  if (plcCountUartNotReady >= UART_NOT_READY_NOTIFY_LIMIT)
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x2820             CMP      R0,#+32
   \   00000024   0xDB0C             BLT.N    ??CrossCallReturnLabel_23
    504                  {
    505                      plcCountUartNotReady = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x7020             STRB     R0,[R4, #+0]
    506                      
    507                      // Report PLC Uart Timeout to Gateway.
    508                      
    509                      // Build a zcl error response.
    510                      int8u zclErrMsg[3];
    511                      int8u zclErrMsgLen = 3;
    512                      zclErrMsg[0] = ZCL_PLC_ERROR_TYPE_ID;  
    513                      zclErrMsg[1] = ZCL_PLC_UART_READY_TIMEOUT_ERROR;
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000030   0x.... 0x....      BL       ?Subroutine3
    514                      zclErrMsg[2] = plcCmdBuffer[1];   // the cmd Id that timed-out.
    515                                  
    516                      // Were we expecting a tunnel response?
    517                      if (plcCmdBuffer[2] == AURORA_CMD_TYPE_EP2)
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000034   0xD102             BNE.N    ??plcSendCommand_0
    518                      {
    519                          // Send error msg to coo over tunnel. 
    520                          emberAfPluginAuroraHostProcessTunnelResponseCallback(zclErrMsg, zclErrMsgLen);
   \   00000036   0x.... 0x....      BL       ?Subroutine6
    521                      }
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000003A   0xBD13             POP      {R0,R1,R4,PC}
    522                      else
    523                      {
    524                          // Send error msg to coo using zcl transparent msp command. 
    525                          emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(zclErrMsg, zclErrMsgLen);
   \                     ??plcSendCommand_0: (+1)
   \   0000003C   0x.... 0x....      BL       ?Subroutine8
    526                      }            
    527                  }                       
    528              }    
    529          }
   \                     ??CrossCallReturnLabel_23: (+1)
   \   00000040   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    530          

   \                                 In section .text, align 2, keep-with-next
    531          void emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler(void)
    532          {
    533              emberEventControlSetInactive(emberAfPluginAuroraHostProtocolInterCommandDelayEventControl);
   \                     emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable36_2
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7101             STRB     R1,[R0, #+4]
    534              
    535              plcEnableSend = TRUE;
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x70C1             STRB     R1,[R0, #+3]
    536              
    537              if (plcCmdLength > 0) 
   \   0000000A   0x7840             LDRB     R0,[R0, #+1]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xBF18             IT       NE 
    538              {
    539                  plcSendCommand();  // Send any pending plc cmd.
   \   00000010   0x.... 0x....      BNE.W    plcSendCommand
    540              }
    541          }
   \   00000014   0x4770             BX       LR               ;; return
    542          

   \                                 In section .text, align 2, keep-with-next
    543          void emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart(boolean restart, int16u toMs)
    544          {
    545              if ((restart) || (!plcSerialTimeOutActive))
   \                     emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart: (+1)
   \   00000000   0x....             LDR.N    R2,??DataTable36_5
   \   00000002   0xB908             CBNZ.N   R0,??emberAfPluginAuroraHostProtocolPlcSerialRxTim_0
   \   00000004   0x7810             LDRB     R0,[R2, #+0]
   \   00000006   0xB920             CBNZ.N   R0,??emberAfPluginAuroraHostProtocolPlcSerialRxTim_1
    546              { 
    547                  plcSerialTimeOutActive = TRUE;
   \                     ??emberAfPluginAuroraHostProtocolPlcSerialRxTim_0: (+1)
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x7010             STRB     R0,[R2, #+0]
    548                  
    549                  // Start a timeout given value (mS).
    550                  emberEventControlSetDelayMS(emberAfPluginAuroraHostProtocolPlcTimeoutEventControl, toMs);          
   \   0000000C   0x1D10             ADDS     R0,R2,#+4
   \   0000000E   0x.... 0x....      B.W      emEventControlSetDelayMS
    551              }            
    552          }
   \                     ??emberAfPluginAuroraHostProtocolPlcSerialRxTim_1: (+1)
   \   00000012   0x4770             BX       LR               ;; return
    553          

   \                                 In section .text, align 2, keep-with-next
    554          void emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop(void)
    555          {
    556              plcSerialTimeOutActive = FALSE;
   \                     emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable36_5
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
    557              
    558              emberEventControlSetInactive(emberAfPluginAuroraHostProtocolPlcTimeoutEventControl);
   \   00000006   0x7101             STRB     R1,[R0, #+4]
    559          }
   \   00000008   0x4770             BX       LR               ;; return
    560          

   \                                 In section .text, align 2, keep-with-next
    561          void emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg(int8u* payload, int8u payloadLen)
    562          {
   \                     emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB0A7             SUB      SP,SP,#+156
   \   00000004   0x4604             MOV      R4,R0
    563              int8u externalBuffer[EXTERNAL_BUFFER_LENGTH];
    564              int16u lenPtr;
    565              EmberApsFrame apsFrame;
    566              EmberStatus status;
    567          
    568              apsFrame.profileId = HA_PROFILE_ID;         
   \   00000006   0xF44F 0x7082      MOV      R0,#+260
   \   0000000A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   0000000E   0x460D             MOV      R5,R1
    569              apsFrame.sourceEndpoint = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0014      STRB     R0,[SP, #+20]
    570              apsFrame.destinationEndpoint = 1;
   \   00000016   0xF88D 0x0015      STRB     R0,[SP, #+21]
    571              apsFrame.options = EMBER_AF_DEFAULT_APS_OPTIONS | EMBER_APS_OPTION_RETRY;     
   \   0000001A   0xF44F 0x5082      MOV      R0,#+4160
   \   0000001E   0xF8AD 0x0016      STRH     R0,[SP, #+22]
    572              apsFrame.sequence = emberAfNextSequence();
   \   00000022   0x.... 0x....      BL       emberAfNextSequence
   \   00000026   0xF88D 0x001A      STRB     R0,[SP, #+26]
    573              
    574              emberAfSetExternalBuffer(externalBuffer, EXTERNAL_BUFFER_LENGTH, &lenPtr, &apsFrame);  
   \   0000002A   0xAB04             ADD      R3,SP,#+16
   \   0000002C   0xAA03             ADD      R2,SP,#+12
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0xA807             ADD      R0,SP,#+28
   \   00000032   0x.... 0x....      BL       emberAfSetExternalBuffer
    575              emberAfFillCommandBasicClusterSendTransparentCommandResponse(payload, (int16u)payloadLen);      
   \   00000036   0x....             ADR.N    R0,??DataTable36  ;; "b"
   \   00000038   0x9000             STR      R0,[SP, #+0]
   \   0000003A   0x9502             STR      R5,[SP, #+8]
   \   0000003C   0x9401             STR      R4,[SP, #+4]
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0xF241 0x0210      MOVW     R2,#+4112
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x200D             MOVS     R0,#+13
   \   00000048   0x.... 0x....      BL       emberAfFillExternalManufacturerSpecificBuffer
    576              
    577              status = emberAfSendCommandUnicastToBindings();    
    578              if (status != EMBER_SUCCESS)
   \   0000004C   0x.... 0x....      BL       emberAfSendCommandUnicastToBindings
   \   00000050   0xB118             CBZ.N    R0,??emberAfPluginAuroraHostProtocolSendZclTranspa_0
    579              {
    580                   // Could not send via bindings so send unicast to hard coded dest=0000 (ep=01)          
    581                  emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, 0x0000);  
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      BL       emberAfSendCommandUnicast
    582              }                              
    583          }
   \                     ??emberAfPluginAuroraHostProtocolSendZclTranspa_0: (+1)
   \   0000005A   0xB027             ADD      SP,SP,#+156
   \   0000005C   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   0x62 0x00          DC8      "b",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \   00000000   0x........         DC32     plcRspBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \   00000000   0x........         DC32     plcCountUartNotReady

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_3:
   \   00000000   0x........         DC32     plcCmdBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_4:
   \   00000000   0x4000B408         DC32     0x4000b408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_5:
   \   00000000   0x........         DC32     plcSerialTimeOutActive

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_25:
   \   00000000   0x62 0x00          DC8 "b"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0xAA 0x00          DC8 170, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000016   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x54 0x75          DC8 "Tunnel command %d\015\012"
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 16, 0, 0, 0, 0
   \              0x00 0x10    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 17, 0, 0, 0, 0
   \              0x00 0x11    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 32, 0, 0, 0, 0
   \              0x00 0x20    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x21    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 34, 0, 0, 0, 0
   \              0x00 0x22    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0xAA 0x00          DC8 170, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x4D 0x73          DC8 "Msg decoded - handle %d truncated data bytes"
   \              0x67 0x20    
   \              0x64 0x65    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x2D 0x20    
   \              0x68 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x74 0x72    
   \              0x75 0x6E    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x4D 0x73          DC8 "Msg decoded - No truncated data"
   \              0x67 0x20    
   \              0x64 0x65    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x64 0x20    
   \              0x2D 0x20    
   \              0x4E 0x6F    
   \              0x20 0x74    
   \              0x72 0x75    
   \              0x6E 0x63    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x70 0x6C          DC8 "plc resp CRC error 0x%x 0x%x %d"
   \              0x63 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x20 0x43    
   \              0x52 0x43    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x44 0x61          DC8 "Data Ack: OK"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x3A 0x20    
   \              0x4F 0x4B    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x44 0x61          DC8 "Data Ack: %s"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x43 0x52          DC8 "CRC Error"
   \              0x43 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x55 0x6E          DC8 "Unknown Error"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x44 0x61          DC8 "Data Ack: Busy"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x3A 0x20    
   \              0x42 0x75    
   \              0x73 0x79    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x44 0x61          DC8 "Data Ack: Startup Not Complete"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x3A 0x20    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x75    
   \              0x70 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6D 0x70    
   \              0x6C 0x65    
   \              0x74 0x65    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x44 0x61          DC8 "Data Ack: Invalid"
   \              0x74 0x61    
   \              0x20 0x41    
   \              0x63 0x6B    
   \              0x3A 0x20    
   \              0x49 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x54 0x75          DC8 "Tunnel Response OK: 0x%x bytes"
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x4F 0x4B    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x54 0x75          DC8 "Tunnel Response error: 0x%x bytes"
   \              0x6E 0x6E    
   \              0x65 0x6C    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x55 0x6E          DC8 "Unsolicited Response OK: 0x%x bytes"
   \              0x73 0x6F    
   \              0x6C 0x69    
   \              0x63 0x69    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x52 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x20 0x4F    
   \              0x4B 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x55 0x6E          DC8 "Unsolicited Response error: 0x%x bytes"
   \              0x73 0x6F    
   \              0x6C 0x69    
   \              0x63 0x69    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x52 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x20 0x62    
   \              0x79 0x74    
   \              0x65 0x73    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x53 0x74          DC8 "Status Response: 0x%x bytes"
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x53 0x74          DC8 "Status Response error: 0x%x bytes"
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x50 0x4C          DC8 "PLC response TO"
   \              0x43 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x20 0x54    
   \              0x4F 0x00    
    584                      
    585          
    586          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfPluginAuroraHostHalPlcCheckHost
         8   -> emberAfPluginAuroraHostHalPlcHandleReceivedData
         8   -> emberAfPluginAuroraHostHalPlcReadBytes
         8   -> emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart
         8   -> peekReadBuffer
         8   -> receiveReadBuffer
       0   emberAfPluginAuroraHostHalPlcClearReceivedData
         0   -> clearReceiveBuffer
       0   emberAfPluginAuroraHostHalPlcDecodeResponse
      24   emberAfPluginAuroraHostHalPlcHandleReceivedData
        24   -> clearReceiveBuffer
        24   -> copyToReceiveBuffer
        24   -> debugBuffer
        24   -> emberAfPluginAuroraHostHalPlcDecodeResponse
        24   -> emberAfPrintln
        24   -> plcCalculateCrc
        24   -> setReceiveBufferIndexValues
      16   emberAfPluginAuroraHostHalProcessDataAck
        16   -> emEventControlSetDelayMS
        16   -> emberAfPluginAuroraHostProcessTunnelResponseCallback
        16   -> emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
        16   -> emberAfPrintln
       0   emberAfPluginAuroraHostHalProcessStatusResponse
         0   -> emberAfPrintln
      24   emberAfPluginAuroraHostHalProcessTunnelResponse
        24   -> emEventControlSetDelayMS
        24   -> emberAfPluginAuroraHostProcessTunnelResponseCallback
        24   -> emberAfPrintln
      16   emberAfPluginAuroraHostHalProcessUnsolicitedResponse
        16   -> emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
        16   -> emberAfPrintln
       0   emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler
         0   -> plcSendCommand
       0   emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart
       0   emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop
       8   emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler
         8   -> clearReceiveBuffer
         8   -> emEventControlSetDelayMS
         8   -> emberAfPluginAuroraHostProcessTunnelResponseCallback
         8   -> emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop
         8   -> emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
         8   -> emberAfPrintln
     168   emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
       168   -> emberAfFillExternalManufacturerSpecificBuffer
       168   -> emberAfNextSequence
       168   -> emberAfSendCommandUnicast
       168   -> emberAfSendCommandUnicastToBindings
       168   -> emberAfSetExternalBuffer
      16   plcBufferCommand
        16   -> __aeabi_memcpy
        16   -> plcCalculateCrc
       8   plcCalculateCrc
      16   plcSendCommand
        16   -> emEventControlSetDelayMS
        16   -> emberAfPluginAuroraHostProcessTunnelResponseCallback
        16   -> emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
       4   plcSendOffCommand
        16   -> plcBufferCommand
       4   plcSendOnCommand
        16   -> plcBufferCommand
      16   plcSendSetCctCommand
        16   -> plcBufferCommand
      32   plcSendSetColorCommand
        32   -> plcBufferCommand
      16   plcSendSetPowerLevelCommand
        16   -> plcBufferCommand
       4   plcSendStatusRequestCommand
        16   -> plcBufferCommand
      80   plcSendTunnelCommand
        80   -> __aeabi_memcpy
        80   -> __aeabi_memcpy4
        80   -> emberAfPrint
        80   -> plcBufferCommand


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable36
       4  ??DataTable36_1
       4  ??DataTable36_2
       4  ??DataTable36_3
       4  ??DataTable36_4
       4  ??DataTable36_5
      22  ?Subroutine0
      24  ?Subroutine1
       6  ?Subroutine2
      16  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
       8  ?Subroutine6
       8  ?Subroutine7
       6  ?Subroutine8
      64  ?_0
      20  ?_1
      32  ?_10
      16  ?_11
      16  ?_12
      12  ?_13
      16  ?_14
      16  ?_15
      32  ?_16
      20  ?_17
      32  ?_18
      36  ?_19
       8  ?_2
      36  ?_20
      40  ?_21
      28  ?_22
      36  ?_23
      16  ?_24
       2  ?_25
       8  ?_3
       8  ?_4
      12  ?_5
       8  ?_6
       8  ?_7
      48  ?_8
      32  ?_9
      90  emberAfPluginAuroraHostHalPlcCheckHost
       4  emberAfPluginAuroraHostHalPlcClearReceivedData
      26  emberAfPluginAuroraHostHalPlcDecodeResponse
     112  emberAfPluginAuroraHostHalPlcHandleReceivedData
     164  emberAfPluginAuroraHostHalProcessDataAck
      20  emberAfPluginAuroraHostHalProcessStatusResponse
     106  emberAfPluginAuroraHostHalProcessTunnelResponse
      62  emberAfPluginAuroraHostHalProcessUnsolicitedResponse
      22  emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler
      20  emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStart
      10  emberAfPluginAuroraHostProtocolPlcSerialRxTimeoutStop
      74  emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler
      94  emberAfPluginAuroraHostProtocolSendZclTransparentResponseErrorMsg
      54  plcBufferCommand
      28  plcCalculateCrc
      64  plcCmdBuffer
      12  plcCountUartNotReady
          plcCmdLength
          plcNumCmdRetries
          plcEnableSend
          emberAfPluginAuroraHostProtocolInterCommandDelayEventControl
      65  plcRspBuffer
          plcRspLength
      66  plcSendCommand
       6  plcSendOffCommand
       8  plcSendOnCommand
       6  plcSendSetCctCommand
      46  plcSendSetColorCommand
       8  plcSendSetPowerLevelCommand
       8  plcSendStatusRequestCommand
      60  plcSendTunnelCommand
      12  plcSerialTimeOutActive
          emberAfPluginAuroraHostProtocolPlcTimeoutEventControl

 
   141 bytes in section .bss
    12 bytes in section .data
     2 bytes in section .rodata
 1 820 bytes in section .text
 
 1 820 bytes of CODE  memory
     2 bytes of CONST memory
   153 bytes of DATA  memory

Errors: none
Warnings: none
