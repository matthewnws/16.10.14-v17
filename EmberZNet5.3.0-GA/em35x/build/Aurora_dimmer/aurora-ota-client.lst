###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-ota-client.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-ota-client.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-ota-client.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-ota-client\aurora-ota-client.c
      1          // *****************************************************************************
      2          // * ota-client.c
      3          // *
      4          // * Zigbee Over-the-air bootload cluster for upgrading firmware and 
      5          // * downloading device specific file.
      6          // * 
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "callback.h"
     12          #include "app/framework/util/util.h"
     13          #include "app/framework/util/common.h"
     14          #include "app/framework/plugin/ota-common/ota.h"
     15          
     16          #include "app/framework/util/af-main.h"
     17          
     18          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     19          #include "app/framework/plugin/aurora-ota-client/aurora-ota-client.h"
     20          #include "app/framework/plugin/aurora-ota-client-policy/aurora-ota-client-policy.h"
     21          #include "aurora-ota-client-signature-verify.h"
     22          #include "aurora-ota-client-page-request.h"
     23          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     24          
     25          #if defined(EZSP_HOST)
     26            // For emberIeeeAddressRequest()
     27            #include "app/util/zigbee-framework/zigbee-device-host.h"
     28          #else
     29            #include "stack/include/ember.h"
     30          #endif
     31          
     32          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_SET_IMAGE_STAMP) \
     33              && !defined(EZSP_HOST) \
     34              && defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_STAMP_ATTRIBUTE) \
     35              && !defined(XAP2B)
     36              
     37              #define USE_IMAGE_STAMP
     38              #include "hal/micro/cortexm3/memmap.h"
     39              #include "hal/micro/cortexm3/memmap-tables.h"
     40          #endif
     41          
     42          extern boolean isEepromAvailable(void);  
     43          
     44          //------------------------------------------------------------------------------
     45          // Globals
     46          
     47          enum BootloadState
     48          {
     49            BOOTLOAD_STATE_NONE,
     50            BOOTLOAD_STATE_DELAY,
     51            BOOTLOAD_STATE_DISCOVER_SERVER,
     52            BOOTLOAD_STATE_GET_SERVER_EUI,
     53            BOOTLOAD_STATE_OBTAIN_LINK_KEY,
     54            BOOTLOAD_STATE_QUERY_NEXT_IMAGE,
     55            BOOTLOAD_STATE_DOWNLOAD,
     56            BOOTLOAD_STATE_VERIFY_IMAGE,
     57            BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE,
     58            BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE,
     59          };
     60          typedef int8u BootloadState;
     61          
     62          static PGM_P bootloadStateNames[] = {
     63            "None",
     64            "Random Delay before start",
     65            "Discovering OTA Server",
     66            "Get OTA Server EUI",
     67            "Obtain link key",
     68            "Querying Next Image",
     69            "Downloading Image",
     70            "Verifying Image",
     71            "Waiting for Upgrade message",
     72            "Countdown to Upgrade",
     73          };
     74          
     75          // This relates the bootload state above to the status that is externally
     76          // reported via the attribute.

   \                                 In section .text, align 4, keep-with-next
     77          static PGM int8u bootloadStateToExternalState[] = {
   \                     bootloadStateToExternalState:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x00 0x00    
     78            OTA_UPGRADE_STATUS_NORMAL,
     79            OTA_UPGRADE_STATUS_NORMAL,
     80            OTA_UPGRADE_STATUS_NORMAL,
     81            OTA_UPGRADE_STATUS_NORMAL,
     82            OTA_UPGRADE_STATUS_NORMAL,
     83            OTA_UPGRADE_STATUS_NORMAL,
     84            OTA_UPGRADE_STATUS_DOWNLOAD_IN_PROGRESS,
     85            OTA_UPGRADE_STATUS_DOWNLOAD_COMPLETE,
     86            OTA_UPGRADE_STATUS_WAIT,
     87            OTA_UPGRADE_STATUS_COUNTDOWN
     88          };
     89          
     90          #define UNDEFINED_ENDPOINT 0xFF
     91          
     92          static BootloadState currentBootloadState = BOOTLOAD_STATE_NONE;
     93          
     94          static int8u myEndpoint = UNDEFINED_ENDPOINT;
     95          static int8u serverEndpoint = UNDEFINED_ENDPOINT;
     96          static EmberNodeId serverNodeId = EMBER_UNKNOWN_NODE_ID;
     97          static int8u errors = 0;
     98          static int32u totalImageSize = 0;
     99          static EmberAfOtaImageId currentDownloadFile;
    100          static int16u hardwareVersion;
    101          
    102          #define WAIT_FOR_UPGRADE_MESSAGE 0xFFFFFFFF
    103          
    104          #define ZCL_COMMAND_ID_INDEX 2
    105          
    106          #define IMAGE_NOTIFY_NO_PAYLOAD              0
    107          #define IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE  1
    108          #define IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE      2
    109          #define IMAGE_NOTIFY_FULL_VERSION_TYPE       3
    110          #define IMAGE_NOTIFY_LAST_VALID_TYPE         IMAGE_NOTIFY_FULL_VERSION_TYPE       
    111          
    112          
    113          
    114          // These lengths correspond to the #defines above.

   \                                 In section .text, align 4, keep-with-next
    115          static PGM int8u imageNotifyPayloadLengths[] = {
   \                     imageNotifyPayloadLengths:
   \   00000000   0x05 0x07          DC8 5, 7, 9, 13
   \              0x09 0x0D    

   \                                 In section .data, align 4
   \                     currentBootloadState:
   \   00000000   0x00               DC8 0
   \   00000001   0xFF               DC8 255
   \   00000002   0xFF               DC8 255
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00               DC8 0
   \   00000007   0x00               DC8 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0xFFFD             DC16 65533
   \   0000001A   0x00 0x00          DC8 0, 0
   \   0000001C   0x00 0x00          DC8 0, 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \   00000020   0x........         DC32 ?_0, ?_1, ?_2, ?_3, ?_4, ?_5, ?_6, ?_7, ?_8, ?_9
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x........   
   \   00000048   0x00000000         DC32 0
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    116            (EMBER_AF_ZCL_OVERHEAD + 2),  // Payload and Jitter only.
    117            (EMBER_AF_ZCL_OVERHEAD + 4),  // and MFG ID
    118            (EMBER_AF_ZCL_OVERHEAD + 6),  // and Image Type ID
    119            (EMBER_AF_ZCL_OVERHEAD + 10), // and Version
    120          };
    121          
    122          // Values per the spec.
    123          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH      (EMBER_AF_ZCL_OVERHEAD + 14)
    124          #define UPGRADE_END_RESPONSE_MIN_LENGTH              (EMBER_AF_ZCL_OVERHEAD + 16)
    125          #define QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH (EMBER_AF_ZCL_OVERHEAD + 13)
    126          
    127          static boolean waitingForResponse = FALSE;
    128          static int32u nextEventTimer;
    129          
    130          #define WAITING_FOR_MESSAGE      TRUE
    131          #define NO_MESSAGE_RESPONSE_WAIT FALSE
    132          
    133          // Maximum amount of data that the client is willing to accept in one packet
    134          // The server can always give us less data (sizing the response based on its
    135          // send parameters, eg. source routing).  But it can't give us more.
    136          // Since no 
    137          #define MAX_CLIENT_DATA_SIZE      63   // in bytes
    138          
    139          // We only support the Zigbbe Pro stack version.
    140          #define STACK_VERSION ZIGBEE_PRO_STACK_VERSION
    141          
    142          // Handy defines to make the code more readable.
    143          #define TIMEOUT_REACHED  TRUE
    144          #define START_NEW_TIMER  FALSE
    145          
    146          // queryNextImage() defines
    147          typedef enum {
    148            DELAY_BEFORE_SEND_QUERY = 0,
    149            SEND_QUERY_NOW = 1,
    150          } SendNextQueryState;
    151          
    152          // This defines how long to wait for a message response before considering it
    153          // an error.  It also defines how long a sleepy stays awake waiting for
    154          // a message.
    155          #define MESSAGE_TIMEOUT_MS 3000L
    156          
    157          #define IMAGE_BLOCK_ABORT_LENGTH                   (EMBER_AF_ZCL_OVERHEAD + 1)
    158          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH    (EMBER_AF_ZCL_OVERHEAD + 14)
    159          
    160          // This is the length WITHOUT the Minimum Block Request Period
    161          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN  (EMBER_AF_ZCL_OVERHEAD + 8)
    162          
    163          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH \
    164            (IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN + 2)
    165          
    166          // Maximum wait time that the client would wait to retrive data or to be
    167          // upgraded. If the server is not ready for the operation, it should tell the
    168          // client to wait (again).  But the client would only wait up to the value 
    169          // defined below.  Regarding upgrading, current OTA spec recommends that the
    170          // client should query the server every 60 mins even though it is told to wait 
    171          // longer.
    172          #define TIMEOUT_MAX_WAIT_TIME_MS   (60 * MINUTES_IN_MS)
    173          
    174          // If the server sent us an invalid delay time for the an image block
    175          // download, this is how long we will delay before getting the
    176          // next block.
    177          #define CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS (5 * MINUTES_IN_MS)
    178          
    179          // If the server sent us an invalid delay time for the upgrade end response,
    180          // we use this value for the next request.
    181          #define CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS (1 * HOURS_IN_MS)
    182          
    183          // When the server asks us to wait indefinitely to apply an upgrade,
    184          // we will ask them again in this much time.
    185          #define WAIT_FOR_UPGRADE_DELAY_MS (1 * HOURS_IN_MS)
    186          
    187          // How often a print is done indicating client download progress.
    188          // e.g. "Download 5% complete"
    189          #define DOWNLOAD_PERCENTAGE_UPDATE_RATE 5
    190          
    191          #define MESSAGE_TIMEOUT_BACKOFF_MS (2 * SECONDS_IN_MS)
    192          
    193          // Even when we are told to upgrade immediately, we want to insure there
    194          // is a chance for the APS retries and ZCL response to get back to their 
    195          // senders.
    196          #define IMMEDIATE_UPGRADE_DELAY_MS (3 * SECONDS_IN_MS)
    197          
    198          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_USE_PAGE_REQUEST)
    199            #define USE_PAGE_REQUEST_DEFAULT TRUE
    200          #else
    201            #define USE_PAGE_REQUEST_DEFAULT FALSE
    202          #endif
    203          
    204          // HA 1.2 feature
    205          static int16u minBlockRequestPeriod;
    206          
    207          // This is not a CONST because even if the client supports page request,
    208          // the server may not.  So we will dynamically turn off sending page requests
    209          // when it is enabled and the server doesn't support it.
    210          static boolean usePageRequest = USE_PAGE_REQUEST_DEFAULT;
    211          
    212          typedef enum {
    213            NO_CUSTOM_VERIFY,
    214            NEW_CUSTOM_VERIFY,
    215            CUSTOM_VERIFY_IN_PROGRESS,
    216          } CustomVerifyStatus;
    217          static boolean customVerifyStatus = NO_CUSTOM_VERIFY;
    218          
    219          // TODO: need to gate this when we're better equipped to do so
    220          // with the generated CLI
    221          //#if defined(EMBER_TEST)
    222          // If set to 100, will not stop download.

   \                                 In section .data, align 1
    223          int8u emAfOtaClientStopDownloadPercentage = 100;
   \                     emAfOtaClientStopDownloadPercentage:
   \   00000000   0x64               DC8 100
    224          //#endif
    225          
    226          // The spec says pick a random number up to 5 minutes.  We limit
    227          // ourselves to 4.25 minutes to make it easier to mask out the upper
    228          // bits and limit the number retrieved from halCommonGetRandom()
    229          #define MAXIMUM_RANDOM_DELAY_SECONDS_MASK 0x00FF  
    230          
    231          //------------------------------------------------------------------------------
    232          // Forward Declarations
    233          
    234          static void recordUpgradeStatus(BootloadState state);
    235          static void putImageInfoInMessage(void);
    236          static void startServerDiscovery(void);
    237          static void euiLookupErrorOccurred(void);
    238          static void euiLookup(void);
    239          static void queryNextImage(SendNextQueryState nextQuery,
    240                                     boolean queryErrorOccurred);
    241          static void continueImageDownload(void);
    242          static void continueImageVerification(EmberAfImageVerifyStatus status);
    243          static void askServerToRunUpgrade(boolean timeout);
    244          static void runUpgrade(void);
    245          static int32u updateCurrentOffset(int32u currentOffset);
    246          static void updateDownloadFileVersion(int32u version);
    247          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result);
    248          static void determineNextState(void);
    249          static EmberAfStatus imageNotifyParse(boolean broadcast, 
    250                                                int8u* buffer, 
    251                                                int8u index, 
    252                                                int8u length);
    253          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
    254                                                           int8u index, 
    255                                                           int8u length);
    256          static EmberAfStatus imageBlockResponseParse(int8u* buffer, 
    257                                                       int8u index, 
    258                                                       int8u length);
    259          static EmberAfStatus upgradeEndResponseParse(int8u status,
    260                                                       int8u* buffer, 
    261                                                       int8u length);
    262          static boolean calculateTimer(int32u currentTime, 
    263                                        int32u targetTime, 
    264                                        int32u* returnTime);
    265          
    266          //------------------------------------------------------------------------------
    267          
    268          static void updateCurrentImageAttributes(EmberAfOtaImageId* imageId)
    269          {
    270          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MANUFACTURER_ID_ATTRIBUTE)
    271            emberAfWriteAttribute(myEndpoint,
    272                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    273                                  ZCL_MANUFACTURER_ID_ATTRIBUTE_ID,
    274                                  CLUSTER_MASK_CLIENT,
    275                                  (int8u*)&(imageId->manufacturerId),
    276                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    277          #endif
    278          
    279          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_TYPE_ID_ATTRIBUTE)
    280            emberAfWriteAttribute(myEndpoint,
    281                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    282                                  ZCL_IMAGE_TYPE_ID_ATTRIBUTE_ID,
    283                                  CLUSTER_MASK_CLIENT,
    284                                  (int8u*)&(imageId->imageTypeId),
    285                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    286          #endif
    287          
    288          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_FILE_VERSION_ATTRIBUTE)
    289            emberAfWriteAttribute(myEndpoint,
    290                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    291                                  ZCL_CURRENT_FILE_VERSION_ATTRIBUTE_ID,
    292                                  CLUSTER_MASK_CLIENT,
    293                                  (int8u*)&(imageId->firmwareVersion),
    294                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    295          #endif
    296          }
    297          
    298          static void updateMinBlockRequestPeriodAttribute(int16u value)
    299          {
    300            minBlockRequestPeriod = value;
    301          
    302          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
    303            {
    304              emberAfWriteAttribute(myEndpoint,
    305                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    306                                    ZCL_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE_ID, 
    307                                    CLUSTER_MASK_CLIENT,
    308                                    (int8u*)&minBlockRequestPeriod,
    309                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    310            }
    311          #endif
    312          }
    313          

   \                                 In section .text, align 2, keep-with-next
    314          void emberAfOtaBootloadClusterClientInitCallback(int8u endpoint)
    315          {
   \                     emberAfOtaBootloadClusterClientInitCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
    316              //GB - Initialise the OTA cluster only if the eeprom is available.
    317              if (!isEepromAvailable()) 
   \   00000006   0x.... 0x....      BL       isEepromAvailable
   \   0000000A   0xB958             CBNZ.N   R0,??emberAfOtaBootloadClusterClientInitCallback_0
    318              {
    319                  emberAfDebugPrintln("Not initialising OTA");
   \   0000000C   0x.... 0x....      ADR.W    R1,?_10
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       emberAfPrintln
    320                  emAfOtaClientStop();  // stop ota tick.
   \   00000016   0x.... 0x....      BL       emAfOtaClientStop
    321                  emberAfEndpointEnableDisable(3, FALSE);  // Disable the OTA ep.        
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x.... 0x....      BL       emberAfEndpointEnableDisable
    322                  return;
   \   00000022   0xE00D             B.N      ??emberAfOtaBootloadClusterClientInitCallback_1
    323              }    
    324              
    325            if (myEndpoint != UNDEFINED_ENDPOINT) {
   \                     ??emberAfOtaBootloadClusterClientInitCallback_0: (+1)
   \   00000024   0x.... 0x....      LDR.W    R5,??DataTable133
   \   00000028   0x7868             LDRB     R0,[R5, #+1]
   \   0000002A   0x28FF             CMP      R0,#+255
   \   0000002C   0xD108             BNE.N    ??emberAfOtaBootloadClusterClientInitCallback_1
    326              // We have already been initialized
    327              return;
    328            }
    329            myEndpoint = endpoint;
   \   0000002E   0x706C             STRB     R4,[R5, #+1]
    330          
    331            emberAfOtaStorageInitCallback();
   \   00000030   0x.... 0x....      BL       emberAfOtaStorageInitCallback
    332          
    333          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE)
    334            {
    335              int16u currentZigbeeStackVersion = ZIGBEE_PRO_STACK_VERSION;
    336              emberAfWriteAttribute(myEndpoint,
    337                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    338                                    ZCL_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE_ID, 
    339                                    CLUSTER_MASK_CLIENT,
    340                                    (int8u*)&currentZigbeeStackVersion,
    341                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    342            }
    343          #endif
    344          
    345            // Assume we can download as fast as we want until told otherwise by server.
    346            updateMinBlockRequestPeriodAttribute(0); // minBlockRequestPeriod.
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x83A8             STRH     R0,[R5, #+28]
    347          
    348          
    349          #if defined(USE_IMAGE_STAMP)
    350            {
    351              // Unfortunately the AAT data struct is declared const,
    352              // so we must copy out the image stamp to satisfy the compiler.
    353              int8u data[IMAGE_STAMP_SIZE];
    354              MEMCOPY(data, halAppAddressTable.imageStamp, IMAGE_STAMP_SIZE);
    355              emberAfWriteAttribute(myEndpoint,
    356                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    357                                    ZCL_IMAGE_STAMP_ATTRIBUTE_ID,
    358                                    CLUSTER_MASK_CLIENT,
    359                                    data,
    360                                    ZCL_INT32U_ATTRIBUTE_TYPE);
    361            }
    362          #endif
    363          
    364            {
    365              EmberAfOtaImageId id;
    366              int16u hwVer;    
    367              emberAfOtaClientVersionInfoCallback(&id, 
    368                                                  &hwVer);
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    369              updateCurrentImageAttributes(&id);
    370            }
    371          }
   \                     ??emberAfOtaBootloadClusterClientInitCallback_1: (+1)
   \   00000040   0xB005             ADD      SP,SP,#+20
   \   00000042   0xBD30             POP      {R4,R5,PC}       ;; return
    372          
    373          // Returns whether or not a timer has been set.  For timer = 0, will return FALSE

   \                                 In section .text, align 2, keep-with-next
    374          static boolean setTimer(int32u timeMs)
    375          {
   \                     setTimer: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    376            int32u timer;
    377          
    378            // When waiting for page request replies I want to use the timer that is defined
    379            // in App. Builder and passed through to here since I am expecting multiple
    380            // messages coming back from the server.
    381            if (waitingForResponse
    382                && emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable133
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x7920             LDRB     R0,[R4, #+4]
   \   0000000A   0xB138             CBZ.N    R0,??setTimer_0
   \   0000000C   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD003             BEQ.N    ??setTimer_0
    383              timer = MESSAGE_TIMEOUT_MS;
   \   00000014   0xF640 0x36B8      MOVW     R6,#+3000
    384              nextEventTimer = timeMs;
   \   00000018   0x64E5             STR      R5,[R4, #+76]
   \   0000001A   0xE003             B.N      ??setTimer_1
    385            } else {
    386              timer = timeMs;
    387              nextEventTimer = 0;
   \                     ??setTimer_0: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x462E             MOV      R6,R5
   \   00000020   0x64E0             STR      R0,[R4, #+76]
    388            }
    389          
    390            // A timer set at 0 means we are not counting down to some event.
    391            // We may still be in an active state of waiting, but are waiting
    392            // for an event to fire rather than a timer to expire.  For example, service
    393            // discovery will generate a callback when it is complete.  No need for
    394            // keeping track of time here as well.
    395            if (timer != 0) {
   \   00000022   0xB1A6             CBZ.N    R6,??setTimer_2
    396              //    otaPrintln("Setting timer: 0x%4X ms", timer);
    397              EmberAfEventPollControl pollControl = EMBER_AF_SHORT_POLL;
    398              EmberAfEventSleepControl sleepControl = EMBER_AF_OK_TO_SLEEP;
    399              if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \                     ??setTimer_1: (+1)
   \   00000024   0x7820             LDRB     R0,[R4, #+0]
   \   00000026   0x2501             MOVS     R5,#+1
   \   00000028   0x2700             MOVS     R7,#+0
   \   0000002A   0x2807             CMP      R0,#+7
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x2702             MOVEQ    R7,#+2
    400                sleepControl = EMBER_AF_STAY_AWAKE;
   \   00000030   0xD005             BEQ.N    ??setTimer_3
    401              } else if (!waitingForResponse
    402                         && (emAfGetCurrentPageRequestStatus() 
    403                             == EM_AF_NO_PAGE_REQUEST)) {
   \   00000032   0x7920             LDRB     R0,[R4, #+4]
   \   00000034   0xB918             CBNZ.N   R0,??setTimer_3
   \   00000036   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   0000003A   0xB900             CBNZ.N   R0,??setTimer_3
    404                pollControl = EMBER_AF_LONG_POLL;
   \   0000003C   0x2500             MOVS     R5,#+0
    405              }
    406              emberAfScheduleClientTickExtended(myEndpoint,
    407                                                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    408                                                timer,
    409                                                pollControl,
    410                                                sleepControl);
   \                     ??setTimer_3: (+1)
   \   0000003E   0x7860             LDRB     R0,[R4, #+1]
   \   00000040   0x9700             STR      R7,[SP, #+0]
   \   00000042   0x462B             MOV      R3,R5
   \   00000044   0x4632             MOV      R2,R6
   \   00000046   0x2119             MOVS     R1,#+25
   \   00000048   0x.... 0x....      BL       emberAfScheduleClientTickExtended
   \   0000004C   0x2001             MOVS     R0,#+1
   \                     ??setTimer_2: (+1)
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    411            }
    412            return (timer != 0);
    413          }
    414          

   \                                 In section .text, align 2, keep-with-next
    415          void emberAfPluginAuroraOtaClientStackStatusCallback(EmberStatus status)
    416          {
   \                     emberAfPluginAuroraOtaClientStackStatusCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    417            if (!isEepromAvailable()) 
   \   00000004   0x.... 0x....      BL       isEepromAvailable
   \   00000008   0xB1A8             CBZ.N    R0,??emberAfPluginAuroraOtaClientStackStatusCallba_0
    418            {
    419                return;  //GB ota not active if no external flash.
    420            }
    421            
    422          #if defined(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_AUTO_START)
    423            int16u randomDelaySeconds;
    424            if (status != EMBER_NETWORK_UP
    425                || currentBootloadState != BOOTLOAD_STATE_NONE) {
   \   0000000A   0x2C90             CMP      R4,#+144
   \   0000000C   0xBF02             ITTT     EQ 
   \   0000000E   0x.... 0x....      LDREQ.W  R0,??DataTable133
   \   00000012   0x7800             LDRBEQ   R0,[R0, #+0]
   \   00000014   0x2800             CMPEQ    R0,#+0
   \   00000016   0xD10E             BNE.N    ??emberAfPluginAuroraOtaClientStackStatusCallba_0
    426              return;
    427            }
    428            randomDelaySeconds = (halCommonGetRandom()
    429                                  & MAXIMUM_RANDOM_DELAY_SECONDS_MASK);
   \   00000018   0x.... 0x....      BL       halCommonGetRandom
   \   0000001C   0xB2C4             UXTB     R4,R0
    430            recordUpgradeStatus(BOOTLOAD_STATE_DELAY);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       recordUpgradeStatus
    431            otaPrintln("Delaying %d seconds before starting OTA client", randomDelaySeconds);
   \   00000024   0x4622             MOV      R2,R4
   \   00000026   0x.... 0x....      ADR.W    R1,?_11
   \   0000002A   0x.... 0x....      BL       ??Subroutine3_0
    432            setTimer(randomDelaySeconds << 10);  // multiply by 1024 to get approx ms.
   \                     ??CrossCallReturnLabel_44: (+1)
   \   0000002E   0x02A0             LSLS     R0,R4,#+10
   \   00000030   0xE8BD 0x4010      POP      {R4,LR}
   \   00000034   0x....             B.N      setTimer
   \                     ??emberAfPluginAuroraOtaClientStackStatusCallba_0: (+1)
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    433          #endif
    434          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x6A02             LDR      R2,[R0, #+32]
   \                     ??Subroutine3_0: (+1)
   \   00000002   0x2040             MOVS     R0,#+64
   \   00000004   0x.... 0x....      B.W      emberAfPrintln
    435          

   \                                 In section .text, align 4, keep-with-next
    436          static void otaClientTick(void)
    437          {    
   \                     otaClientTick: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    438            boolean errorOccurred = FALSE;
    439            // Getting here means either we timed out our last operation,
    440            // or we need to kick off a periodic event.
    441          
    442            emAfPageRequestTimerExpired();
   \   00000002   0x.... 0x....      BL       emAfPageRequestTimerExpired
    443             
    444            if (waitingForResponse) {
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable133
   \   0000000A   0x7928             LDRB     R0,[R5, #+4]
   \   0000000C   0x2400             MOVS     R4,#+0
   \   0000000E   0xB1A8             CBZ.N    R0,??otaClientTick_1
    445              otaPrintln("Timeout waiting for message.");
   \   00000010   0x.... 0x....      ADR.W    R1,?_12
   \   00000014   0x.... 0x....      BL       ?Subroutine2
    446              errorOccurred = TRUE;
    447              errors++;
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000018   0x78E8             LDRB     R0,[R5, #+3]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \   0000001C   0x70E8             STRB     R0,[R5, #+3]
   \   0000001E   0x2401             MOVS     R4,#+1
    448              waitingForResponse = FALSE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7128             STRB     R0,[R5, #+4]
    449                
    450              if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x2806             CMP      R0,#+6
   \   00000028   0xD108             BNE.N    ??otaClientTick_1
    451                // Especially important if the download delay is 0, we want
    452                // to backoff a little and make sure we don't continue to
    453                // blast the server with requests.
    454                setTimer((nextEventTimer > MESSAGE_TIMEOUT_BACKOFF_MS)
    455                         ? nextEventTimer
    456                         : MESSAGE_TIMEOUT_BACKOFF_MS);
   \   0000002A   0x6CE8             LDR      R0,[R5, #+76]
   \   0000002C   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000030   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   00000034   0xBF98             IT       LS 
   \   00000036   0xF44F 0x60FA      MOVLS    R0,#+2000
   \   0000003A   0x....             B.N      setTimer
    457                return;
    458              }
    459            }
    460          
    461            switch (currentBootloadState) {
   \                     ??otaClientTick_1: (+1)
   \   0000003C   0x7828             LDRB     R0,[R5, #+0]
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x2808             CMP      R0,#+8
   \   00000042   0xD825             BHI.N    ??otaClientTick_2
   \   00000044   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??otaClientTick_0:
   \   00000048   0x05 0x08          DC8      0x5,0x8,0xB,0x24
   \              0x0B 0x24    
   \   0000004C   0x0E 0x12          DC8      0xE,0x12,0x16,0x1B
   \              0x16 0x1B    
   \   00000050   0x20 0x00          DC8      0x20,0x0
    462            case BOOTLOAD_STATE_DELAY:
    463              emberAfOtaClientStartCallback();
   \                     ??otaClientTick_3: (+1)
   \   00000052   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000056   0x....             B.N      emberAfOtaClientStartCallback
    464              break;
    465            case BOOTLOAD_STATE_DISCOVER_SERVER:
    466              startServerDiscovery();
   \                     ??otaClientTick_4: (+1)
   \   00000058   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000005C   0x....             B.N      startServerDiscovery
    467              break;
    468            case BOOTLOAD_STATE_GET_SERVER_EUI:
    469              euiLookupErrorOccurred();
   \                     ??otaClientTick_5: (+1)
   \   0000005E   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000062   0x....             B.N      euiLookupErrorOccurred
    470              break;
    471            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    472              queryNextImage(SEND_QUERY_NOW, 
    473                             errorOccurred);
   \                     ??otaClientTick_6: (+1)
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000006A   0x....             B.N      ?Subroutine0
    474              break;
    475            case BOOTLOAD_STATE_DOWNLOAD:
    476              continueImageDownload();
   \                     ??otaClientTick_7: (+1)
   \   0000006C   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000070   0x.... 0x....      B.W      continueImageDownload
    477              break;
    478            case BOOTLOAD_STATE_VERIFY_IMAGE:
    479              continueImageVerification(EMBER_AF_IMAGE_VERIFY_IN_PROGRESS);
   \                     ??otaClientTick_8: (+1)
   \   00000074   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0x.... 0x....      B.W      continueImageVerification
    480              break;
    481            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    482              askServerToRunUpgrade(TIMEOUT_REACHED);
   \                     ??otaClientTick_9: (+1)
   \   0000007E   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      B.W      askServerToRunUpgrade
    483              break;
    484            case BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE:
    485              runUpgrade();
   \                     ??otaClientTick_10: (+1)
   \   00000088   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000008C   0x.... 0x....      B.W      runUpgrade
    486            default:
    487              // Do nothing.  Invalid state
    488              break;
    489            }
    490          }
   \                     ??otaClientTick_2: (+1)
   \   00000090   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      queryNextImage

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    491          

   \                                 In section .text, align 2, keep-with-next
    492          void emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback(boolean success)
    493          {
    494            if (!success) {
   \                     emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF04             ITT      EQ 
    495              downloadAndVerifyFinish(EMBER_AF_OTA_ERASE_FAILED);
   \   00000004   0x2005             MOVEQ    R0,#+5
   \   00000006   0x.... 0x....      BEQ.W    downloadAndVerifyFinish
    496          
    497            } else if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable133
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xBF08             IT       EQ 
    498              // If an erase was triggered for some other reason besides preparing
    499              // to start a download, we don't want to trigger the OTA client state
    500              // machine.
    501              otaClientTick();
   \   00000014   0x.... 0x....      BEQ.W    otaClientTick
    502            }
    503          }
   \   00000018   0x4770             BX       LR               ;; return
    504          

   \                                 In section .text, align 2, keep-with-next
    505          void emberAfOtaBootloadClusterClientTickCallback(int8u endpoint)
    506          {
    507            // Since there is only one instance of the OTA bootload cluster allowed,
    508            // we don't care about the endpoint value.
    509            otaClientTick();
   \                     emberAfOtaBootloadClusterClientTickCallback: (+1)
   \   00000000   0x....             B.N      otaClientTick
    510          }
    511          

   \                                 In section .text, align 2, keep-with-next
    512          static void restartServerDiscoveryAfterDelay(void)
    513          {
   \                     restartServerDiscoveryAfterDelay: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    514            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable137  ;; 0x927c0
   \   00000006   0x.... 0x....      BL       setTimer
    515            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   0000000A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x....             B.N      recordUpgradeStatus
    516          }
    517          
    518          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    519          static void otaClientPartnerLinkKeyCallback(boolean success)
    520          {
    521            if (success) {
    522              determineNextState();
    523              return;
    524            } 
    525          
    526            restartServerDiscoveryAfterDelay();
    527          }
    528          #endif
    529          
    530          static void getPartnerLinkKey(void)
    531          {
    532          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    533            EmberEUI64 serverEui64;
    534            int8u i;
    535            EmberAfAttributeType attributeType;
    536          
    537            if (!emberAfIsCurrentSecurityProfileSmartEnergy()
    538                || serverNodeId == EMBER_TRUST_CENTER_NODE_ID) {
    539              goto partnerLinkKeyDone;
    540            }
    541          
    542            emberAfReadClientAttribute(myEndpoint,
    543                                       ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    544                                       ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID,
    545                                       serverEui64,
    546                                       EUI64_SIZE);
    547          
    548            for (i = 0; i < emberAfGetKeyTableSize(); i++) {
    549              EmberKeyStruct keyStruct;
    550              if (EMBER_SUCCESS == emberGetKeyTableEntry(i, &keyStruct)
    551                  && EMBER_APPLICATION_LINK_KEY == keyStruct.type
    552                  && 0 == MEMCOMPARE(keyStruct.partnerEUI64, serverEui64, EUI64_SIZE)) {
    553                goto partnerLinkKeyDone;
    554              }
    555            }
    556          
    557            // Spec is not clear whether the actual key establishment endpoint 
    558            // needs to be used, so we just use 1.
    559            if (EMBER_SUCCESS
    560                == emberAfInitiatePartnerLinkKeyExchange(serverNodeId,
    561                                                         1,
    562                                                         otaClientPartnerLinkKeyCallback)) {
    563              return;
    564            }
    565            
    566            // If we fail to initiate partner link key, it could be because 
    567            // we don't have any link key spots or the server is no longer online.
    568            // We just retry the entire operation again.
    569            restartServerDiscoveryAfterDelay();
    570            return;
    571          
    572           partnerLinkKeyDone:
    573          #endif
    574          
    575            determineNextState();
    576            return;
    577          }
    578          

   \                                 In section .text, align 2, keep-with-next
    579          static int32u getCurrentOffset(void)
    580          {
   \                     getCurrentOffset: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    581            int32u offset;
    582            int8u dataType = ZCL_INT32U_ATTRIBUTE_TYPE;
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0xF88D 0x000C      STRB     R0,[SP, #+12]
    583            emberAfReadAttribute(myEndpoint, 
    584                                 ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    585                                 ZCL_FILE_OFFSET_ATTRIBUTE_ID,
    586                                 CLUSTER_MASK_CLIENT,
    587                                 (int8u*)&offset,
    588                                 4,
    589                                 &dataType);
   \   0000000A   0x2380             MOVS     R3,#+128
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0xA804             ADD      R0,SP,#+16
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable137_1
   \   00000020   0x7840             LDRB     R0,[R0, #+1]
   \   00000022   0x.... 0x....      BL       emberAfReadAttribute
    590            return offset;
   \   00000026   0x9804             LDR      R0,[SP, #+16]
   \   00000028   0xB005             ADD      SP,SP,#+20
   \   0000002A   0xBD00             POP      {PC}             ;; return
    591          }
    592          

   \                                 In section .text, align 2, keep-with-next
    593          static int32u updateCurrentOffset(int32u currentOffset)
    594          {
   \                     updateCurrentOffset: (+1)
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    595            emberAfWriteAttribute(myEndpoint,
    596                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    597                                  ZCL_FILE_OFFSET_ATTRIBUTE_ID, 
    598                                  CLUSTER_MASK_CLIENT,
    599                                  (int8u*)&currentOffset,
    600                                  ZCL_INT32U_ATTRIBUTE_TYPE);
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x2380             MOVS     R3,#+128
   \   0000000A   0xA802             ADD      R0,SP,#+8
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable137_1
   \   00000014   0x7840             LDRB     R0,[R0, #+1]
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0x.... 0x....      BL       emberAfWriteAttribute
    601            return currentOffset;
   \   0000001C   0x9802             LDR      R0,[SP, #+8]
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    602          }
    603          

   \                                 In section .text, align 2, keep-with-next
    604          static void updateDownloadFileVersion(int32u version)
    605          {
    606          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_DOWNLOADED_FILE_VERSION_ATTRIBUTE)
    607            emberAfWriteAttribute(myEndpoint,
    608                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    609                                  ZCL_DOWNLOADED_FILE_VERSION_ATTRIBUTE_ID, 
    610                                  CLUSTER_MASK_CLIENT,
    611                                  (int8u*)(&version),
    612                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    613          #endif
    614            currentDownloadFile.firmwareVersion = version;
   \                     updateDownloadFileVersion: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable137_1
   \   00000004   0x60C8             STR      R0,[R1, #+12]
    615          }
   \   00000006   0x4770             BX       LR               ;; return
    616          
    617          // It is expected this is called when registration has successfully
    618          // completed.

   \                                 In section .text, align 2, keep-with-next
    619          void emberAfOtaClientStartCallback(void)
    620          {
   \                     emberAfOtaClientStartCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    621            if (!isEepromAvailable()) 
   \   00000002   0x.... 0x....      BL       isEepromAvailable
   \   00000006   0xB148             CBZ.N    R0,??emberAfOtaClientStartCallback_0
    622            {
    623                return;  //GB ota not active if no external flash.
    624            }  
    625            
    626            // If we are already delaying we allow jumping immediately
    627            // to discovery and skipping the delay.  This benefits the
    628            // CLI as well as applications that might expect behavior
    629            // as in previous releases where discovery started as soon
    630            // as this API is called.
    631            if (currentBootloadState == BOOTLOAD_STATE_NONE
    632                || currentBootloadState == BOOTLOAD_STATE_DELAY) {
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable133
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF12             ITEE     NE 
   \   00000012   0x2801             CMPNE    R0,#+1
    633              startServerDiscovery();
   \   00000014   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   00000018   0x.... 0x....      BEQ.W    startServerDiscovery
    634            }
    635          }
   \                     ??emberAfOtaClientStartCallback_0: (+1)
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    636          

   \                                 In section .text, align 2, keep-with-next
    637          void emAfOtaClientStop(void)
    638          {
   \                     emAfOtaClientStop: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    639            downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       downloadAndVerifyFinish
    640            recordUpgradeStatus(BOOTLOAD_STATE_NONE);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       recordUpgradeStatus
    641            waitingForResponse = FALSE;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable133
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7101             STRB     R1,[R0, #+4]
    642          
    643            emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0xE8BD 0x4004      POP      {R2,LR}
   \   0000001C   0x7840             LDRB     R0,[R0, #+1]
   \   0000001E   0x.... 0x....      B.W      emberAfDeactivateClientTick
    644          }
    645          

   \                                 In section .text, align 2, keep-with-next
    646          void emAfOtaClientPrintState(void)
    647          {
   \                     emAfOtaClientPrintState: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    648            otaPrintln(" State:   %p",
    649                       bootloadStateNames[currentBootloadState]);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable133
   \   00000006   0x.... 0x....      ADR.W    R1,?_13
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   00000010   0x.... 0x....      BL       ?Subroutine3
    650            otaPrintln(" Waiting for response: %p",
    651                       (waitingForResponse ? "yes" : "no"));
   \                     ??CrossCallReturnLabel_46: (+1)
   \   00000014   0x7920             LDRB     R0,[R4, #+4]
   \   00000016   0x.... 0x....      ADR.W    R1,?_14
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xBF14             ITE      NE 
   \   0000001E   0x....             ADRNE.N  R2,??DataTable128  ;; "yes"
   \   00000020   0x....             ADREQ.N  R2,??DataTable128_1  ;; 0x6E, 0x6F, 0x00, 0x00
   \   00000022   0x.... 0x....      BL       ??Subroutine3_0
    652            if (waitingForResponse) {
   \                     ??CrossCallReturnLabel_43: (+1)
   \   00000026   0x7920             LDRB     R0,[R4, #+4]
   \   00000028   0xB120             CBZ.N    R0,??CrossCallReturnLabel_42
    653              otaPrintln(" Next Event Timer: %d ms", nextEventTimer);
   \   0000002A   0x6CE2             LDR      R2,[R4, #+76]
   \   0000002C   0x.... 0x....      ADR.W    R1,?_17
   \   00000030   0x.... 0x....      BL       ??Subroutine3_0
    654            }
    655            otaPrintln(" Current Download Offset: 0x%4X (%d%%)", 
    656                       getCurrentOffset(),
    657                       emAfCalculatePercentage(getCurrentOffset(),
    658                                               totalImageSize));
   \                     ??CrossCallReturnLabel_42: (+1)
   \   00000034   0x.... 0x....      BL       getCurrentOffset
   \   00000038   0x6CA1             LDR      R1,[R4, #+72]
   \   0000003A   0x.... 0x....      BL       emAfCalculatePercentage
   \   0000003E   0x4604             MOV      R4,R0
   \   00000040   0x.... 0x....      BL       getCurrentOffset
   \   00000044   0x4623             MOV      R3,R4
   \   00000046   0xE8BD 0x4010      POP      {R4,LR}
   \   0000004A   0x4602             MOV      R2,R0
   \   0000004C   0x.... 0x....      ADR.W    R1,?_18
   \   00000050   0x2040             MOVS     R0,#+64
   \   00000052   0x.... 0x....      B.W      emberAfPrintln
    659          }
    660          

   \                                 In section .text, align 2, keep-with-next
    661          static void recordServerEuiAndGoToNextState(EmberEUI64 eui64)
    662          {
   \                     recordServerEuiAndGoToNextState: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    663            emberAfWriteAttribute(myEndpoint,
    664                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    665                                  ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID, 
    666                                  CLUSTER_MASK_CLIENT,
    667                                  eui64,
    668                                  ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable133
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x21F0             MOVS     R1,#+240
   \   0000000C   0x9101             STR      R1,[SP, #+4]
   \   0000000E   0x2380             MOVS     R3,#+128
   \   00000010   0x7860             LDRB     R0,[R4, #+1]
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2119             MOVS     R1,#+25
   \   00000016   0x.... 0x....      BL       emberAfWriteAttribute
    669            otaPrintln("OTA Cluster: setting IEEE address of OTA cluster");
   \   0000001A   0x.... 0x....      ADR.W    R1,?_19
   \   0000001E   0x.... 0x....      BL       ?Subroutine2
    670            getPartnerLinkKey();;
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000022   0x.... 0x....      BL       determineDownloadFileStatus
   \   00000026   0x2805             CMP      R0,#+5
   \   00000028   0x7020             STRB     R0,[R4, #+0]
   \   0000002A   0xD024             BEQ.N    ??recordServerEuiAndGoToNextState_0
   \   0000002C   0xD328             BCC.N    ??recordServerEuiAndGoToNextState_1
   \   0000002E   0x2807             CMP      R0,#+7
   \   00000030   0xD007             BEQ.N    ??recordServerEuiAndGoToNextState_2
   \   00000032   0xD30B             BCC.N    ??recordServerEuiAndGoToNextState_3
   \   00000034   0x2808             CMP      R0,#+8
   \   00000036   0xD123             BNE.N    ??recordServerEuiAndGoToNextState_1
   \   00000038   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      B.W      askServerToRunUpgrade
   \                     ??recordServerEuiAndGoToNextState_2: (+1)
   \   00000042   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   00000046   0x2005             MOVS     R0,#+5
   \   00000048   0x.... 0x....      B.W      continueImageVerification
   \                     ??recordServerEuiAndGoToNextState_3: (+1)
   \   0000004C   0x.... 0x....      BL       emberAfOtaStorageDriverPrepareToResumeDownloadCallback
   \   00000050   0x4605             MOV      R5,R0
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x70E0             STRB     R0,[R4, #+3]
   \   00000056   0x2006             MOVS     R0,#+6
   \   00000058   0x.... 0x....      BL       recordUpgradeStatus
   \   0000005C   0x2D00             CMP      R5,#+0
   \   0000005E   0xBF04             ITT      EQ 
   \   00000060   0xE8BD 0x4037      POPEQ    {R0-R2,R4,R5,LR}
   \   00000064   0x.... 0x....      BEQ.W    continueImageDownload
   \   00000068   0x2D04             CMP      R5,#+4
   \   0000006A   0xD009             BEQ.N    ??recordServerEuiAndGoToNextState_1
   \   0000006C   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   00000070   0x2004             MOVS     R0,#+4
   \   00000072   0x.... 0x....      B.W      downloadAndVerifyFinish
   \                     ??recordServerEuiAndGoToNextState_0: (+1)
   \   00000076   0xB003             ADD      SP,SP,#+12
   \   00000078   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000007C   0x2100             MOVS     R1,#+0
   \   0000007E   0x....             B.N      ?Subroutine0
    671          }
   \                     ??recordServerEuiAndGoToNextState_1: (+1)
   \   00000080   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    672          

   \                                 In section .text, align 2, keep-with-next
    673          void emAfOtaClientServiceDiscoveryCallback(const EmberAfServiceDiscoveryResult *result)
    674          {
   \                     emAfOtaClientServiceDiscoveryCallback: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    675            // We only look at the first result.  How multiple OTA servers are handled
    676            // has not been spelled out by the spec yet.
    677            const EmberAfEndpointList* epList =
    678              (const EmberAfEndpointList*)result->responseData;
   \   00000002   0x6881             LDR      R1,[R0, #+8]
    679           
    680            waitingForResponse = FALSE;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable133
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x7122             STRB     R2,[R4, #+4]
    681          
    682            // Since the OTA cluster only uses broadcast discoveries for Match descriptor
    683            // and Unicast discoveries for the IEEE, we can differentiate the request
    684            // type based on the result.
    685          
    686            if (result->status == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_COMPLETE) {
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0xB9E2             CBNZ.N   R2,??emAfOtaClientServiceDiscoveryCallback_0
    687              if (serverEndpoint == UNDEFINED_ENDPOINT) {
   \   00000010   0x78A0             LDRB     R0,[R4, #+2]
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xD102             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_1
    688                // We did not find an OTA server yet, so wait a while before trying
    689                // again.  Hopefully one will appear on the network later.
    690                restartServerDiscoveryAfterDelay();
   \   00000016   0x.... 0x....      BL       restartServerDiscoveryAfterDelay
   \   0000001A   0xBD13             POP      {R0,R1,R4,PC}
    691              } else {
    692                euiLookup();
   \                     ??emAfOtaClientServiceDiscoveryCallback_1: (+1)
   \   0000001C   0x2003             MOVS     R0,#+3
   \   0000001E   0x.... 0x....      BL       recordUpgradeStatus
   \   00000022   0x8B20             LDRH     R0,[R4, #+24]
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x.... 0x....      BL       emberLookupEui64ByNodeId
   \   0000002A   0xB318             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_2
   \   0000002C   0x8B20             LDRH     R0,[R4, #+24]
   \   0000002E   0x.... 0x....      LDR.W    R1,??DataTable139
   \   00000032   0x.... 0x....      BL       emberAfFindIeeeAddress
   \   00000036   0xB110             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_3
   \   00000038   0x.... 0x....      BL       euiLookupErrorOccurred
   \   0000003C   0xBD13             POP      {R0,R1,R4,PC}
   \                     ??emAfOtaClientServiceDiscoveryCallback_3: (+1)
   \   0000003E   0x2003             MOVS     R0,#+3
   \   00000040   0x.... 0x....      BL       recordUpgradeStatus
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x7120             STRB     R0,[R4, #+4]
   \   00000048   0xE014             B.N      ??emAfOtaClientServiceDiscoveryCallback_2
    693              }
    694              return;
    695            } else if (result->status
    696                       == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_RESPONSE_RECEIVED) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_0: (+1)
   \   0000004A   0x2A01             CMP      R2,#+1
   \   0000004C   0xD10B             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_4
    697              if (epList->count > 0) {
   \   0000004E   0x780A             LDRB     R2,[R1, #+0]
   \   00000050   0xB1B2             CBZ.N    R2,??emAfOtaClientServiceDiscoveryCallback_5
    698                serverEndpoint = epList->list[0];
   \   00000052   0x6849             LDR      R1,[R1, #+4]
   \   00000054   0x7809             LDRB     R1,[R1, #+0]
   \   00000056   0x70A1             STRB     R1,[R4, #+2]
    699                serverNodeId = result->matchAddress;
   \   00000058   0x8882             LDRH     R2,[R0, #+4]
    700                otaPrintln("Setting OTA Server to 0x%2X", serverNodeId);
   \   0000005A   0x.... 0x....      ADR.W    R1,?_20
   \   0000005E   0x8322             STRH     R2,[R4, #+24]
   \   00000060   0x.... 0x....      BL       ??Subroutine3_0
    701              }
    702          
    703            } else if (result->status
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000064   0xBD13             POP      {R0,R1,R4,PC}
    704                       == EMBER_AF_UNICAST_SERVICE_DISCOVERY_COMPLETE_WITH_RESPONSE) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_4: (+1)
   \   00000066   0x2A03             CMP      R2,#+3
   \   00000068   0xD108             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_6
    705              // Assumed IEEE address request
    706              EmberEUI64 eui64;
    707              MEMCOPY(eui64, result->responseData, EUI64_SIZE);
   \   0000006A   0x6881             LDR      R1,[R0, #+8]
   \   0000006C   0x2208             MOVS     R2,#+8
   \   0000006E   0xA800             ADD      R0,SP,#+0
   \   00000070   0x.... 0x....      BL       halCommonMemCopy
    708              recordServerEuiAndGoToNextState(eui64);
   \                     ??emAfOtaClientServiceDiscoveryCallback_2: (+1)
   \   00000074   0xA800             ADD      R0,SP,#+0
   \   00000076   0x.... 0x....      BL       recordServerEuiAndGoToNextState
   \   0000007A   0xBD13             POP      {R0,R1,R4,PC}
    709          
    710            } else { // Assume Unicast timeout of IEEE address request
    711              euiLookupErrorOccurred();
   \                     ??emAfOtaClientServiceDiscoveryCallback_6: (+1)
   \   0000007C   0x.... 0x....      BL       euiLookupErrorOccurred
    712            }
    713          }
   \                     ??emAfOtaClientServiceDiscoveryCallback_5: (+1)
   \   00000080   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    714          

   \                                 In section .text, align 2, keep-with-next
    715          static void startServerDiscovery(void)
    716          {
   \                     startServerDiscovery: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    717            EmberStatus status;
    718            EmberAfProfileId appProfile;
    719          
    720            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
    721            serverEndpoint = UNDEFINED_ENDPOINT;
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable133
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x70A0             STRB     R0,[R4, #+2]
    722            
    723            // Figure out the right app profile ID based on the endpoint descriptor
    724            appProfile = emberAfProfileIdFromIndex( 
    725                           emberAfIndexFromEndpoint(myEndpoint) );
   \   00000012   0x7860             LDRB     R0,[R4, #+1]
   \   00000014   0x.... 0x....      BL       emberAfIndexFromEndpoint
    726          
    727            status = 
    728              emberAfFindDevicesByProfileAndCluster(
    729                EMBER_RX_ON_WHEN_IDLE_BROADCAST_ADDRESS,
    730                appProfile,
    731                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    732                EMBER_AF_SERVER_CLUSTER_DISCOVERY,
    733                emAfOtaClientServiceDiscoveryCallback);
    734          
    735            if (status != EMBER_SUCCESS) {
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable139
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable139_1
   \   00000024   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000028   0x2219             MOVS     R2,#+25
   \   0000002A   0x8841             LDRH     R1,[R0, #+2]
   \   0000002C   0xF64F 0x70FD      MOVW     R0,#+65533
   \   00000030   0x.... 0x....      BL       emberAfFindDevicesByProfileAndCluster
   \   00000034   0xB128             CBZ.N    R0,??startServerDiscovery_0
    736              otaPrintln("Failed to initiate service discovery.");
   \   00000036   0x.... 0x....      ADR.W    R1,?_21
   \   0000003A   0x.... 0x....      BL       ?Subroutine2
    737              waitingForResponse = FALSE;
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE000             B.N      ??startServerDiscovery_1
    738            } else {
    739              waitingForResponse = TRUE;
   \                     ??startServerDiscovery_0: (+1)
   \   00000042   0x2001             MOVS     R0,#+1
   \                     ??startServerDiscovery_1: (+1)
   \   00000044   0x7120             STRB     R0,[R4, #+4]
    740            }
    741          
    742            errors = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x70E0             STRB     R0,[R4, #+3]
    743            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   0000004A   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable137  ;; 0x927c0
   \   00000052   0x....             B.N      setTimer
    744          }
    745          

   \                                 In section .text, align 2, keep-with-next
    746          static void euiLookupErrorOccurred(void)
    747          {
    748            // The timer has expired and we don't know the server's EUI. 
    749            // We treat the server discovery + EUI lookup as a single operation
    750            // and if either fails we delay a long time to allow any potential network
    751            // issues to be resolved.
    752            waitingForResponse = FALSE;
   \                     euiLookupErrorOccurred: (+1)
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable133
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x7108             STRB     R0,[R1, #+4]
    753            restartServerDiscoveryAfterDelay();
   \   00000008   0x....             B.N      restartServerDiscoveryAfterDelay
    754            return;
    755          }
    756          
    757          static void euiLookup(void)
    758          {
    759            EmberEUI64 eui64;
    760            EmberStatus status;
    761          
    762            recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    763            status = emberLookupEui64ByNodeId(serverNodeId, eui64);
    764          
    765            if (status != EMBER_SUCCESS) { 
    766              // New discovery of the Server's EUI
    767              status = emberAfFindIeeeAddress(serverNodeId,
    768                                              emAfOtaClientServiceDiscoveryCallback);
    769              if (status != EMBER_SUCCESS) {
    770                // Discovery was never initiated.
    771                euiLookupErrorOccurred();
    772                return;
    773              }
    774              recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    775              waitingForResponse = TRUE;
    776          
    777            } // Else
    778              // We happen to know the server's EUI without discovery, keep going.
    779          
    780            recordServerEuiAndGoToNextState(eui64);
    781          }
    782          

   \                                 In section .text, align 2, keep-with-next
    783          static void putImageInfoInMessage(void)
    784          {
   \                     putImageInfoInMessage: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    785            emberAfPutInt16uInResp(currentDownloadFile.manufacturerId);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable137_1
   \   00000006   0x8920             LDRH     R0,[R4, #+8]
   \   00000008   0x.... 0x....      BL       emberAfPutInt16uInResp
    786            emberAfPutInt16uInResp(currentDownloadFile.imageTypeId);
   \   0000000C   0x8960             LDRH     R0,[R4, #+10]
   \   0000000E   0x.... 0x....      BL       emberAfPutInt16uInResp
    787            emberAfPutInt32uInResp(currentDownloadFile.firmwareVersion);
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x.... 0x....      B.W      emberAfPutInt32uInResp
    788          }
    789          

   \                                 In section .text, align 2, keep-with-next
    790          static BootloadState determineDownloadFileStatus(void)
    791          {
   \                     determineDownloadFileStatus: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08E             SUB      SP,SP,#+56
    792            int32u currentOffset;
    793            EmberAfOtaStorageStatus 
    794              status = emberAfOtaStorageCheckTempDataCallback(&currentOffset, 
    795                                                              &totalImageSize,
    796                                                              &currentDownloadFile);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable133
   \   00000008   0xF104 0x0208      ADD      R2,R4,#+8
   \   0000000C   0xF104 0x0148      ADD      R1,R4,#+72
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
    797          
    798            if (status == EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND) {
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD110             BNE.N    ??determineDownloadFileStatus_0
    799              otaPrintFlush();
    800              otaPrintln("Partial file download found, continuing from offset 0x%4X",
    801                         currentOffset);
   \   0000001A   0x9A00             LDR      R2,[SP, #+0]
   \   0000001C   0x.... 0x....      ADR.W    R1,?_22
   \   00000020   0x.... 0x....      BL       ??Subroutine3_0
    802              otaPrintFlush();
    803              updateCurrentOffset(currentOffset);
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x.... 0x....      BL       updateCurrentOffset
    804              updateDownloadFileVersion(currentDownloadFile.firmwareVersion);
   \   0000002A   0x68E0             LDR      R0,[R4, #+12]
   \   0000002C   0x.... 0x....      BL       updateDownloadFileVersion
    805              emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
   \   00000030   0x6CA1             LDR      R1,[R4, #+72]
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
    806              return BOOTLOAD_STATE_DOWNLOAD;
   \   00000038   0x2006             MOVS     R0,#+6
   \   0000003A   0xE037             B.N      ??determineDownloadFileStatus_1
    807            } else if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   \                     ??determineDownloadFileStatus_0: (+1)
   \   0000003C   0xBB88             CBNZ.N   R0,??determineDownloadFileStatus_2
    808              EmberAfOtaImageId currentVersionInfo;
    809              otaPrintln("Found fully downloaded file in storage (version 0x%4X).", 
    810                         currentDownloadFile.firmwareVersion);
   \   0000003E   0x68E2             LDR      R2,[R4, #+12]
   \   00000040   0x.... 0x....      ADR.W    R1,?_23
   \   00000044   0x.... 0x....      BL       ??Subroutine3_0
    811                         
    812              emberAfOtaClientVersionInfoCallback(&currentVersionInfo, NULL);
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xA809             ADD      R0,SP,#+36
   \   0000004C   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    813          
    814          
    815             EmberAfOtaImageId oldImageId = emberAfOtaStorageSearchCallback(currentDownloadFile.manufacturerId,
    816                                                                             currentDownloadFile.imageTypeId,
    817                                                                             (hardwareVersion == 0xFFFF
    818                                                                              ? NULL
    819                                                                              : &hardwareVersion));
   \   00000050   0x8B60             LDRH     R0,[R4, #+26]
   \   00000052   0x8962             LDRH     R2,[R4, #+10]
   \   00000054   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0x8921             LDRH     R1,[R4, #+8]
   \   0000005C   0xBF0C             ITE      EQ 
   \   0000005E   0x2300             MOVEQ    R3,#+0
   \   00000060   0xF104 0x031A      ADDNE    R3,R4,#+26
   \   00000064   0xA805             ADD      R0,SP,#+20
   \   00000066   0x.... 0x....      BL       emberAfOtaStorageSearchCallback
   \   0000006A   0xA801             ADD      R0,SP,#+4
   \   0000006C   0xA905             ADD      R1,SP,#+20
   \   0000006E   0x2210             MOVS     R2,#+16
   \   00000070   0x.... 0x....      BL       __aeabi_memcpy4
    820          
    821              if (emberAfIsOtaImageIdValid(&oldImageId)) { 
   \   00000074   0xA801             ADD      R0,SP,#+4
   \   00000076   0x.... 0x....      BL       emberAfIsOtaImageIdValid
   \   0000007A   0xB110             CBZ.N    R0,??determineDownloadFileStatus_3
    822                // Wipe out any existing file matching the same values as the one we 
    823                // are going to download.
    824          
    825                emberAfOtaStorageDeleteImageCallback(&oldImageId);
   \   0000007C   0xA801             ADD      R0,SP,#+4
   \   0000007E   0x.... 0x....      BL       emberAfOtaStorageDeleteImageCallback
    826              }
    827              
    828              
    829              
    830              if (currentVersionInfo.firmwareVersion != currentDownloadFile.firmwareVersion) {
   \                     ??determineDownloadFileStatus_3: (+1)
   \   00000082   0x68E2             LDR      R2,[R4, #+12]
   \   00000084   0x9B0A             LDR      R3,[SP, #+40]
   \   00000086   0x4293             CMP      R3,R2
   \   00000088   0xD005             BEQ.N    ??determineDownloadFileStatus_4
    831                otaPrintln("Found file in storage with different version (0x%4X) than current version (0x%4X)",
    832                           currentDownloadFile.firmwareVersion,
    833                           currentVersionInfo.firmwareVersion);
   \   0000008A   0x.... 0x....      ADR.W    R1,?_24
   \   0000008E   0x.... 0x....      BL       ?Subroutine4
    834                return BOOTLOAD_STATE_VERIFY_IMAGE;
   \                     ??CrossCallReturnLabel_57: (+1)
   \   00000092   0x2007             MOVS     R0,#+7
   \   00000094   0xE00A             B.N      ??determineDownloadFileStatus_1
    835              } else {
    836                otaPrintln("File in storage is same as current running version (0x%4X)",
    837                           currentVersionInfo.firmwareVersion);
   \                     ??determineDownloadFileStatus_4: (+1)
   \   00000096   0x461A             MOV      R2,R3
   \   00000098   0x.... 0x....      ADR.W    R1,?_25
   \   0000009C   0x.... 0x....      BL       ??Subroutine3_0
    838              }
    839            } else {
   \                     ??CrossCallReturnLabel_38: (+1)
   \   000000A0   0xE003             B.N      ??CrossCallReturnLabel_18
    840              otaPrintln("No image found in storage.");    
   \                     ??determineDownloadFileStatus_2: (+1)
   \   000000A2   0x.... 0x....      ADR.W    R1,?_26
   \   000000A6   0x.... 0x....      BL       ?Subroutine2
    841            }
    842          
    843            emberAfAppFlush();
    844          
    845            return BOOTLOAD_STATE_QUERY_NEXT_IMAGE;
   \                     ??CrossCallReturnLabel_18: (+1)
   \   000000AA   0x2005             MOVS     R0,#+5
   \                     ??determineDownloadFileStatus_1: (+1)
   \   000000AC   0xB00E             ADD      SP,SP,#+56
   \   000000AE   0xBD10             POP      {R4,PC}          ;; return
    846          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    847          
    848          static void determineNextState(void)
    849          {
    850            currentBootloadState = determineDownloadFileStatus();
    851          
    852            switch (currentBootloadState) {
    853            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    854              queryNextImage(SEND_QUERY_NOW,
    855                             FALSE);   // query error?
    856              break;
    857            case BOOTLOAD_STATE_DOWNLOAD: 
    858              {
    859                EmberAfOtaStorageStatus status = emberAfOtaStorageDriverPrepareToResumeDownloadCallback();
    860                errors = 0;
    861                recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
    862                if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
    863                  continueImageDownload();
    864                } else if (status != EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
    865                  downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
    866          
    867                } // For operation-in-progress we fall-through and wait for the callback 
    868                  // later.
    869              }
    870              break;
    871            case BOOTLOAD_STATE_VERIFY_IMAGE:
    872              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);
    873              break;
    874            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    875              askServerToRunUpgrade(START_NEW_TIMER);
    876              break;
    877            default:
    878              // Do nothing.  No other states should reach here.
    879              break;
    880            }
    881          }
    882          

   \                                 In section .text, align 2, keep-with-next
    883          static void recordUpgradeStatus(BootloadState state)
    884          {
   \                     recordUpgradeStatus: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
    885            int8u upgradeStatus = bootloadStateToExternalState[state];
   \   00000002   0x.... 0x....      ADR.W    R1,bootloadStateToExternalState
    886            if (currentBootloadState != state) {
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable133
   \   0000000A   0x5C41             LDRB     R1,[R0, R1]
   \   0000000C   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   00000010   0x4604             MOV      R4,R0
   \   00000012   0x7829             LDRB     R1,[R5, #+0]
   \   00000014   0x42A1             CMP      R1,R4
   \   00000016   0xD005             BEQ.N    ??CrossCallReturnLabel_45
    887              emberAfCoreFlush();
    888              otaPrintln("Bootload state: %p", 
    889                         bootloadStateNames[state]);
   \   00000018   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \   0000001C   0x.... 0x....      ADR.W    R1,?_27
   \   00000020   0x.... 0x....      BL       ?Subroutine3
    890              emberAfCoreFlush();
    891            }
    892            currentBootloadState = state;
    893          
    894            emberAfWriteAttribute(myEndpoint,
    895                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    896                                  ZCL_IMAGE_UPGRADE_STATUS_ATTRIBUTE_ID, 
    897                                  CLUSTER_MASK_CLIENT,
    898                                  (int8u*)&upgradeStatus,
    899                                  ZCL_ENUM8_ATTRIBUTE_TYPE);
   \                     ??CrossCallReturnLabel_45: (+1)
   \   00000024   0x2030             MOVS     R0,#+48
   \   00000026   0x9001             STR      R0,[SP, #+4]
   \   00000028   0x702C             STRB     R4,[R5, #+0]
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x2380             MOVS     R3,#+128
   \   00000030   0x7868             LDRB     R0,[R5, #+1]
   \   00000032   0x2206             MOVS     R2,#+6
   \   00000034   0x2119             MOVS     R1,#+25
   \   00000036   0x.... 0x....      BL       emberAfWriteAttribute
    900          }
   \   0000003A   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    901          

   \                                 In section .text, align 4, keep-with-next
    902          static EmberAfStatus commandParse(boolean defaultResponse,
    903                                            EmberAfClusterCommand* message)
    904          {
   \                     commandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0xB082             SUB      SP,SP,#+8
    905            int8u commandId = (message->buffer[(ZCL_COMMAND_ID_INDEX
    906                                                + (int8u)defaultResponse)]);
   \   00000006   0x68A9             LDR      R1,[R5, #+8]
   \   00000008   0x1841             ADDS     R1,R0,R1
   \   0000000A   0x788A             LDRB     R2,[R1, #+2]
    907            int8u index = EMBER_AF_ZCL_OVERHEAD;
    908          
    909            if (commandId > EM_AF_OTA_MAX_COMMAND_ID) {
   \   0000000C   0x2A0A             CMP      R2,#+10
   \   0000000E   0xDB05             BLT.N    ??commandParse_1
    910              otaPrintln("Bad OTA command: 0x%X", commandId);
   \   00000010   0x.... 0x....      ADR.W    R1,?_28
   \   00000014   0x.... 0x....      BL       ??Subroutine3_0
    911              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \                     ??CrossCallReturnLabel_37: (+1)
   \   00000018   0x2085             MOVS     R0,#+133
   \   0000001A   0xBD76             POP      {R1,R2,R4-R6,PC}
    912            }
    913          
    914            if (!defaultResponse && message->bufLen < emAfOtaMinMessageLengths[commandId]) {
   \                     ??commandParse_1: (+1)
   \   0000001C   0xB968             CBNZ.N   R0,??commandParse_2
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable146
   \   00000022   0x89AB             LDRH     R3,[R5, #+12]
   \   00000024   0x5C51             LDRB     R1,[R2, R1]
   \   00000026   0x428B             CMP      R3,R1
   \   00000028   0xD207             BCS.N    ??commandParse_2
    915              otaPrintln("OTA command 0x%X too short (len %d < min %d)",
    916                         commandId,
    917                         message->bufLen,
    918                         emAfOtaMinMessageLengths[commandId]);
   \   0000002A   0x9100             STR      R1,[SP, #+0]
   \   0000002C   0x2040             MOVS     R0,#+64
   \   0000002E   0x.... 0x....      ADR.W    R1,?_29
   \   00000032   0x.... 0x....      BL       emberAfPrintln
    919              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000036   0x2080             MOVS     R0,#+128
   \   00000038   0xBD76             POP      {R1,R2,R4-R6,PC}
    920            }
    921          
    922            if (message->source != serverNodeId) {
   \                     ??commandParse_2: (+1)
   \   0000003A   0x.... 0x....      LDR.W    R4,??DataTable133
   \   0000003E   0x88E9             LDRH     R1,[R5, #+6]
   \   00000040   0x8B23             LDRH     R3,[R4, #+24]
   \   00000042   0x4299             CMP      R1,R3
   \   00000044   0xD006             BEQ.N    ??commandParse_3
    923              otaPrintln("OTA command from unrecognized server 0x%2X.  My OTA server: 0x%2X",
    924                         message->source,
    925                         serverNodeId);
   \   00000046   0x460A             MOV      R2,R1
   \   00000048   0x.... 0x....      ADR.W    R1,?_30
   \   0000004C   0x.... 0x....      BL       ?Subroutine4
    926              return EMBER_ZCL_STATUS_NOT_AUTHORIZED;
   \                     ??CrossCallReturnLabel_56: (+1)
   \   00000050   0x207E             MOVS     R0,#+126
   \   00000052   0xBD76             POP      {R1,R2,R4-R6,PC}
    927            }
    928          
    929            // While not all command validation has taken place at this point, we 
    930            // flag that we are not waiting for a response anymore.  We want to make sure
    931            // that our sleepy can go to sleep if it wants.  The likelihood of an
    932            // invalid command followed by a properly formatted one is extremely low.
    933            // Either the server knows the correct format or it doesn't.
    934            waitingForResponse = FALSE;
   \                     ??commandParse_3: (+1)
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x7121             STRB     R1,[R4, #+4]
    935          
    936            // NOTE:  In order to support Default Response, we list the CLIENT commands here
    937            // as well in case the server used that to respond.
    938            switch (commandId) {
   \   00000058   0x1CC3             ADDS     R3,R0,#+3
   \   0000005A   0x7826             LDRB     R6,[R4, #+0]
   \   0000005C   0x.... 0x....      ADR.W    R1,?_31
   \   00000060   0x2A07             CMP      R2,#+7
   \   00000062   0xD84C             BHI.N    ??commandParse_4
   \   00000064   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??commandParse_0:
   \   00000068   0x04 0x1E          DC8      0x4,0x1E,0x1E,0x2B
   \              0x1E 0x2B    
   \   0000006C   0x2B 0x2B          DC8      0x2B,0x2B,0x39,0x39
   \              0x39 0x39    
    939            case ZCL_IMAGE_NOTIFY_COMMAND_ID: {
    940              boolean broadcast = (EMBER_INCOMING_UNICAST != message->type);
   \                     ??commandParse_5: (+1)
   \   00000070   0x7928             LDRB     R0,[R5, #+4]
   \   00000072   0xB100             CBZ.N    R0,??commandParse_6
   \   00000074   0x2001             MOVS     R0,#+1
    941              if ((currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) && (currentBootloadState != BOOTLOAD_STATE_NONE)) {
   \                     ??commandParse_6: (+1)
   \   00000076   0x2E05             CMP      R6,#+5
   \   00000078   0xBF18             IT       NE 
   \   0000007A   0x2E00             CMPNE    R6,#+0
   \   0000007C   0xD00A             BEQ.N    ??commandParse_7
    942                otaPrintln("Got unexpected %p.  Ignored.", "Image notify");
   \   0000007E   0x.... 0x....      ADR.W    R2,?_32
   \   00000082   0x.... 0x....      BL       ??Subroutine3_0
    943                emberAfDebugPrint("Image Notify received %x\r\n", currentBootloadState);
   \                     ??CrossCallReturnLabel_36: (+1)
   \   00000086   0x7822             LDRB     R2,[R4, #+0]
   \   00000088   0x.... 0x....      ADR.W    R1,?_33
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       emberAfPrint
    944                return EMBER_ZCL_STATUS_FAILURE;
   \   00000092   0xE028             B.N      ??CrossCallReturnLabel_35
    945              }
    946              return imageNotifyParse(broadcast, message->buffer, index, message->bufLen);
   \                     ??commandParse_7: (+1)
   \   00000094   0x68A9             LDR      R1,[R5, #+8]
   \   00000096   0x89AB             LDRH     R3,[R5, #+12]
   \   00000098   0xB002             ADD      SP,SP,#+8
   \   0000009A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000009E   0xB2DB             UXTB     R3,R3
   \   000000A0   0x2203             MOVS     R2,#+3
   \   000000A2   0x....             B.N      imageNotifyParse
    947            }
    948            case ZCL_QUERY_NEXT_IMAGE_RESPONSE_COMMAND_ID: 
    949            case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
    950              if (currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??commandParse_8: (+1)
   \   000000A4   0x2E05             CMP      R6,#+5
   \   000000A6   0xBF18             IT       NE 
   \   000000A8   0x.... 0x....      ADRNE.W  R2,?_34
    951                otaPrintln("Got unexpected %p.  Ignored.",
    952                           "Query next image response");
   \   000000AC   0xD119             BNE.N    ??commandParse_9
    953                return EMBER_ZCL_STATUS_FAILURE;
    954              }
    955              return queryNextImageResponseParse(message->buffer, 
    956                                                 index + defaultResponse,
    957                                                 message->bufLen);
   \   000000AE   0x68A8             LDR      R0,[R5, #+8]
   \   000000B0   0x89AA             LDRH     R2,[R5, #+12]
   \   000000B2   0xB002             ADD      SP,SP,#+8
   \   000000B4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000B8   0xB2D2             UXTB     R2,R2
   \   000000BA   0xB2D9             UXTB     R1,R3
   \   000000BC   0x....             B.N      queryNextImageResponseParse
    958            }
    959            case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
    960            case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
    961            case ZCL_IMAGE_BLOCK_RESPONSE_COMMAND_ID: {
    962              if (currentBootloadState != BOOTLOAD_STATE_DOWNLOAD) {
   \                     ??commandParse_10: (+1)
   \   000000BE   0x2E06             CMP      R6,#+6
   \   000000C0   0xBF18             IT       NE 
   \   000000C2   0x.... 0x....      ADRNE.W  R2,?_35
    963                otaPrintln("Got unexpected %p.  Ignored.",
    964                           "Image block response");
   \   000000C6   0xD10C             BNE.N    ??commandParse_9
    965                return EMBER_ZCL_STATUS_FAILURE;
    966              }
    967              return imageBlockResponseParse(message->buffer, 
    968                                             index + defaultResponse,
    969                                             message->bufLen);
   \   000000C8   0x68A8             LDR      R0,[R5, #+8]
   \   000000CA   0x89AA             LDRH     R2,[R5, #+12]
   \   000000CC   0xB002             ADD      SP,SP,#+8
   \   000000CE   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000D2   0xB2D2             UXTB     R2,R2
   \   000000D4   0xB2D9             UXTB     R1,R3
   \   000000D6   0x.... 0x....      B.W      imageBlockResponseParse
    970            }
    971            case ZCL_UPGRADE_END_RESPONSE_COMMAND_ID:
    972            case ZCL_UPGRADE_END_REQUEST_COMMAND_ID: {
    973              if (currentBootloadState != BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE) {
   \                     ??commandParse_11: (+1)
   \   000000DA   0x2E08             CMP      R6,#+8
   \   000000DC   0xD005             BEQ.N    ??commandParse_12
    974                otaPrintln("Got unexpected %p.  Ignored.",
    975                           "Upgrade end response");
   \   000000DE   0x.... 0x....      ADR.W    R2,?_36
   \                     ??commandParse_9: (+1)
   \   000000E2   0x.... 0x....      BL       ??Subroutine3_0
    976                return EMBER_ZCL_STATUS_FAILURE;
   \                     ??CrossCallReturnLabel_35: (+1)
   \   000000E6   0x2001             MOVS     R0,#+1
   \   000000E8   0xBD76             POP      {R1,R2,R4-R6,PC}
    977              }
    978              return upgradeEndResponseParse((defaultResponse
    979                                              ? message->buffer[index]
    980                                              : EMBER_ZCL_STATUS_SUCCESS),
    981                                             message->buffer, 
    982                                             message->bufLen);
   \                     ??commandParse_12: (+1)
   \   000000EA   0x68A9             LDR      R1,[R5, #+8]
   \   000000EC   0xB100             CBZ.N    R0,??commandParse_13
   \   000000EE   0x78C8             LDRB     R0,[R1, #+3]
   \                     ??commandParse_13: (+1)
   \   000000F0   0xB002             ADD      SP,SP,#+8
   \   000000F2   0x89AA             LDRH     R2,[R5, #+12]
   \   000000F4   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000F8   0xB2D2             UXTB     R2,R2
   \   000000FA   0x.... 0x....      B.W      upgradeEndResponseParse
    983            }
    984            default:
    985              // Fall through. Already printed info about the bad command ID.
    986              break;
    987            }
    988            return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??commandParse_4: (+1)
   \   000000FE   0x2081             MOVS     R0,#+129
   \   00000100   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    989          }
    990          

   \                                 In section .text, align 2, keep-with-next
    991          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand* message)
    992          {
   \                     emberAfOtaClientIncomingMessageRawCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    993            EmberAfStatus zclStatus = commandParse(FALSE,   // default response?
    994                                                   message); 
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       commandParse
   \   0000000C   0x0005             MOVS     R5,R0
    995            if (zclStatus) {
   \   0000000E   0xD00C             BEQ.N    ??emberAfOtaClientIncomingMessageRawCallback_0
    996              emberAfOtaBootloadClusterFlush();
    997              emberAfOtaBootloadClusterPrintln("%p: failed parsing OTA cmd 0x%x", 
    998                                               "Error",
    999                                               message->commandId);
   \   00000010   0x7CE3             LDRB     R3,[R4, #+19]
   \   00000012   0x.... 0x....      ADR.W    R2,?_38
   \   00000016   0x.... 0x....      ADR.W    R1,?_37
   \   0000001A   0x.... 0x....      BL       ?Subroutine4
   1000              if (message->type == EMBER_INCOMING_UNICAST) {
   \                     ??CrossCallReturnLabel_55: (+1)
   \   0000001E   0x7920             LDRB     R0,[R4, #+4]
   \   00000020   0xB120             CBZ.N    R0,??emberAfOtaClientIncomingMessageRawCallback_1
   1001                // We don't want to respond to invalid broadcast messages with
   1002                // a default response.
   1003                return EMBER_ZCL_STATUS_SUCCESS;
   1004              }
   1005              emberAfSendDefaultResponse(message, zclStatus);
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       emberAfSendDefaultResponse
   1006            }
   1007          
   1008            return TRUE;
   \                     ??emberAfOtaClientIncomingMessageRawCallback_0: (+1)
   \   0000002A   0x2001             MOVS     R0,#+1
   \                     ??emberAfOtaClientIncomingMessageRawCallback_1: (+1)
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1009          }
   1010          

   \                                 In section .text, align 2, keep-with-next
   1011          void emberAfOtaBootloadClusterClientDefaultResponseCallback(int8u endpoint, 
   1012                                                                      int8u commandId, 
   1013                                                                      EmberAfStatus status)
   1014          {
   \                     emberAfOtaBootloadClusterClientDefaultResponseCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1015            EmberAfClusterCommand* command = emberAfCurrentCommand();
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable146_1
   \   00000006   0x681C             LDR      R4,[R3, #+0]
   1016          
   1017            if (endpoint != myEndpoint) {
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable133
   \   0000000C   0x785B             LDRB     R3,[R3, #+1]
   \   0000000E   0x4298             CMP      R0,R3
   \   00000010   0xD10B             BNE.N    ??emberAfOtaBootloadClusterClientDefaultRespons_0
   1018              return;
   1019            }
   1020            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   00000012   0xB152             CBZ.N    R2,??emberAfOtaBootloadClusterClientDefaultRespons_0
   1021              // The only default response we care about is non-success values.
   1022              // That will mean the server failed processing for some reason,
   1023              // or wants to abort.  Successful responses will send a non-default
   1024              // response message.
   1025              return;
   1026            }
   1027            otaPrintln("OTA Default response to command ID 0x%X, status 0x%X",
   1028                       commandId,
   1029                       status);
   \   00000014   0x4613             MOV      R3,R2
   \   00000016   0x460A             MOV      R2,R1
   \   00000018   0x.... 0x....      ADR.W    R1,?_39
   \   0000001C   0x.... 0x....      BL       ?Subroutine4
   1030          
   1031            commandParse(TRUE, // default response?
   1032                         command);
   \                     ??CrossCallReturnLabel_54: (+1)
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x....             B.N      commandParse
   \                     ??emberAfOtaBootloadClusterClientDefaultRespons_0: (+1)
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
   1033          }
   1034          
   1035          // The buffer must point to the start of the image notify command,
   1036          // not the start of the ZCL frame.  It is assumed that the length
   1037          // of the buffer is minimum for image notify command.

   \                                 In section .text, align 2, keep-with-next
   1038          static EmberAfStatus imageNotifyParse(boolean broadcast, 
   1039                                                int8u* buffer, 
   1040                                                int8u index, 
   1041                                                int8u length)
   1042          {
   \                     imageNotifyParse: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x460C             MOV      R4,R1
   1043            int16u manufacturerId;
   1044            int16u imageTypeId;
   1045            EmberAfOtaImageId myId;
   1046            int8u payloadType = emberAfGetInt8u(buffer, index, length);
   1047            int8u queryJitter = emberAfGetInt8u(buffer, index + 1, length);
   \   00000006   0x1911             ADDS     R1,R2,R4
   \   00000008   0x5D15             LDRB     R5,[R2, R4]
   \   0000000A   0x784E             LDRB     R6,[R1, #+1]
   1048            index += 2;
   1049          
   1050            if (!broadcast) {
   \   0000000C   0x.... 0x....      ADR.W    R8,?_41
   \   00000010   0xB088             SUB      SP,SP,#+32
   \   00000012   0x4699             MOV      R9,R3
   \   00000014   0x1C97             ADDS     R7,R2,#+2
   \   00000016   0xB960             CBNZ.N   R0,??imageNotifyParse_0
   1051              // Spec says to always respond to unicasts regardless of the parameters.
   1052              otaPrintln("%p unicast, querying",
   1053                         "Image notify command");
   \   00000018   0x4642             MOV      R2,R8
   \   0000001A   0x.... 0x....      ADR.W    R1,?_40
   \   0000001E   0x.... 0x....      BL       ??Subroutine3_0
   1054              goto sendQuery;
   1055            }
   1056          
   1057            emberAfOtaClientVersionInfoCallback(&myId, NULL);
   1058          
   1059            // We assume that if the message is broadcast then our ZCL
   1060            // code will NOT send the default response.
   1061              
   1062            if (payloadType > IMAGE_NOTIFY_LAST_VALID_TYPE) {
   1063              otaPrintln("%p %p payload type 0x%X", 
   1064                         "Invalid",
   1065                         "Image notify command",
   1066                         payloadType);
   1067              return EMBER_ZCL_STATUS_SUCCESS;
   1068            }
   1069            if (queryJitter < 1 || queryJitter > 100) {
   1070              otaPrintln("%p %p: out of range jitter %d", 
   1071                         "Invalid",
   1072                         "Image notify command",
   1073                         queryJitter);
   1074              return EMBER_ZCL_STATUS_SUCCESS;
   1075            }
   1076            if (length != imageNotifyPayloadLengths[payloadType]) {
   1077              otaPrintln("%p %p: payload length doesn't match type 0x%X (%d < %d)",
   1078                         "Invalid",
   1079                         "Image notify command",
   1080                         payloadType,
   1081                         length,
   1082                         imageNotifyPayloadLengths[payloadType]);
   1083              // Although this truly is an error, we don't send a response because it could
   1084              // be a broadcast.
   1085              return EMBER_ZCL_STATUS_SUCCESS;
   1086            }
   1087            
   1088            if (payloadType >= IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE) {
   1089              manufacturerId = emberAfGetInt16u(buffer, index, length);
   1090              index += 2;
   1091              if (manufacturerId != myId.manufacturerId) {
   1092                otaPrintln("%p %p due to non-matching manufacturer ID",
   1093                           "Ignoring",
   1094                           "Image notify command");
   1095                return EMBER_ZCL_STATUS_SUCCESS;
   1096              }
   1097            }
   1098          
   1099            if (payloadType >= IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE) {
   1100              imageTypeId = emberAfGetInt16u(buffer, index, length);
   1101              index += 2;
   1102              if (imageTypeId != myId.imageTypeId) {
   1103                otaPrintln("%p %p due to non-matching image type ID",
   1104                           "Ignoring",
   1105                           "Image notify command");
   1106                return EMBER_ZCL_STATUS_SUCCESS;
   1107              }
   1108            }
   1109          
   1110            if (payloadType >= IMAGE_NOTIFY_FULL_VERSION_TYPE) {
   1111              // Could add some additional checking about the minimum allowed version
   1112              // number, but it can still be caught after the download.
   1113              int32u version = emberAfGetInt32u(buffer, index, length);
   1114              index += 4;
   1115              if (version == myId.firmwareVersion) {
   1116                // Spec. says that if the firmware version matches, we should ignore.
   1117                // A matching version number would be a re-install, which can only
   1118                // be done via image notify by a unicast.  The server can force
   1119                // a mass upgrade or downgrade by sending out a different version
   1120                // than what devices have.
   1121                otaPrintln("%p %p due to matching firmware version",
   1122                           "Ignoring",
   1123                           "Image notify command");
   1124                return EMBER_ZCL_STATUS_SUCCESS;
   1125              }
   1126            }
   1127          
   1128            // Check QueryJitter value.  For QueryJitter value less than a 'must response'
   1129            // value (value of 100), we need to introduce jitter in our reply by picking
   1130            // a random number between 1 and 100.  We only send reply if the value picked
   1131            // is less than or equal to the QueryJitter value.
   1132            if (queryJitter < 100) {
   1133              int8u random = (((int8u)halCommonGetRandom())%100) + 1;
   1134              if(random > queryJitter) {
   1135                otaPrintln("%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)",
   1136                           "Ignoring",
   1137                           "Image notify command",
   1138                           queryJitter, 
   1139                           random);
   1140                return EMBER_ZCL_STATUS_SUCCESS;
   1141              }
   1142            }
   1143          
   1144           sendQuery:
   1145            // By saying "timeout reached" we want to indicate that a new query should kick off
   1146            // immediately.
   1147            queryNextImage(SEND_QUERY_NOW,
   1148                           FALSE);  // query error occurred?
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       queryNextImage
   1149            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageNotifyParse_1: (+1)
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xB008             ADD      SP,SP,#+32
   \   0000002E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??imageNotifyParse_0: (+1)
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xA803             ADD      R0,SP,#+12
   \   00000036   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   \   0000003A   0x2D04             CMP      R5,#+4
   \   0000003C   0x.... 0x....      ADR.W    R2,?_43
   \   00000040   0xDB06             BLT.N    ??imageNotifyParse_2
   \   00000042   0x9500             STR      R5,[SP, #+0]
   \   00000044   0x4643             MOV      R3,R8
   \   00000046   0x.... 0x....      ADR.W    R1,?_42
   \                     ??imageNotifyParse_3: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_63: (+1)
   \   0000004E   0xE7EC             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_2: (+1)
   \   00000050   0xB10E             CBZ.N    R6,??imageNotifyParse_4
   \   00000052   0x2E65             CMP      R6,#+101
   \   00000054   0xDB04             BLT.N    ??imageNotifyParse_5
   \                     ??imageNotifyParse_4: (+1)
   \   00000056   0x9600             STR      R6,[SP, #+0]
   \   00000058   0x4643             MOV      R3,R8
   \   0000005A   0x.... 0x....      ADR.W    R1,?_44
   \   0000005E   0xE7F4             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_5: (+1)
   \   00000060   0x.... 0x....      ADR.W    R0,imageNotifyPayloadLengths
   \   00000064   0x5C28             LDRB     R0,[R5, R0]
   \   00000066   0x4581             CMP      R9,R0
   \   00000068   0xD007             BEQ.N    ??imageNotifyParse_6
   \   0000006A   0x9002             STR      R0,[SP, #+8]
   \   0000006C   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   00000070   0x9500             STR      R5,[SP, #+0]
   \   00000072   0x4643             MOV      R3,R8
   \   00000074   0x.... 0x....      ADR.W    R1,?_45
   \   00000078   0xE7E7             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_6: (+1)
   \   0000007A   0x.... 0x....      ADR.W    R10,?_47
   \   0000007E   0xB16D             CBZ.N    R5,??imageNotifyParse_7
   \   00000080   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_71: (+1)
   \   00000084   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   00000088   0x1CBF             ADDS     R7,R7,#+2
   \   0000008A   0x4288             CMP      R0,R1
   \   0000008C   0xD006             BEQ.N    ??imageNotifyParse_7
   \   0000008E   0x4643             MOV      R3,R8
   \   00000090   0x4652             MOV      R2,R10
   \   00000092   0x.... 0x....      ADR.W    R1,?_46
   \                     ??imageNotifyParse_8: (+1)
   \   00000096   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_53: (+1)
   \   0000009A   0xE7C6             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_7: (+1)
   \   0000009C   0x2D02             CMP      R5,#+2
   \   0000009E   0xDB0B             BLT.N    ??imageNotifyParse_9
   \   000000A0   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_70: (+1)
   \   000000A4   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   000000A8   0x1CBF             ADDS     R7,R7,#+2
   \   000000AA   0x4288             CMP      R0,R1
   \   000000AC   0xD004             BEQ.N    ??imageNotifyParse_9
   \   000000AE   0x4643             MOV      R3,R8
   \   000000B0   0x4652             MOV      R2,R10
   \   000000B2   0x.... 0x....      ADR.W    R1,?_48
   \   000000B6   0xE7EE             B.N      ??imageNotifyParse_8
   \                     ??imageNotifyParse_9: (+1)
   \   000000B8   0x2D03             CMP      R5,#+3
   \   000000BA   0xDB0B             BLT.N    ??imageNotifyParse_10
   \   000000BC   0x464A             MOV      R2,R9
   \   000000BE   0xB2F9             UXTB     R1,R7
   \   000000C0   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_66: (+1)
   \   000000C4   0x9904             LDR      R1,[SP, #+16]
   \   000000C6   0x4288             CMP      R0,R1
   \   000000C8   0xD104             BNE.N    ??imageNotifyParse_10
   \   000000CA   0x4643             MOV      R3,R8
   \   000000CC   0x4652             MOV      R2,R10
   \   000000CE   0x.... 0x....      ADR.W    R1,?_49
   \   000000D2   0xE7E0             B.N      ??imageNotifyParse_8
   \                     ??imageNotifyParse_10: (+1)
   \   000000D4   0x2E64             CMP      R6,#+100
   \   000000D6   0xDAA4             BGE.N    ??CrossCallReturnLabel_34
   \   000000D8   0x.... 0x....      BL       halCommonGetRandom
   \   000000DC   0xB2C0             UXTB     R0,R0
   \   000000DE   0x2164             MOVS     R1,#+100
   \   000000E0   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   000000E4   0x2264             MOVS     R2,#+100
   \   000000E6   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0xB2C0             UXTB     R0,R0
   \   000000EE   0x4286             CMP      R6,R0
   \   000000F0   0xDA97             BGE.N    ??CrossCallReturnLabel_34
   \   000000F2   0x9001             STR      R0,[SP, #+4]
   \   000000F4   0x9600             STR      R6,[SP, #+0]
   \   000000F6   0x4643             MOV      R3,R8
   \   000000F8   0x4652             MOV      R2,R10
   \   000000FA   0x.... 0x....      ADR.W    R1,?_50
   \   000000FE   0xE7A4             B.N      ??imageNotifyParse_3
   1150          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0xB2FF             UXTB     R7,R7
   \   00000002   0x464A             MOV      R2,R9
   \   00000004   0x4639             MOV      R1,R7
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x4631             MOV      R1,R6
   \                     ??Subroutine6_0: (+1)
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      emberAfGetInt32u
   1151          
   1152          static void startDownload(int32u newVersion)
   1153          {
   1154            EmberAfOtaStorageStatus status;
   1155            otaPrintln("Starting download, Version 0x%4X",
   1156                       newVersion);
   1157            emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
   1158            updateDownloadFileVersion(newVersion);
   1159            updateCurrentOffset(0);
   1160            updateMinBlockRequestPeriodAttribute(0);
   1161          
   1162            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   1163          
   1164            errors = 0;
   1165          
   1166            status = emberAfOtaStorageClearTempDataCallback();
   1167          
   1168            if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   1169          
   1170              // For the "OTA Storage Simple" plugin, there is only one image.
   1171              // A call to clear the temp data (above) will also wipe out a fully
   1172              // downloaded image.  So we don't actually have to call 
   1173              // emberAfOtaStorageDeleteImageCallback() as well.  We only worry
   1174              // about a result of EMBER_AF_OPERATION_IN_PROGRESS returned from the first
   1175              // delete.
   1176          
   1177              // For the "OTA POSIX Filesystem" plugin there may be multiple
   1178              // images, so we may have to delete the temp data AND another image
   1179              // on disk.  However we assume that delete operations are extremely
   1180              // fast and thus won't return EMBER_AF_OPERATION_IN_PROGRESS.
   1181          
   1182              EmberAfOtaImageId oldImageId = emberAfOtaStorageSearchCallback(currentDownloadFile.manufacturerId,
   1183                                                                             currentDownloadFile.imageTypeId,
   1184                                                                             (hardwareVersion == 0xFFFF
   1185                                                                              ? NULL
   1186                                                                              : &hardwareVersion));
   1187          
   1188              if (emberAfIsOtaImageIdValid(&oldImageId)) { 
   1189                // Wipe out any existing file matching the same values as the one we 
   1190                // are going to download.
   1191          
   1192                emberAfOtaStorageDeleteImageCallback(&oldImageId);
   1193              }
   1194              continueImageDownload();
   1195          
   1196            } else if (status == EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
   1197              // Disable the timer since we are waiting for the erase event to complete
   1198              // and execute our callback, not the timer to expire.
   1199              emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   1200          
   1201            } else {
   1202              otaPrintln("Error: Failed to erase old temp data.");
   1203              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   1204            }
   1205          }
   1206          
   1207          // We expect that the minimum length for this command has already been checked.

   \                                 In section .text, align 2, keep-with-next
   1208          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
   1209                                                           int8u index, 
   1210                                                           int8u length)
   1211          {
   \                     queryNextImageResponseParse: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0xB08C             SUB      SP,SP,#+48
   1212            int8u status;
   1213            EmberAfStatus zclStatus;
   1214            EmberAfOtaImageId imageId;
   1215            boolean isError = FALSE;
   1216          
   1217            status = emberAfGetInt8u(buffer, index, length);
   \   00000008   0x5D4B             LDRB     R3,[R1, R5]
   1218            index++;
   1219            
   1220            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000000A   0x.... 0x....      ADR.W    R4,?_34
   \   0000000E   0x4690             MOV      R8,R2
   \   00000010   0x2700             MOVS     R7,#+0
   \   00000012   0x1C4E             ADDS     R6,R1,#+1
   \   00000014   0xB16B             CBZ.N    R3,??queryNextImageResponseParse_0
   1221              otaPrintln("%p returned 0x%X.  No new image to download.", 
   1222                         "Query next image response",
   1223                         status);
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0x.... 0x....      ADR.W    R1,?_53
   \   0000001C   0x.... 0x....      BL       ?Subroutine4
   1224              zclStatus = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_52: (+1)
   \   00000020   0x2400             MOVS     R4,#+0
   1225              goto queryNextImageResponseDone;
   1226            }
   1227            if (length < QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH) {
   1228              otaPrintln("%p too short (%d < %d)",
   1229                         "Query next image response",
   1230                         length,
   1231                         QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH);
   1232              zclStatus = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1233              isError = TRUE;
   1234              goto queryNextImageResponseDone;
   1235            }
   1236            otaPrintln("%p: New image is available for download.",
   1237                       "Query next image response");
   1238            
   1239            index += emAfOtaParseImageIdFromMessage(&imageId,
   1240                                                    &(buffer[index]),
   1241                                                    length - index);
   1242            totalImageSize = emberAfGetInt32u(buffer, index, length);
   1243          
   1244            if (imageId.manufacturerId != currentDownloadFile.manufacturerId
   1245                || imageId.imageTypeId != currentDownloadFile.imageTypeId
   1246                || totalImageSize == 0) {
   1247              otaPrintln("%p is not using my image info.",
   1248                         "Query next image response");
   1249              isError = TRUE;
   1250              zclStatus = EMBER_ZCL_STATUS_INVALID_FIELD;
   1251              goto queryNextImageResponseDone;
   1252          
   1253            } else if (totalImageSize > emberAfOtaStorageDriverMaxDownloadSizeCallback()) {
   1254              otaPrintln("ERROR: Next Image is too big to store (0x%4X > 0x%4X)",
   1255                         totalImageSize,
   1256                         emberAfOtaStorageDriverMaxDownloadSizeCallback());
   1257              isError = TRUE;
   1258              zclStatus = EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   1259              goto queryNextImageResponseDone;
   1260            } else {
   1261              startDownload(imageId.firmwareVersion);
   1262              return EMBER_ZCL_STATUS_SUCCESS;
   1263            }
   1264          
   1265           queryNextImageResponseDone:
   1266            queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1267                           isError);
   \                     ??queryNextImageResponseParse_1: (+1)
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       queryNextImage
   1268            return zclStatus;
   \   0000002A   0x4620             MOV      R0,R4
   \                     ??queryNextImageResponseParse_2: (+1)
   \   0000002C   0xB00C             ADD      SP,SP,#+48
   \   0000002E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??queryNextImageResponseParse_0: (+1)
   \   00000032   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000036   0xDA0A             BGE.N    ??queryNextImageResponseParse_3
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x4643             MOV      R3,R8
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x.... 0x....      ADR.W    R1,?_54
   \   00000044   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_62: (+1)
   \   00000048   0x2480             MOVS     R4,#+128
   \   0000004A   0x2701             MOVS     R7,#+1
   \   0000004C   0xE7E9             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_3: (+1)
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x.... 0x....      ADR.W    R1,?_55
   \   00000054   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_33: (+1)
   \   00000058   0xEBA8 0x0206      SUB      R2,R8,R6
   \   0000005C   0xB2F6             UXTB     R6,R6
   \   0000005E   0xB2D2             UXTB     R2,R2
   \   00000060   0x1971             ADDS     R1,R6,R5
   \   00000062   0xA804             ADD      R0,SP,#+16
   \   00000064   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   00000068   0x1981             ADDS     R1,R0,R6
   \   0000006A   0x4642             MOV      R2,R8
   \   0000006C   0xB2C9             UXTB     R1,R1
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       emberAfGetInt32u
   \   00000074   0x....             LDR.N    R5,??DataTable133
   \   00000076   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000007A   0x892A             LDRH     R2,[R5, #+8]
   \   0000007C   0x64A8             STR      R0,[R5, #+72]
   \   0000007E   0x4291             CMP      R1,R2
   \   00000080   0xBF02             ITTT     EQ 
   \   00000082   0xF8BD 0x1012      LDRHEQ   R1,[SP, #+18]
   \   00000086   0x896A             LDRHEQ   R2,[R5, #+10]
   \   00000088   0x4291             CMPEQ    R1,R2
   \   0000008A   0xD100             BNE.N    ??queryNextImageResponseParse_4
   \   0000008C   0xB938             CBNZ.N   R0,??queryNextImageResponseParse_5
   \                     ??queryNextImageResponseParse_4: (+1)
   \   0000008E   0x4622             MOV      R2,R4
   \   00000090   0x.... 0x....      ADR.W    R1,?_56
   \   00000094   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_32: (+1)
   \   00000098   0x2701             MOVS     R7,#+1
   \   0000009A   0x2485             MOVS     R4,#+133
   \   0000009C   0xE7C1             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_5: (+1)
   \   0000009E   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000A2   0x6CA9             LDR      R1,[R5, #+72]
   \   000000A4   0x4288             CMP      R0,R1
   \   000000A6   0xD20A             BCS.N    ??queryNextImageResponseParse_6
   \   000000A8   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000AC   0x4603             MOV      R3,R0
   \   000000AE   0x6CAA             LDR      R2,[R5, #+72]
   \   000000B0   0x.... 0x....      ADR.W    R1,?_57
   \   000000B4   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_51: (+1)
   \   000000B8   0x2701             MOVS     R7,#+1
   \   000000BA   0x2489             MOVS     R4,#+137
   \   000000BC   0xE7B1             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_6: (+1)
   \   000000BE   0x9C05             LDR      R4,[SP, #+20]
   \   000000C0   0x.... 0x....      ADR.W    R1,?_51
   \   000000C4   0x4622             MOV      R2,R4
   \   000000C6   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_31: (+1)
   \   000000CA   0x6CA9             LDR      R1,[R5, #+72]
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
   \   000000D2   0x4620             MOV      R0,R4
   \   000000D4   0x.... 0x....      BL       updateDownloadFileVersion
   \   000000D8   0x4638             MOV      R0,R7
   \   000000DA   0x.... 0x....      BL       updateCurrentOffset
   \   000000DE   0x83AF             STRH     R7,[R5, #+28]
   \   000000E0   0x2006             MOVS     R0,#+6
   \   000000E2   0x.... 0x....      BL       recordUpgradeStatus
   \   000000E6   0x70EF             STRB     R7,[R5, #+3]
   \   000000E8   0x.... 0x....      BL       emberAfOtaStorageClearTempDataCallback
   \   000000EC   0xB9D8             CBNZ.N   R0,??queryNextImageResponseParse_7
   \   000000EE   0x8B68             LDRH     R0,[R5, #+26]
   \   000000F0   0x896A             LDRH     R2,[R5, #+10]
   \   000000F2   0xF64F 0x71FF      MOVW     R1,#+65535
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0x8929             LDRH     R1,[R5, #+8]
   \   000000FA   0xBF0C             ITE      EQ 
   \   000000FC   0x2300             MOVEQ    R3,#+0
   \   000000FE   0xF105 0x031A      ADDNE    R3,R5,#+26
   \   00000102   0xA808             ADD      R0,SP,#+32
   \   00000104   0x.... 0x....      BL       emberAfOtaStorageSearchCallback
   \   00000108   0xA800             ADD      R0,SP,#+0
   \   0000010A   0xA908             ADD      R1,SP,#+32
   \   0000010C   0x2210             MOVS     R2,#+16
   \   0000010E   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000112   0xA800             ADD      R0,SP,#+0
   \   00000114   0x.... 0x....      BL       emberAfIsOtaImageIdValid
   \   00000118   0xB110             CBZ.N    R0,??queryNextImageResponseParse_8
   \   0000011A   0xA800             ADD      R0,SP,#+0
   \   0000011C   0x.... 0x....      BL       emberAfOtaStorageDeleteImageCallback
   \                     ??queryNextImageResponseParse_8: (+1)
   \   00000120   0x.... 0x....      BL       continueImageDownload
   \   00000124   0xE00D             B.N      ??queryNextImageResponseParse_9
   \                     ??queryNextImageResponseParse_7: (+1)
   \   00000126   0x2804             CMP      R0,#+4
   \   00000128   0xD104             BNE.N    ??queryNextImageResponseParse_10
   \   0000012A   0x7868             LDRB     R0,[R5, #+1]
   \   0000012C   0x2119             MOVS     R1,#+25
   \   0000012E   0x.... 0x....      BL       emberAfDeactivateClientTick
   \   00000132   0xE006             B.N      ??queryNextImageResponseParse_9
   \                     ??queryNextImageResponseParse_10: (+1)
   \   00000134   0x.... 0x....      ADR.W    R1,?_52
   \   00000138   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_17: (+1)
   \   0000013C   0x2004             MOVS     R0,#+4
   \   0000013E   0x.... 0x....      BL       downloadAndVerifyFinish
   \                     ??queryNextImageResponseParse_9: (+1)
   \   00000142   0x2000             MOVS     R0,#+0
   \   00000144   0xE772             B.N      ??queryNextImageResponseParse_2
   1269          }
   1270          

   \                                 In section .text, align 2, keep-with-next
   1271          static void sendMessage(int8u cmdId, int8u upgradeEndStatus, int32u timer)
   1272          {
   \                     sendMessage: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   1273            int8u fieldControl = 0;
   1274            EmberAfProfileId appProfile;
   1275          
   1276            // Figure out the right app profile ID based on the endpoint descriptor
   1277            appProfile = emberAfProfileIdFromIndex(emberAfIndexFromEndpoint(myEndpoint));
   \   00000004   0x....             LDR.N    R5,??DataTable133
   \   00000006   0x.... 0x....      LDR.W    R6,??DataTable146_2
   \   0000000A   0x4607             MOV      R7,R0
   \   0000000C   0x7868             LDRB     R0,[R5, #+1]
   \   0000000E   0x468A             MOV      R10,R1
   \   00000010   0x4690             MOV      R8,R2
   \   00000012   0x.... 0x....      BL       emberAfIndexFromEndpoint
   1278          
   1279            // Basic ZCL header information
   1280            appResponseLength = 0;
   \   00000016   0x.... 0x....      LDR.W    R2,??DataTable146_3
   1281            emberAfResponseApsFrame.profileId = appProfile;
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable139_1
   \   0000001E   0x2400             MOVS     R4,#+0
   \   00000020   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   00000024   0x8014             STRH     R4,[R2, #+0]
   1282            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   1283            emberAfPutInt8uInResp(ZCL_CLUSTER_SPECIFIC_COMMAND
   1284                                  | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER);
   \   00000026   0x46B9             MOV      R9,R7
   \   00000028   0x8840             LDRH     R0,[R0, #+2]
   \   0000002A   0x8030             STRH     R0,[R6, #+0]
   \   0000002C   0x7868             LDRB     R0,[R5, #+1]
   \   0000002E   0x7130             STRB     R0,[R6, #+4]
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       emberAfPutInt8uInResp
   1285            emberAfPutInt8uInResp(emberAfNextSequence());
   \   00000036   0x.... 0x....      BL       emberAfNextSequence
   \   0000003A   0x.... 0x....      BL       emberAfPutInt8uInResp
   1286            emberAfPutInt8uInResp(cmdId);
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       emberAfPutInt8uInResp
   1287            waitingForResponse = TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   1288          
   1289            switch(cmdId) {
   \   00000046   0x2F01             CMP      R7,#+1
   \   00000048   0x7128             STRB     R0,[R5, #+4]
   \   0000004A   0xD008             BEQ.N    ??sendMessage_0
   \   0000004C   0x2F03             CMP      R7,#+3
   \   0000004E   0xBF18             IT       NE 
   \   00000050   0x2F04             CMPNE    R7,#+4
   \   00000052   0xD02E             BEQ.N    ??sendMessage_1
   \   00000054   0x2F06             CMP      R7,#+6
   \   00000056   0xD045             BEQ.N    ??sendMessage_2
   \   00000058   0x2F08             CMP      R7,#+8
   \   0000005A   0xD051             BEQ.N    ??sendMessage_3
   \   0000005C   0xE05B             B.N      ??sendMessage_4
   1290              case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
   1291                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \                     ??sendMessage_0: (+1)
   \   0000005E   0x8B68             LDRH     R0,[R5, #+26]
   \   00000060   0xF64F 0x77FF      MOVW     R7,#+65535
   \   00000064   0x42B8             CMP      R0,R7
   \   00000066   0xBF18             IT       NE 
   \   00000068   0x2401             MOVNE    R4,#+1
   1292                  fieldControl |= OTA_HW_VERSION_BIT_MASK;
   1293                }
   1294                emberAfPutInt8uInResp(fieldControl);
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       emberAfPutInt8uInResp
   1295                putImageInfoInMessage();
   \   00000070   0x.... 0x....      BL       putImageInfoInMessage
   1296                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \   00000074   0x8B68             LDRH     R0,[R5, #+26]
   \   00000076   0x42B8             CMP      R0,R7
   \   00000078   0xD001             BEQ.N    ??sendMessage_5
   1297                  emberAfPutInt16uInResp(hardwareVersion);
   \                     ??sendMessage_6: (+1)
   \   0000007A   0x.... 0x....      BL       emberAfPutInt16uInResp
   1298                }
   1299              }
   1300              break;
   1301          
   1302              case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
   1303              case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
   1304                emberAfPutInt8uInResp(fieldControl);
   1305                putImageInfoInMessage();
   1306                emberAfPutInt32uInResp(getCurrentOffset());
   1307                emberAfPutInt8uInResp(usePageRequest
   1308                                      ? EM_AF_PAGE_REQUEST_BLOCK_SIZE
   1309                                      : MAX_CLIENT_DATA_SIZE);
   1310          
   1311                if (cmdId == ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID) {
   1312                  emberAfPutInt16uInResp(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_PAGE_REQUEST_SIZE);        
   1313                  emberAfPutInt16uInResp(EMBER_AF_OTA_CLIENT_PAGE_REQUEST_SPACING_MS);
   1314                } else {
   1315          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
   1316                  emberAfPutInt16uInResp(minBlockRequestPeriod);
   1317          #endif
   1318                }
   1319                break;
   1320          
   1321              case ZCL_UPGRADE_END_REQUEST_COMMAND_ID:
   1322                otaPrintln("Sending Upgrade End request.");
   1323                emberAfCoreFlush();
   1324                emberAfPutInt8uInResp(upgradeEndStatus);
   1325                putImageInfoInMessage();
   1326                if (upgradeEndStatus != 0) {
   1327                  waitingForResponse = FALSE;
   1328                }
   1329                break;
   1330          
   1331              case ZCL_QUERY_SPECIFIC_FILE_REQUEST_COMMAND_ID: {
   1332                EmberEUI64 myEui64;
   1333                emberAfGetEui64(myEui64);
   1334                emberAfPutBlockInResp(myEui64, EUI64_SIZE);
   1335                putImageInfoInMessage();
   1336                emberAfPutInt16uInResp(ZIGBEE_PRO_STACK_VERSION);
   1337                }
   1338                break;
   1339          
   1340              default:
   1341                otaPrintln("%p: invalid cmdId 0x%x", "Error", cmdId);
   1342                return;
   1343            } //end switch statement
   1344          
   1345            emberAfResponseApsFrame.clusterId = ZCL_OTA_BOOTLOAD_CLUSTER_ID;
   \                     ??sendMessage_5: (+1)
   \   0000007E   0x2019             MOVS     R0,#+25
   \   00000080   0x8070             STRH     R0,[R6, #+2]
   1346            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   \   00000082   0x7868             LDRB     R0,[R5, #+1]
   \   00000084   0x7130             STRB     R0,[R6, #+4]
   1347            emberAfResponseApsFrame.destinationEndpoint = serverEndpoint;
   \   00000086   0x78A8             LDRB     R0,[R5, #+2]
   \   00000088   0x7170             STRB     R0,[R6, #+5]
   1348            emberAfResponseApsFrame.options |= EMBER_APS_OPTION_RETRY;
   \   0000008A   0x88F0             LDRH     R0,[R6, #+6]
   \   0000008C   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000090   0x80F0             STRH     R0,[R6, #+6]
   1349            {
   1350              EmberStatus status = emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, serverNodeId);
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x8B29             LDRH     R1,[R5, #+24]
   \   00000096   0x.... 0x....      BL       emberAfSendCommandUnicast
   \   0000009A   0x0003             MOVS     R3,R0
   1351              if (status != EMBER_SUCCESS) {
   \   0000009C   0xD004             BEQ.N    ??CrossCallReturnLabel_50
   1352                otaPrintln("Error:  Failed to send OTA command 0x%X, status: 0x%X", 
   1353                           cmdId, status);
   \   0000009E   0x464A             MOV      R2,R9
   \   000000A0   0x.... 0x....      ADR.W    R1,?_60
   \   000000A4   0x.... 0x....      BL       ?Subroutine4
   1354              }
   1355            }
   1356            setTimer(timer);
   \                     ??CrossCallReturnLabel_50: (+1)
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       setTimer
   1357          }
   \                     ??sendMessage_7: (+1)
   \   000000AE   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
   \                     ??sendMessage_1: (+1)
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000B8   0x.... 0x....      BL       putImageInfoInMessage
   \   000000BC   0x.... 0x....      BL       getCurrentOffset
   \   000000C0   0x.... 0x....      BL       emberAfPutInt32uInResp
   \   000000C4   0x7968             LDRB     R0,[R5, #+5]
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xBF14             ITE      NE 
   \   000000CA   0x2020             MOVNE    R0,#+32
   \   000000CC   0x203F             MOVEQ    R0,#+63
   \   000000CE   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000D2   0xF1B9 0x0F04      CMP      R9,#+4
   \   000000D6   0xD1D2             BNE.N    ??sendMessage_5
   \   000000D8   0xF44F 0x6080      MOV      R0,#+1024
   \   000000DC   0x.... 0x....      BL       emberAfPutInt16uInResp
   \   000000E0   0x2032             MOVS     R0,#+50
   \   000000E2   0xE7CA             B.N      ??sendMessage_6
   \                     ??sendMessage_2: (+1)
   \   000000E4   0x.... 0x....      ADR.W    R1,?_58
   \   000000E8   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000EC   0x4650             MOV      R0,R10
   \   000000EE   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000F2   0x.... 0x....      BL       putImageInfoInMessage
   \   000000F6   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000FA   0xD0C0             BEQ.N    ??sendMessage_5
   \   000000FC   0x712C             STRB     R4,[R5, #+4]
   \   000000FE   0xE7BE             B.N      ??sendMessage_5
   \                     ??sendMessage_3: (+1)
   \   00000100   0xA800             ADD      R0,SP,#+0
   \   00000102   0x.... 0x....      BL       emberAfGetEui64
   \   00000106   0x2108             MOVS     R1,#+8
   \   00000108   0xA800             ADD      R0,SP,#+0
   \   0000010A   0x.... 0x....      BL       emberAfPutBlockInResp
   \   0000010E   0x.... 0x....      BL       putImageInfoInMessage
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0xE7B1             B.N      ??sendMessage_6
   \                     ??sendMessage_4: (+1)
   \   00000116   0x464B             MOV      R3,R9
   \   00000118   0x.... 0x....      ADR.W    R2,?_38
   \   0000011C   0x.... 0x....      ADR.W    R1,?_59
   \   00000120   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_49: (+1)
   \   00000124   0xE7C3             B.N      ??sendMessage_7
   1358          

   \                                 In section .text, align 2, keep-with-next
   1359          static void queryNextImage(SendNextQueryState sendQuery, 
   1360                                     boolean queryErrorOccurred)
   1361          {
   \                     queryNextImage: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1362            recordUpgradeStatus(BOOTLOAD_STATE_QUERY_NEXT_IMAGE);
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1363          
   1364            if (serverNodeId == EMBER_UNKNOWN_NODE_ID) {
   \   0000000C   0x....             LDR.N    R0,??DataTable137_1
   \   0000000E   0x8B01             LDRH     R1,[R0, #+24]
   \   00000010   0xF64F 0x72FD      MOVW     R2,#+65533
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD104             BNE.N    ??queryNextImage_0
   1365              otaPrintln("Server unknown, falling back to discovery.");
   \   00000018   0x.... 0x....      ADR.W    R1,?_61
   \   0000001C   0x.... 0x....      BL       ?Subroutine2
   1366              restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_15: (+1)
   \   00000020   0xE00B             B.N      ??CrossCallReturnLabel_30
   1367              return;
   1368            }
   1369          
   1370            if (queryErrorOccurred) {
   \                     ??queryNextImage_0: (+1)
   \   00000022   0xB175             CBZ.N    R5,??queryNextImage_1
   1371              errors++;
   \   00000024   0x78C1             LDRB     R1,[R0, #+3]
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0x70C1             STRB     R1,[R0, #+3]
   1372              if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_QUERY_ERROR_THRESHOLD) {
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0x290A             CMP      R1,#+10
   \   0000002E   0xDB08             BLT.N    ??queryNextImage_1
   1373                otaPrintln("Maximum query errors hit (%d), starting search for new OTA server.\n",
   1374                           EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_QUERY_ERROR_THRESHOLD);
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0x.... 0x....      ADR.W    R1,?_62
   \   00000036   0x.... 0x....      BL       ??Subroutine3_0
   1375                restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_30: (+1)
   \   0000003A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003E   0x.... 0x....      B.W      restartServerDiscoveryAfterDelay
   1376                return;
   1377              }
   1378            }
   1379          
   1380            if (sendQuery == SEND_QUERY_NOW) {
   \                     ??queryNextImage_1: (+1)
   \   00000042   0x2C01             CMP      R4,#+1
   \   00000044   0x.... 0x....      LDR.W    R6,??DataTable146_4  ;; 0x493e0
   \   00000048   0xD10D             BNE.N    ??queryNextImage_2
   1381              if (!queryErrorOccurred) {
   \   0000004A   0xB90D             CBNZ.N   R5,??queryNextImage_3
   1382                errors = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x70C1             STRB     R1,[R0, #+3]
   1383              }
   1384          
   1385              // Ask the client what image info to use in the query and
   1386              // subsequent download.
   1387              emberAfOtaClientVersionInfoCallback(&currentDownloadFile, 
   1388                                                  &hardwareVersion);
   \                     ??queryNextImage_3: (+1)
   \   00000050   0xF100 0x011A      ADD      R1,R0,#+26
   \   00000054   0x3008             ADDS     R0,R0,#+8
   \   00000056   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   1389              updateCurrentImageAttributes(&currentDownloadFile);
   1390          
   1391              sendMessage(ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID,
   1392                          0,                            // upgrade end status (ignored)
   1393                          EMBER_AF_OTA_QUERY_DELAY_MS);
   \   0000005A   0x4632             MOV      R2,R6
   \   0000005C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x....             B.N      sendMessage
   1394            } else {
   1395              setTimer(EMBER_AF_OTA_QUERY_DELAY_MS);
   \                     ??queryNextImage_2: (+1)
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006C   0x.... 0x....      B.W      setTimer
   1396            }
   1397          }
   1398          

   \                                 In section .text, align 2, keep-with-next
   1399          static void continueImageDownload(void)
   1400          {
   \                     continueImageDownload: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1401            int8u commandId = ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID;
   1402            int32u timer = EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS;
   1403            boolean send = TRUE;
   1404          
   1405            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   \   00000004   0x2006             MOVS     R0,#+6
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
   1406          
   1407            if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_ERROR_THRESHOLD) {
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable146_5
   \   0000000E   0x78F2             LDRB     R2,[R6, #+3]
   \   00000010   0x2403             MOVS     R4,#+3
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0x2A0A             CMP      R2,#+10
   \   00000016   0xDB07             BLT.N    ??continueImageDownload_0
   1408              otaPrintln("Maximum number of download errors reach (%d), aborting.",
   1409                         errors);
   \   00000018   0x.... 0x....      ADR.W    R1,?_63
   \   0000001C   0x.... 0x....      BL       ??Subroutine3_0
   1410              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \                     ??CrossCallReturnLabel_29: (+1)
   \   00000020   0x2004             MOVS     R0,#+4
   \   00000022   0x.... 0x....      BL       downloadAndVerifyFinish
   1411              return;
   \   00000026   0xBD73             POP      {R0,R1,R4-R6,PC}
   1412            }
   1413          
   1414            if (usePageRequest) {
   \                     ??continueImageDownload_0: (+1)
   \   00000028   0x7970             LDRB     R0,[R6, #+5]
   \   0000002A   0xB1C8             CBZ.N    R0,??continueImageDownload_1
   1415              // Set the current offset for page request
   1416              // or, Get the current offset if retrying image blocks
   1417              EmAfPageRequestClientStatus status = emAfGetCurrentPageRequestStatus();
   1418              if (status == EM_AF_NO_PAGE_REQUEST) {
   \   0000002C   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000030   0xB938             CBNZ.N   R0,??continueImageDownload_2
   1419                timer = emAfInitPageRequestClient(getCurrentOffset(),
   1420                                                  totalImageSize);
   \   00000032   0x.... 0x....      BL       getCurrentOffset
   \   00000036   0x6CB1             LDR      R1,[R6, #+72]
   \   00000038   0x.... 0x....      BL       emAfInitPageRequestClient
   \   0000003C   0x4605             MOV      R5,R0
   1421                commandId = ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID;
   \   0000003E   0x2404             MOVS     R4,#+4
   \   00000040   0xE00E             B.N      ??continueImageDownload_1
   1422              } else {
   1423                int32u offset;
   1424                if (EM_AF_PAGE_REQUEST_ERROR
   1425                    == emAfNextMissedBlockRequestOffset(&offset)) {
   \                     ??continueImageDownload_2: (+1)
   \   00000042   0xA800             ADD      R0,SP,#+0
   \   00000044   0x.... 0x....      BL       emAfNextMissedBlockRequestOffset
   \   00000048   0x28FF             CMP      R0,#+255
   \   0000004A   0xD106             BNE.N    ??continueImageDownload_3
   1426                  // Server is unreachable because page request caused us to get 0
   1427                  // response packets from the server when we should have received
   1428                  // a lot.
   1429                  errors++;
   \   0000004C   0x78F0             LDRB     R0,[R6, #+3]
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x70F0             STRB     R0,[R6, #+3]
   1430                  send = FALSE;
   1431                } else {
   1432                  updateCurrentOffset(offset);
   1433                }
   1434              }
   1435            }
   1436          
   1437            if (send) {
   1438              sendMessage(commandId,
   1439                          0,         // upgrade end status (ignored)
   1440                          timer);
   1441            } else {
   1442              setTimer(timer);
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      BL       setTimer
   \   00000058   0xBD73             POP      {R0,R1,R4-R6,PC}
   1443            }
   \                     ??continueImageDownload_3: (+1)
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x.... 0x....      BL       updateCurrentOffset
   \                     ??continueImageDownload_1: (+1)
   \   00000060   0x462A             MOV      R2,R5
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       sendMessage
   1444          }
   \   0000006A   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   1445          
   1446          // A callback fired by the verification code.

   \                                 In section .text, align 2, keep-with-next
   1447          void emAfOtaVerifyStoredDataFinish(EmberAfImageVerifyStatus status)
   1448          {
   1449            if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \                     emAfOtaVerifyStoredDataFinish: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable137_1
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2907             CMP      R1,#+7
   \   00000006   0xBF08             IT       EQ 
   1450              continueImageVerification(status);
   \   00000008   0x.... 0x....      BEQ.W    continueImageVerification
   1451            }
   1452          }
   \   0000000C   0x4770             BX       LR               ;; return
   1453          

   \                                 In section .text, align 2, keep-with-next
   1454          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result)
   1455          {
   \                     downloadAndVerifyFinish: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1456            static PGM int8u zclStatusFromResult[] = {
   1457              EMBER_ZCL_STATUS_SUCCESS,
   1458              EMBER_ZCL_STATUS_ABORT,
   1459              EMBER_ZCL_STATUS_INVALID_IMAGE,
   1460              EMBER_ZCL_STATUS_ABORT,
   1461              EMBER_ZCL_STATUS_ABORT,
   1462              EMBER_ZCL_STATUS_ABORT,
   1463            };
   1464            int8u zclStatus;
   1465            boolean goAhead;
   1466          
   1467            if (currentBootloadState <= BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \   00000002   0x....             LDR.N    R5,??DataTable137_1
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2806             CMP      R0,#+6
   \   0000000A   0xDA01             BGE.N    ??downloadAndVerifyFinish_0
   1468              // We don't really care about the return code here.  
   1469              // The important thing is that we don't call the client's download
   1470              // complete handler.
   1471              return TRUE;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
   1472            }
   1473          
   1474            goAhead = emberAfOtaClientDownloadCompleteCallback(result,
   1475                                                               &currentDownloadFile);
   1476          
   1477            if (result == EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1478                && !goAhead) {
   \                     ??downloadAndVerifyFinish_0: (+1)
   \   00000010   0xF105 0x0108      ADD      R1,R5,#+8
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberAfOtaClientDownloadCompleteCallback
   \   0000001A   0x4320             ORRS     R0,R0,R4
   \   0000001C   0xD104             BNE.N    ??downloadAndVerifyFinish_1
   1479              otaPrintln("Client verification failed.");
   \   0000001E   0x.... 0x....      ADR.W    R1,?_64
   \   00000022   0x.... 0x....      BL       ?Subroutine2
   1480              result = EMBER_AF_OTA_CLIENT_ABORTED;
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000026   0x2404             MOVS     R4,#+4
   1481            }
   1482            zclStatus = zclStatusFromResult[result];
   \                     ??downloadAndVerifyFinish_1: (+1)
   \   00000028   0x.... 0x....      ADR.W    R1,??zclStatusFromResult
   \   0000002C   0x5C61             LDRB     R1,[R4, R1]
   1483          
   1484            // We could automatically invalidate the image in temporary storage
   1485            // when it is declared a bad image.
   1486            // This can be done by the download complete callback instead.
   1487          
   1488            if (zclStatus == EMBER_ZCL_STATUS_SUCCESS) {
   \   0000002E   0xB919             CBNZ.N   R1,??downloadAndVerifyFinish_2
   1489              askServerToRunUpgrade(START_NEW_TIMER);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       askServerToRunUpgrade
   \   00000036   0xE00D             B.N      ??downloadAndVerifyFinish_3
   1490            } else if (result != EMBER_AF_OTA_SERVER_ABORTED
   1491                       && currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??downloadAndVerifyFinish_2: (+1)
   \   00000038   0x2C03             CMP      R4,#+3
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x7828             LDRBNE   R0,[R5, #+0]
   \   0000003E   0x2805             CMPNE    R0,#+5
   \   00000040   0xD003             BEQ.N    ??downloadAndVerifyFinish_4
   1492              // Report to the server that the download has failed.
   1493              sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1494                          zclStatus,
   1495                          EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \   00000042   0x....             LDR.N    R2,??DataTable137  ;; 0x927c0
   \   00000044   0x2006             MOVS     R0,#+6
   \   00000046   0x.... 0x....      BL       sendMessage
   1496            }
   1497            
   1498            if (zclStatus != EMBER_ZCL_STATUS_SUCCESS) {
   1499              waitingForResponse = FALSE;
   \                     ??downloadAndVerifyFinish_4: (+1)
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x7128             STRB     R0,[R5, #+4]
   1500              queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1501                             FALSE);  // query error?
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x.... 0x....      BL       queryNextImage
   1502            }
   1503            return (result == EMBER_ZCL_STATUS_SUCCESS);
   \                     ??downloadAndVerifyFinish_3: (+1)
   \   00000054   0x1E60             SUBS     R0,R4,#+1
   \   00000056   0x4180             SBCS     R0,R0,R0
   \   00000058   0x0FC0             LSRS     R0,R0,#+31
   \   0000005A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1504          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??zclStatusFromResult:
   \   00000000   0x00 0x95          DC8 0, 149, 150, 149, 149, 149, 0, 0
   \              0x96 0x95    
   \              0x95 0x95    
   \              0x00 0x00    
   1505          

   \                                 In section .text, align 2, keep-with-next
   1506          static void continueImageVerification(EmberAfImageVerifyStatus status)
   1507          {
   \                     continueImageVerification: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB087             SUB      SP,SP,#+28
   1508              int count = 0;
                         ^
Warning[Pe177]: variable "count" was declared but never referenced
   1509          
   1510              recordUpgradeStatus(BOOTLOAD_STATE_VERIFY_IMAGE);
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1511          
   1512              emberAfDebugPrint("custom Verify 0 (%x)\r\n", status);
   \   0000000C   0x462A             MOV      R2,R5
   \   0000000E   0x.... 0x....      ADR.W    R1,?_65
   \   00000012   0x.... 0x....      LDR.W    R4,??DataTable146_5
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x.... 0x....      BL       emberAfPrint
   1513          
   1514            if (status == EMBER_AF_IMAGE_UNKNOWN) {
   \   0000001C   0x2D05             CMP      R5,#+5
   \   0000001E   0xD102             BNE.N    ??continueImageVerification_0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x71A0             STRB     R0,[R4, #+6]
   \   00000024   0xE006             B.N      ??continueImageVerification_1
   1515              customVerifyStatus = NO_CUSTOM_VERIFY;
   1516          
   1517            } else if (status == EMBER_AF_IMAGE_GOOD) {
   \                     ??continueImageVerification_0: (+1)
   \   00000026   0xB91D             CBNZ.N   R5,??continueImageVerification_2
   1518              // This is only called with status == GOOD when signature
   1519              // verification has completed.  It is not called when
   1520              // custom verification is done.
   1521              customVerifyStatus = NEW_CUSTOM_VERIFY;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x71A0             STRB     R0,[R4, #+6]
   1522              status = EMBER_AF_IMAGE_VERIFY_IN_PROGRESS;
   \   0000002C   0x2502             MOVS     R5,#+2
   \   0000002E   0xE001             B.N      ??continueImageVerification_1
   1523            }
   \                     ??continueImageVerification_2: (+1)
   \   00000030   0x2D02             CMP      R5,#+2
   \   00000032   0xD164             BNE.N    ??CrossCallReturnLabel_61
   1524          
   1525            if (status == EMBER_AF_IMAGE_UNKNOWN
   1526                || status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   1527              int32u offset;
   1528              int32u totalSize;
   1529              EmberAfOtaImageId id;
   1530          
   1531              // First a basic sanity check of the image to insure
   1532              // the file has completely downloaded and the file format
   1533              // is correct.
   1534              if (status == EMBER_AF_IMAGE_UNKNOWN
   1535                  && (EMBER_AF_OTA_STORAGE_SUCCESS
   1536                      != emberAfOtaStorageCheckTempDataCallback(&offset,
   1537                                                                &totalSize,
   1538                                                                &id))) {
   \                     ??continueImageVerification_1: (+1)
   \   00000034   0x2D05             CMP      R5,#+5
   \   00000036   0xD107             BNE.N    ??continueImageVerification_3
   \   00000038   0xAA03             ADD      R2,SP,#+12
   \   0000003A   0xA901             ADD      R1,SP,#+4
   \   0000003C   0xA802             ADD      R0,SP,#+8
   \   0000003E   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
   \   00000042   0xB108             CBZ.N    R0,??continueImageVerification_3
   1539                status = EMBER_AF_IMAGE_VERIFY_ERROR;
   \   00000044   0x2504             MOVS     R5,#+4
   1540          //      otaPrintln("emberAfOtaStorageCheckTempDataCallback() failed.");
   1541                goto imageVerifyDone;
   \   00000046   0xE05A             B.N      ??CrossCallReturnLabel_61
   1542              }
   1543              
   1544              emberAfDebugPrint("custom Verify 1 (%x)\r\n", status);
   \                     ??continueImageVerification_3: (+1)
   \   00000048   0x462A             MOV      R2,R5
   \   0000004A   0x.... 0x....      ADR.W    R1,?_66
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x.... 0x....      BL       emberAfPrint
   1545          
   1546              if (customVerifyStatus != NO_CUSTOM_VERIFY) {
   \   00000054   0x79A0             LDRB     R0,[R4, #+6]
   \   00000056   0xB170             CBZ.N    R0,??continueImageVerification_4
   1547                status = emberAfOtaClientCustomVerifyCallback((customVerifyStatus 
   1548                                                               == NEW_CUSTOM_VERIFY),
   1549                                                              &currentDownloadFile);
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xBF18             IT       NE 
   \   0000005C   0x2000             MOVNE    R0,#+0
   \   0000005E   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000062   0x.... 0x....      BL       emberAfOtaClientCustomVerifyCallback
   \   00000066   0x4605             MOV      R5,R0
   1550                  emberAfDebugPrint("custom Verify 2\r\n");
   \   00000068   0x.... 0x....      ADR.W    R1,?_67
   \   0000006C   0x.... 0x....      BL       ?Subroutine1
   1551                customVerifyStatus = CUSTOM_VERIFY_IN_PROGRESS;
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0x71A0             STRB     R0,[R4, #+6]
   \   00000074   0xE009             B.N      ??continueImageVerification_5
   1552              } else {
   1553                status = emAfOtaImageSignatureVerify(MAX_DIGEST_CALCULATIONS_PER_CALL,
   1554                                                     &currentDownloadFile,
   1555                                                     (status == EMBER_AF_IMAGE_UNKNOWN
   1556                                                      ? EMBER_AF_NEW_IMAGE_VERIFICATION
   1557                                                      : EMBER_AF_CONTINUE_IMAGE_VERIFY));
   \                     ??continueImageVerification_4: (+1)
   \   00000076   0x2D05             CMP      R5,#+5
   \   00000078   0xBF0C             ITE      EQ 
   \   0000007A   0x2201             MOVEQ    R2,#+1
   \   0000007C   0x2200             MOVNE    R2,#+0
   \   0000007E   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000082   0x2005             MOVS     R0,#+5
   \   00000084   0x.... 0x....      BL       emAfOtaImageSignatureVerify
   \   00000088   0x4605             MOV      R5,R0
   1558              }
   1559              emberAfDebugPrint("custom Verify 3\r\n");
   \                     ??continueImageVerification_5: (+1)
   \   0000008A   0x.... 0x....      ADR.W    R1,?_68
   \   0000008E   0x.... 0x....      BL       ?Subroutine1
   1560          
   1561              if (status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000092   0x2D02             CMP      R5,#+2
   \   00000094   0xD105             BNE.N    ??continueImageVerification_6
   1562                setTimer(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_VERIFY_DELAY_MS);
   \   00000096   0x200A             MOVS     R0,#+10
   \   00000098   0x.... 0x....      BL       setTimer
   1563                  emberAfDebugPrint("custom Verify 4\r\n");
   \   0000009C   0x.... 0x....      ADR.W    R1,?_69
   \   000000A0   0xE039             B.N      ??continueImageVerification_7
   1564                return;
   1565              } else if (status == EMBER_AF_IMAGE_VERIFY_WAIT) {
   \                     ??continueImageVerification_6: (+1)
   \   000000A2   0x2D03             CMP      R5,#+3
   \   000000A4   0xD105             BNE.N    ??continueImageVerification_8
   1566                  emberAfDebugPrint("custom Verify 5\r\n");
   \   000000A6   0x.... 0x....      ADR.W    R1,?_70
   \   000000AA   0x.... 0x....      BL       ?Subroutine1
   1567                setTimer(0);
   \                     ??CrossCallReturnLabel_4: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xE00C             B.N      ??continueImageVerification_9
   1568                return;
   1569              } else if (status == EMBER_AF_NO_IMAGE_VERIFY_SUPPORT) {
   \                     ??continueImageVerification_8: (+1)
   \   000000B2   0x2D06             CMP      R5,#+6
   \   000000B4   0xD10D             BNE.N    ??continueImageVerification_10
   1570                  emberAfDebugPrint("custom Verify 6\r\n");
   \   000000B6   0x.... 0x....      ADR.W    R1,?_71
   \   000000BA   0x.... 0x....      BL       ?Subroutine1
   1571                otaPrintln("No signature verification support, assuming image is okay.");
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000BE   0x.... 0x....      ADR.W    R1,?_72
   \   000000C2   0x.... 0x....      BL       ?Subroutine2
   1572                customVerifyStatus = NEW_CUSTOM_VERIFY;
   \                     ??CrossCallReturnLabel_13: (+1)
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x71A0             STRB     R0,[R4, #+6]
   1573                setTimer(EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_VERIFY_DELAY_MS);
   \   000000CA   0x200A             MOVS     R0,#+10
   \                     ??continueImageVerification_9: (+1)
   \   000000CC   0x.... 0x....      BL       setTimer
   1574                return;
   \   000000D0   0xE023             B.N      ??CrossCallReturnLabel_0
   1575              } else {
   1576                  emberAfDebugPrint("custom Verify 7\r\n");
   \                     ??continueImageVerification_10: (+1)
   \   000000D2   0x.... 0x....      ADR.W    R1,?_73
   \   000000D6   0x.... 0x....      BL       ?Subroutine1
   1577                otaPrintln("%p verification %p: 0x%X", 
   1578                           (customVerifyStatus == NO_CUSTOM_VERIFY
   1579                            ? "Signature"
   1580                            : "Custom"),
   1581                           (status == EMBER_AF_IMAGE_GOOD
   1582                            ? "passed" 
   1583                            : "FAILED"),
   1584                           status);
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000DA   0x2D00             CMP      R5,#+0
   \   000000DC   0x79A0             LDRB     R0,[R4, #+6]
   \   000000DE   0x.... 0x....      ADR.W    R1,?_74
   \   000000E2   0x9500             STR      R5,[SP, #+0]
   \   000000E4   0xBF0C             ITE      EQ 
   \   000000E6   0x.... 0x....      ADREQ.W  R3,?_77
   \   000000EA   0x.... 0x....      ADRNE.W  R3,?_78
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xBF0C             ITE      EQ 
   \   000000F2   0x.... 0x....      ADREQ.W  R2,?_75
   \   000000F6   0x.... 0x....      ADRNE.W  R2,?_76
   \   000000FA   0x.... 0x....      BL       ?Subroutine5
   1585              }
   1586            }
   1587          
   1588           imageVerifyDone:
   1589                   emberAfDebugPrint("custom Verify 8\r\n");
   \                     ??CrossCallReturnLabel_61: (+1)
   \   000000FE   0x.... 0x....      ADR.W    R1,?_79
   \   00000102   0x.... 0x....      BL       ?Subroutine1
   1590          
   1591            downloadAndVerifyFinish((status == EMBER_AF_IMAGE_GOOD
   1592                                     ? EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1593                                     : EMBER_AF_OTA_VERIFY_FAILED));
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000106   0x2D00             CMP      R5,#+0
   \   00000108   0xBF0C             ITE      EQ 
   \   0000010A   0x2000             MOVEQ    R0,#+0
   \   0000010C   0x2002             MOVNE    R0,#+2
   \   0000010E   0x.... 0x....      BL       downloadAndVerifyFinish
   1594                  emberAfDebugPrint("custom Verify 9\r\n");
   \   00000112   0x.... 0x....      ADR.W    R1,?_80
   \                     ??continueImageVerification_7: (+1)
   \   00000116   0x.... 0x....      BL       ?Subroutine1
   1595          }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   0000011A   0xB007             ADD      SP,SP,#+28
   \   0000011C   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrint
   1596          

   \                                 In section .text, align 2, keep-with-next
   1597          static void askServerToRunUpgrade(boolean timeout)
   1598          {
   \                     askServerToRunUpgrade: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1599            recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
   1600          
   1601            if (!timeout) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable146_5
   \   0000000E   0xB944             CBNZ.N   R4,??askServerToRunUpgrade_0
   1602              errors = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x70C1             STRB     R1,[R0, #+3]
   1603            }
   1604          
   1605            if (errors >= EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_UPGRADE_WAIT_THRESHOLD) {
   1606              otaPrintln("Maximum upgrade requests made (%d) without response from server.");
   1607              otaPrintln("Upgrading anyway");
   1608              runUpgrade();
   1609              return;
   1610            }
   1611            sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1612                        EMBER_ZCL_STATUS_SUCCESS,
   1613                        EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \                     ??askServerToRunUpgrade_1: (+1)
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable146_6  ;; 0x927c0
   \   0000001E   0x2006             MOVS     R0,#+6
   \   00000020   0x....             B.N      sendMessage
   \                     ??askServerToRunUpgrade_0: (+1)
   \   00000022   0x78C0             LDRB     R0,[R0, #+3]
   \   00000024   0x280A             CMP      R0,#+10
   \   00000026   0xDBF5             BLT.N    ??askServerToRunUpgrade_1
   \   00000028   0x.... 0x....      ADR.W    R1,?_81
   \   0000002C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12: (+1)
   \   00000030   0x.... 0x....      ADR.W    R1,?_82
   \   00000034   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000038   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003C   0x....             B.N      runUpgrade
   1614          }
   1615          
   1616          static boolean storeData(int32u offset, int32u length, const int8u* data)
   1617          {
   1618            return (EMBER_AF_OTA_STORAGE_SUCCESS
   1619                    == emberAfOtaStorageWriteTempDataCallback(offset, length, data));
   1620          }
   1621          

   \                                 In section .text, align 2, keep-with-next
   1622          static EmberAfStatus imageBlockResponseParse(int8u* buffer, int8u index, int8u length)
   1623          {
   \                     imageBlockResponseParse: (+1)
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1624            EmberAfOtaImageId imageId;
   1625            int32u offset;
   1626            int32u currentOffset;
   1627            int8u dataSize;
   1628            int32u timerMs = (EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS >= minBlockRequestPeriod
   1629                              ? EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_DOWNLOAD_DELAY_MS
   1630                              : (minBlockRequestPeriod << 10));  // seconds -> milliseconds
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable146_5
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x8BA8             LDRH     R0,[R5, #+28]
   1631            int8u status = emberAfGetInt8u(buffer, index, length);
   \   0000000C   0x5D0B             LDRB     R3,[R1, R4]
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0xF04F 0x0B00      MOVEQ    R11,#+0
   \   00000016   0xEA4F 0x2B80      LSLNE    R11,R0,#+10
   \   0000001A   0xB087             SUB      SP,SP,#+28
   1632            int32u nextOffset;
   1633            const int8u* imageData;
   1634            EmAfPageRequestClientStatus pageRequestStatus;
   1635          
   1636            index++;
   \   0000001C   0x1C4E             ADDS     R6,R1,#+1
   1637          
   1638            if (buffer != NULL && status == EMBER_ZCL_STATUS_WAIT_FOR_DATA) {
   \   0000001E   0x4692             MOV      R10,R2
   \   00000020   0x4690             MOV      R8,R2
   \   00000022   0xB394             CBZ.N    R4,??imageBlockResponseParse_0
   \   00000024   0x2B97             CMP      R3,#+151
   \   00000026   0xD130             BNE.N    ??imageBlockResponseParse_0
   1639              int32u currentTime;
   1640              int32u requestTime;
   1641              int32u calculatedTimer;
   1642          
   1643              if (length < IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN) {
   \   00000028   0xF1B8 0x0F0B      CMP      R8,#+11
   \   0000002C   0xDB56             BLT.N    ??imageBlockResponseParse_1
   1644                return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1645              }
   1646              currentTime = emberAfGetInt32u(buffer, index, length);
   \   0000002E   0xB2F6             UXTB     R6,R6
   \   00000030   0x.... 0x....      BL       ?Subroutine6
   1647              index += 4;
   \                     ??CrossCallReturnLabel_69: (+1)
   \   00000034   0x1D37             ADDS     R7,R6,#+4
   \   00000036   0x4683             MOV      R11,R0
   1648              requestTime = emberAfGetInt32u(buffer, index, length);
   \   00000038   0xB2FF             UXTB     R7,R7
   \   0000003A   0x4652             MOV      R2,R10
   \   0000003C   0x4639             MOV      R1,R7
   \   0000003E   0x.... 0x....      BL       ??Subroutine6_0
   1649              index += 4;
   1650          
   1651              if (!calculateTimer(currentTime, requestTime, &calculatedTimer)) {
   \                     ??CrossCallReturnLabel_65: (+1)
   \   00000042   0x4601             MOV      R1,R0
   \   00000044   0xAA00             ADD      R2,SP,#+0
   \   00000046   0x4658             MOV      R0,R11
   \   00000048   0x.... 0x....      BL       calculateTimer
   \   0000004C   0x1D3E             ADDS     R6,R7,#+4
   \   0000004E   0xB910             CBNZ.N   R0,??imageBlockResponseParse_2
   1652                // Error printed by above function.
   1653                calculatedTimer = CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS; 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable146_4  ;; 0x493e0
   \   00000054   0x9000             STR      R0,[SP, #+0]
   1654              }
   1655          
   1656              if (length >= IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH) {
   \                     ??imageBlockResponseParse_2: (+1)
   \   00000056   0xF1B8 0x0F0D      CMP      R8,#+13
   \   0000005A   0xDB0C             BLT.N    ??imageBlockResponseParse_3
   1657                int16u temp = emberAfGetInt16u(buffer, 
   1658                                               index, 
   1659                                               length);
   \   0000005C   0x4652             MOV      R2,R10
   \   0000005E   0xB2F1             UXTB     R1,R6
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      BL       emberAfGetInt16u
   \   00000066   0x4604             MOV      R4,R0
   1660                emberAfCoreFlush();
   1661                otaPrintln("Updating Min Block Request Period to %d seconds",
   1662                           temp);
   \   00000068   0x4622             MOV      R2,R4
   \   0000006A   0x.... 0x....      ADR.W    R1,?_83
   \   0000006E   0x.... 0x....      BL       ??Subroutine3_0
   1663                updateMinBlockRequestPeriodAttribute(temp);
   \                     ??CrossCallReturnLabel_28: (+1)
   \   00000072   0x83AC             STRH     R4,[R5, #+28]
   1664                calculatedTimer = temp;
   \   00000074   0x9400             STR      R4,[SP, #+0]
   1665              }
   1666          
   1667              emberAfCoreFlush();
   1668              otaPrintln("Download delay by server %d ms", calculatedTimer);
   \                     ??imageBlockResponseParse_3: (+1)
   \   00000076   0x2040             MOVS     R0,#+64
   \   00000078   0x9A00             LDR      R2,[SP, #+0]
   \   0000007A   0x.... 0x....      ADR.W    R1,?_84
   \   0000007E   0x.... 0x....      BL       emberAfPrintln
   1669              emberAfCoreFlush();
   1670              setTimer(calculatedTimer);
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x.... 0x....      BL       setTimer
   \   00000088   0xE0B7             B.N      ??imageBlockResponseParse_4
   1671              return EMBER_ZCL_STATUS_SUCCESS;
   1672            } else if (status == EMBER_ZCL_STATUS_ABORT
   1673                       || status == EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE) {
   \                     ??imageBlockResponseParse_0: (+1)
   \   0000008A   0x2B95             CMP      R3,#+149
   \   0000008C   0xBF18             IT       NE 
   \   0000008E   0x2B98             CMPNE    R3,#+152
   \   00000090   0xD102             BNE.N    ??imageBlockResponseParse_5
   1674              otaPrintln("Download aborted by server.");
   \   00000092   0x.... 0x....      ADR.W    R1,?_85
   \   00000096   0xE011             B.N      ??imageBlockResponseParse_6
   1675              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   1676              return EMBER_ZCL_STATUS_SUCCESS;
   1677            } else if (status == EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND) {
   \                     ??imageBlockResponseParse_5: (+1)
   \   00000098   0x2B81             CMP      R3,#+129
   \   0000009A   0xD113             BNE.N    ??imageBlockResponseParse_7
   1678              if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   0000009C   0x7968             LDRB     R0,[R5, #+5]
   \   0000009E   0xB158             CBZ.N    R0,??imageBlockResponseParse_8
   \   000000A0   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   000000A4   0xB140             CBZ.N    R0,??imageBlockResponseParse_8
   1679                otaPrintln("Server doesn't support page request, only using block request.");
   \   000000A6   0x.... 0x....      ADR.W    R1,?_86
   \   000000AA   0x.... 0x....      BL       ?Subroutine2
   1680                usePageRequest = FALSE;
   \                     ??CrossCallReturnLabel_10: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x7168             STRB     R0,[R5, #+5]
   1681                emAfAbortPageRequest();
   \   000000B2   0x.... 0x....      BL       emAfAbortPageRequest
   1682                continueImageDownload();
   \   000000B6   0xE09E             B.N      ??imageBlockResponseParse_9
   1683                return EMBER_ZCL_STATUS_SUCCESS;
   1684              } else {
   1685                otaPrintln("Server returned 'unsupported cluster command'.");
   \                     ??imageBlockResponseParse_8: (+1)
   \   000000B8   0x.... 0x....      ADR.W    R1,?_87
   \                     ??imageBlockResponseParse_6: (+1)
   \   000000BC   0x.... 0x....      BL       ?Subroutine2
   1686                downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_9: (+1)
   \   000000C0   0x2003             MOVS     R0,#+3
   \   000000C2   0xE072             B.N      ??imageBlockResponseParse_10
   1687                return EMBER_ZCL_STATUS_SUCCESS;
   1688              }
   1689            } else if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??imageBlockResponseParse_7: (+1)
   \   000000C4   0x.... 0x....      ADR.W    R9,?_35
   \   000000C8   0xB12B             CBZ.N    R3,??imageBlockResponseParse_11
   1690              otaPrintln("Unknown %p status code 0x%X", 
   1691                         "Image block response", 
   1692                         status);
   \   000000CA   0x464A             MOV      R2,R9
   \   000000CC   0x.... 0x....      ADR.W    R1,?_88
   \   000000D0   0x.... 0x....      BL       ?Subroutine4
   1693              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_48: (+1)
   \   000000D4   0xE044             B.N      ??CrossCallReturnLabel_27
   1694            } // Else status == success.  Keep going
   1695          
   1696            if (length < IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH) {
   \                     ??imageBlockResponseParse_11: (+1)
   \   000000D6   0xF1B8 0x0F11      CMP      R8,#+17
   \   000000DA   0xDA01             BGE.N    ??imageBlockResponseParse_12
   1697              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??imageBlockResponseParse_1: (+1)
   \   000000DC   0x2080             MOVS     R0,#+128
   \   000000DE   0xE08D             B.N      ??imageBlockResponseParse_13
   1698            }
   1699          
   1700            index += emAfOtaParseImageIdFromMessage(&imageId,
   1701                                                    &(buffer[index]), 
   1702                                                    length);
   \                     ??imageBlockResponseParse_12: (+1)
   \   000000E0   0xB2F0             UXTB     R0,R6
   \   000000E2   0x1901             ADDS     R1,R0,R4
   \   000000E4   0xA802             ADD      R0,SP,#+8
   \   000000E6   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   000000EA   0x1986             ADDS     R6,R0,R6
   1703            offset = emberAfGetInt32u(buffer, index, length);
   \   000000EC   0xB2F6             UXTB     R6,R6
   \   000000EE   0x4652             MOV      R2,R10
   \   000000F0   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_68: (+1)
   \   000000F4   0x4682             MOV      R10,R0
   1704            index += 4;
   \   000000F6   0x1D30             ADDS     R0,R6,#+4
   1705            dataSize = emberAfGetInt8u(buffer, index, length);
   \   000000F8   0xB2C0             UXTB     R0,R0
   1706            index += 1;
   \   000000FA   0x1C46             ADDS     R6,R0,#+1
   1707            imageData = buffer + index;
   \   000000FC   0xB2F6             UXTB     R6,R6
   \   000000FE   0x5D01             LDRB     R1,[R0, R4]
   \   00000100   0x1934             ADDS     R4,R6,R4
   1708            
   1709            if ((length - index) < dataSize) {
   \   00000102   0xEBA8 0x0006      SUB      R0,R8,R6
   \   00000106   0x4288             CMP      R0,R1
   \   00000108   0x9101             STR      R1,[SP, #+4]
   \   0000010A   0xDA07             BGE.N    ??imageBlockResponseParse_14
   1710              otaPrintln("%p has data size (%d) smaller than actual packet size (%d).",
   1711                         "Image block response",
   1712                         dataSize,
   1713                         length - index);
   \   0000010C   0x9000             STR      R0,[SP, #+0]
   \   0000010E   0x464A             MOV      R2,R9
   \   00000110   0x9B01             LDR      R3,[SP, #+4]
   \   00000112   0x.... 0x....      ADR.W    R1,?_89
   \   00000116   0x.... 0x....      BL       ?Subroutine5
   1714              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1715            }
   \                     ??CrossCallReturnLabel_60: (+1)
   \   0000011A   0xE7DF             B.N      ??imageBlockResponseParse_1
   1716            
   1717            if (!usePageRequest 
   1718                || emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_14: (+1)
   \   0000011C   0x7968             LDRB     R0,[R5, #+5]
   \   0000011E   0xB118             CBZ.N    R0,??imageBlockResponseParse_15
   \   00000120   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000124   0x2801             CMP      R0,#+1
   \   00000126   0xD00C             BEQ.N    ??imageBlockResponseParse_16
   1719              // For normal image block request transactions, all blocks should be in order.
   1720              // For page request, we may receive them out of order, or just miss packets.
   1721              currentOffset = getCurrentOffset();
   \                     ??imageBlockResponseParse_15: (+1)
   \   00000128   0x.... 0x....      BL       getCurrentOffset
   1722              if (offset != currentOffset) {
   \   0000012C   0x4582             CMP      R10,R0
   \   0000012E   0xD008             BEQ.N    ??imageBlockResponseParse_16
   1723                otaPrintln("%p error: Expected offset 0x%4X, but got 0x%4X.  Ignoring", 
   1724                           "Image block response",
   1725                           currentOffset, 
   1726                           offset);
   \   00000130   0x4603             MOV      R3,R0
   \   00000132   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000136   0x464A             MOV      R2,R9
   \   00000138   0x.... 0x....      ADR.W    R1,?_90
   \   0000013C   0x.... 0x....      BL       ?Subroutine5
   1727                return EMBER_ZCL_STATUS_SUCCESS;
   1728              }
   1729            }
   \                     ??CrossCallReturnLabel_59: (+1)
   \   00000140   0xE05B             B.N      ??imageBlockResponseParse_4
   1730            
   1731            if (0 != MEMCOMPARE(&currentDownloadFile, 
   1732                                &imageId, 
   1733                                sizeof(EmberAfOtaImageId))
   1734                       || dataSize > MAX_CLIENT_DATA_SIZE) {
   \                     ??imageBlockResponseParse_16: (+1)
   \   00000142   0x2210             MOVS     R2,#+16
   \   00000144   0xA902             ADD      R1,SP,#+8
   \   00000146   0xF105 0x0008      ADD      R0,R5,#+8
   \   0000014A   0x.... 0x....      BL       halCommonMemCompare
   \   0000014E   0xB910             CBNZ.N   R0,??imageBlockResponseParse_17
   \   00000150   0x9801             LDR      R0,[SP, #+4]
   \   00000152   0x2840             CMP      R0,#+64
   \   00000154   0xDB06             BLT.N    ??imageBlockResponseParse_18
   1735              otaPrintln("%p info did not match my expected info.  Dropping.",
   1736                         "Image block response");
   \                     ??imageBlockResponseParse_17: (+1)
   \   00000156   0x464A             MOV      R2,R9
   \   00000158   0x.... 0x....      ADR.W    R1,?_91
   \   0000015C   0x.... 0x....      BL       ??Subroutine3_0
   1737              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_27: (+1)
   \   00000160   0x2087             MOVS     R0,#+135
   \   00000162   0xE04B             B.N      ??imageBlockResponseParse_13
   1738            }
   1739          
   1740            errors = 0;
   \                     ??imageBlockResponseParse_18: (+1)
   \   00000164   0x2000             MOVS     R0,#+0
   \   00000166   0x70E8             STRB     R0,[R5, #+3]
   1741          
   1742            // We want to make sure we don't write the same block twice.  For
   1743            // page-erase-required EEPROM parts this won't work.
   1744            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000168   0x7968             LDRB     R0,[R5, #+5]
   \   0000016A   0xB140             CBZ.N    R0,??imageBlockResponseParse_19
   \   0000016C   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   00000170   0xB128             CBZ.N    R0,??imageBlockResponseParse_19
   1745              pageRequestStatus = emAfNoteReceivedBlockForPageRequestClient(offset);
   \   00000172   0x4650             MOV      R0,R10
   \   00000174   0x.... 0x....      BL       emAfNoteReceivedBlockForPageRequestClient
   \   00000178   0x4607             MOV      R7,R0
   1746              if (pageRequestStatus == EM_AF_BLOCK_ALREADY_RECEIVED) {
   \   0000017A   0x2F04             CMP      R7,#+4
   \   0000017C   0xD03D             BEQ.N    ??imageBlockResponseParse_4
   1747                return EMBER_ZCL_STATUS_SUCCESS;
   1748              }
   1749            }
   1750          
   1751            if (!storeData(offset, dataSize, imageData)) {
   \                     ??imageBlockResponseParse_19: (+1)
   \   0000017E   0x9901             LDR      R1,[SP, #+4]
   \   00000180   0x4622             MOV      R2,R4
   \   00000182   0x4650             MOV      R0,R10
   \   00000184   0x.... 0x....      BL       emberAfOtaStorageWriteTempDataCallback
   \   00000188   0xB950             CBNZ.N   R0,??imageBlockResponseParse_20
   1752              otaPrintln("Failed to write to storage device!");
   1753              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   1754              // The downloadAndVerifyFinish() function will return it's only status
   1755              // to the message.  No need to send ours.
   1756              return EMBER_ZCL_STATUS_SUCCESS;
   1757            }
   1758          
   1759            nextOffset = offset + dataSize;
   \   0000018A   0x9801             LDR      R0,[SP, #+4]
   \   0000018C   0xEB00 0x040A      ADD      R4,R0,R10
   1760          
   1761            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000190   0x7968             LDRB     R0,[R5, #+5]
   \   00000192   0xB1C0             CBZ.N    R0,??imageBlockResponseParse_21
   \   00000194   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   00000198   0xB1A8             CBZ.N    R0,??imageBlockResponseParse_21
   1762              if (pageRequestStatus == EM_AF_PAGE_REQUEST_ERROR) {
   \   0000019A   0x2FFF             CMP      R7,#+255
   \   0000019C   0xD108             BNE.N    ??imageBlockResponseParse_22
   1763                downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   0000019E   0xE003             B.N      ??CrossCallReturnLabel_8
   1764                // We still return success to indicate we processed the message correctly.
   1765                return EMBER_ZCL_STATUS_SUCCESS;
   1766          
   1767              } else if (pageRequestStatus == EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_20: (+1)
   \   000001A0   0x.... 0x....      ADR.W    R1,?_92
   \   000001A4   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \   000001A8   0x2004             MOVS     R0,#+4
   \                     ??imageBlockResponseParse_10: (+1)
   \   000001AA   0x.... 0x....      BL       downloadAndVerifyFinish
   \   000001AE   0xE024             B.N      ??imageBlockResponseParse_4
   \                     ??imageBlockResponseParse_22: (+1)
   \   000001B0   0x2F01             CMP      R7,#+1
   \   000001B2   0xD022             BEQ.N    ??imageBlockResponseParse_4
   1768                return EMBER_ZCL_STATUS_SUCCESS;
   1769          
   1770              } else if (pageRequestStatus == EM_AF_PAGE_REQUEST_COMPLETE) {
   \   000001B4   0x2F03             CMP      R7,#+3
   \   000001B6   0xD103             BNE.N    ??imageBlockResponseParse_23
   1771                nextOffset = emAfGetFinishedPageRequestOffset();
   \   000001B8   0x.... 0x....      BL       emAfGetFinishedPageRequestOffset
   \   000001BC   0x4604             MOV      R4,R0
   \   000001BE   0xE002             B.N      ??imageBlockResponseParse_21
   1772          
   1773              } else { // EM_AF_RETRY_MISSED_PACKETS 
   1774                timerMs = emAfGetPageRequestMissedPacketDelayMs();
   \                     ??imageBlockResponseParse_23: (+1)
   \   000001C0   0x.... 0x....      BL       emAfGetPageRequestMissedPacketDelayMs
   \   000001C4   0x4683             MOV      R11,R0
   1775              }
   1776            }
   1777          
   1778            offset = updateCurrentOffset(nextOffset);
   \                     ??imageBlockResponseParse_21: (+1)
   \   000001C6   0x4620             MOV      R0,R4
   \   000001C8   0x.... 0x....      BL       updateCurrentOffset
   \   000001CC   0x4604             MOV      R4,R0
   1779          
   1780          #if defined(EMBER_TEST)
   1781            {
   1782              int8u percentageComplete = 
   1783                emAfPrintPercentageUpdate("Download", 
   1784                                          DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1785                                          offset);
   1786              if (percentageComplete != 100 && percentageComplete >= emAfOtaClientStopDownloadPercentage) {
   1787                otaPrintln("Artificially stopping download at %d%%", emAfOtaClientStopDownloadPercentage);
   1788                return EMBER_ZCL_STATUS_SUCCESS;
   1789              }
   1790            }
   1791          #else
   1792            emAfPrintPercentageUpdate("Download", 
   1793                                      DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1794                                      offset);
   \   000001CE   0x4622             MOV      R2,R4
   \   000001D0   0x2105             MOVS     R1,#+5
   \   000001D2   0x.... 0x....      ADR.W    R0,?_93
   \   000001D6   0x.... 0x....      BL       emAfPrintPercentageUpdate
   1795          #endif
   1796          
   1797            if (offset >= totalImageSize) {
   \   000001DA   0x6CA8             LDR      R0,[R5, #+72]
   \   000001DC   0x4284             CMP      R4,R0
   \   000001DE   0xD306             BCC.N    ??imageBlockResponseParse_24
   1798              emberAfOtaStorageFinishDownloadCallback(offset);
   \   000001E0   0x4620             MOV      R0,R4
   \   000001E2   0x.... 0x....      BL       emberAfOtaStorageFinishDownloadCallback
   1799              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);  
   \   000001E6   0x2005             MOVS     R0,#+5
   \   000001E8   0x.... 0x....      BL       continueImageVerification
   \   000001EC   0xE005             B.N      ??imageBlockResponseParse_4
   1800              return EMBER_ZCL_STATUS_SUCCESS;
   1801            } else {
   1802              if (!setTimer(timerMs)) {
   \                     ??imageBlockResponseParse_24: (+1)
   \   000001EE   0x4658             MOV      R0,R11
   \   000001F0   0x.... 0x....      BL       setTimer
   \   000001F4   0xB908             CBNZ.N   R0,??imageBlockResponseParse_4
   1803                // Continue download right now
   1804                continueImageDownload();
   \                     ??imageBlockResponseParse_9: (+1)
   \   000001F6   0x.... 0x....      BL       continueImageDownload
   1805              } // else (fall through)
   1806                // timer set, wait for next event to fire
   1807            }
   1808            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageBlockResponseParse_4: (+1)
   \   000001FA   0x2000             MOVS     R0,#+0
   \                     ??imageBlockResponseParse_13: (+1)
   \   000001FC   0xB007             ADD      SP,SP,#+28
   \   000001FE   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1809          }
   1810          

   \                                 In section .text, align 2, keep-with-next
   1811          static EmberAfStatus upgradeEndResponseParse(int8u status,
   1812                                                       int8u* buffer, 
   1813                                                       int8u length)
   1814          {
   \                     upgradeEndResponseParse: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
   1815            EmberAfOtaImageId serverSentId;
   1816            int32u waitTime;
   1817            int32u currentTime, upgradeTime;
   1818            int8u index = EMBER_AF_ZCL_OVERHEAD;
   1819          
   1820            if (status) {
   \   00000008   0xB140             CBZ.N    R0,??upgradeEndResponseParse_0
   1821              otaPrintln("Server aborted upgrade, status: 0x%X",
   1822                         status);
   \   0000000A   0x4602             MOV      R2,R0
   \   0000000C   0x.... 0x....      ADR.W    R1,?_94
   \   00000010   0x.... 0x....      BL       ??Subroutine3_0
   1823              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_26: (+1)
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       downloadAndVerifyFinish
   1824              return EMBER_ZCL_STATUS_SUCCESS;
   \   0000001A   0xE072             B.N      ??upgradeEndResponseParse_1
   1825            }
   1826          
   1827            index += emAfOtaParseImageIdFromMessage(&serverSentId, 
   1828                                                    &(buffer[index]),
   1829                                                    length);
   \                     ??upgradeEndResponseParse_0: (+1)
   \   0000001C   0x1CE1             ADDS     R1,R4,#+3
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   1830          
   1831            if ((serverSentId.manufacturerId != currentDownloadFile.manufacturerId)
   1832                && (serverSentId.manufacturerId != MFG_ID_WILD_CARD)) {
   \   00000024   0x....             LDR.N    R3,??DataTable146_5
   \   00000026   0xF8BD 0xC004      LDRH     R12,[SP, #+4]
   \   0000002A   0xF8B3 0xE008      LDRH     LR,[R3, #+8]
   \   0000002E   0x.... 0x....      ADR.W    R7,?_97
   \   00000032   0x.... 0x....      ADR.W    R1,?_95
   \   00000036   0x.... 0x....      ADR.W    R2,?_36
   \   0000003A   0x1CC6             ADDS     R6,R0,#+3
   \   0000003C   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000040   0x45F4             CMP      R12,LR
   \   00000042   0xBF18             IT       NE 
   \   00000044   0x4584             CMPNE    R12,R0
   \   00000046   0xB2F6             UXTB     R6,R6
   \   00000048   0xD007             BEQ.N    ??upgradeEndResponseParse_2
   1833              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1834                                             "Upgrade end response",
   1835                                             "manufacturer ID");
   \   0000004A   0x.... 0x....      ADR.W    R3,?_96
   \   0000004E   0x2040             MOVS     R0,#+64
   \   00000050   0x.... 0x....      BL       emberAfPrint
   1836              otaPrintln("0x%2X", serverSentId.manufacturerId);
   \   00000054   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000058   0xE00E             B.N      ??upgradeEndResponseParse_3
   1837              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1838            }
   1839            if ((serverSentId.imageTypeId != currentDownloadFile.imageTypeId) 
   1840                && (serverSentId.imageTypeId != IMAGE_TYPE_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_2: (+1)
   \   0000005A   0xF8BD 0xC006      LDRH     R12,[SP, #+6]
   \   0000005E   0xF8B3 0xE00A      LDRH     LR,[R3, #+10]
   \   00000062   0x45F4             CMP      R12,LR
   \   00000064   0xBF18             IT       NE 
   \   00000066   0x4584             CMPNE    R12,R0
   \   00000068   0xD008             BEQ.N    ??upgradeEndResponseParse_4
   1841              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1842                                             "Upgrade end response",
   1843                                             "image type ID");
   \   0000006A   0x.... 0x....      ADR.W    R3,?_98
   \   0000006E   0x2040             MOVS     R0,#+64
   \   00000070   0x.... 0x....      BL       emberAfPrint
   1844              otaPrintln("0x%2X", serverSentId.imageTypeId);
   \   00000074   0xF8BD 0x2006      LDRH     R2,[SP, #+6]
   \                     ??upgradeEndResponseParse_3: (+1)
   \   00000078   0x4639             MOV      R1,R7
   \   0000007A   0xE00E             B.N      ??upgradeEndResponseParse_5
   1845              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1846            }
   1847            if ((serverSentId.firmwareVersion != currentDownloadFile.firmwareVersion
   1848                 && serverSentId.firmwareVersion != FILE_VERSION_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_4: (+1)
   \   0000007C   0x9802             LDR      R0,[SP, #+8]
   \   0000007E   0x68DB             LDR      R3,[R3, #+12]
   \   00000080   0x4298             CMP      R0,R3
   \   00000082   0xBF18             IT       NE 
   \   00000084   0xF110 0x0F01      CMNNE    R0,#+1
   \   00000088   0xD00B             BEQ.N    ??upgradeEndResponseParse_6
   1849              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1850                                             "Upgrade end response",
   1851                                             "file version");
   \   0000008A   0x.... 0x....      ADR.W    R3,?_99
   \   0000008E   0x2040             MOVS     R0,#+64
   \   00000090   0x.... 0x....      BL       emberAfPrint
   1852              otaPrintln("0x%4X", serverSentId.firmwareVersion);
   \   00000094   0x9A02             LDR      R2,[SP, #+8]
   \   00000096   0x.... 0x....      ADR.W    R1,?_100
   \                     ??upgradeEndResponseParse_5: (+1)
   \   0000009A   0x.... 0x....      BL       ??Subroutine3_0
   1853              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000009E   0x2087             MOVS     R0,#+135
   \   000000A0   0xE030             B.N      ??upgradeEndResponseParse_7
   1854            }
   1855            currentTime = emberAfGetInt32u(buffer, index, length);
   \                     ??upgradeEndResponseParse_6: (+1)
   \   000000A2   0x462A             MOV      R2,R5
   \   000000A4   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_67: (+1)
   \   000000A8   0x4607             MOV      R7,R0
   1856            index += 4;
   1857            upgradeTime = emberAfGetInt32u(buffer, index, length);
   \   000000AA   0x1D31             ADDS     R1,R6,#+4
   \   000000AC   0x462A             MOV      R2,R5
   \   000000AE   0xB2C9             UXTB     R1,R1
   \   000000B0   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_64: (+1)
   \   000000B4   0x4601             MOV      R1,R0
   1858            
   1859            if (WAIT_FOR_UPGRADE_MESSAGE == upgradeTime) {
   \   000000B6   0xF111 0x0F01      CMN      R1,#+1
   \   000000BA   0x....             LDR.N    R4,??DataTable146_7  ;; 0x36ee80
   \   000000BC   0xD106             BNE.N    ??upgradeEndResponseParse_8
   1860              recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   000000BE   0x2008             MOVS     R0,#+8
   \   000000C0   0x.... 0x....      BL       recordUpgradeStatus
   1861              setTimer(WAIT_FOR_UPGRADE_DELAY_MS);
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       setTimer
   1862              return EMBER_ZCL_STATUS_SUCCESS;
   \   000000CA   0xE01A             B.N      ??upgradeEndResponseParse_1
   1863            }
   1864          
   1865            // NOTE:  Current Time and Upgrade Time are in SECONDS since epoch.
   1866            // Our timer uses MILISECONDS.  calculateTimer() will give us the MS delay.
   1867          
   1868            if (!calculateTimer(currentTime, upgradeTime, &waitTime)) {
   \                     ??upgradeEndResponseParse_8: (+1)
   \   000000CC   0xAA00             ADD      R2,SP,#+0
   \   000000CE   0x4638             MOV      R0,R7
   \   000000D0   0x.... 0x....      BL       calculateTimer
   \   000000D4   0xB148             CBZ.N    R0,??CrossCallReturnLabel_24
   1869              waitTime = CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS;
   1870            } else {
   1871              // Even when we are told to upgrade immediately, we want to insure there
   1872              // is a chance for the APS retries and ZCL response to get back to their 
   1873              // senders.
   1874              if (waitTime < IMMEDIATE_UPGRADE_DELAY_MS) {
   \   000000D6   0x9800             LDR      R0,[SP, #+0]
   \   000000D8   0xF640 0x34B8      MOVW     R4,#+3000
   \   000000DC   0x42A0             CMP      R0,R4
   \   000000DE   0xD205             BCS.N    ??upgradeEndResponseParse_9
   1875                otaPrintln("Adding %d ms. delay for immediate upgrade.", 
   1876                           IMMEDIATE_UPGRADE_DELAY_MS);
   \   000000E0   0x4622             MOV      R2,R4
   \   000000E2   0x.... 0x....      ADR.W    R1,?_101
   \   000000E6   0x.... 0x....      BL       ??Subroutine3_0
   1877                waitTime = IMMEDIATE_UPGRADE_DELAY_MS;
   \                     ??CrossCallReturnLabel_24: (+1)
   \   000000EA   0x9400             STR      R4,[SP, #+0]
   1878              }
   1879            }
   1880            // Expect at this point waitTime != 0
   1881            setTimer(waitTime);
   \                     ??upgradeEndResponseParse_9: (+1)
   \   000000EC   0x9800             LDR      R0,[SP, #+0]
   \   000000EE   0x.... 0x....      BL       setTimer
   1882            emberAfCoreFlush();
   1883            otaPrintln("Countdown to upgrade: %d ms", waitTime);
   \   000000F2   0x9A00             LDR      R2,[SP, #+0]
   \   000000F4   0x.... 0x....      ADR.W    R1,?_102
   \   000000F8   0x.... 0x....      BL       ??Subroutine3_0
   1884            emberAfCoreFlush();
   1885            recordUpgradeStatus(BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE);
   \                     ??CrossCallReturnLabel_23: (+1)
   \   000000FC   0x2009             MOVS     R0,#+9
   \   000000FE   0x.... 0x....      BL       recordUpgradeStatus
   1886            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??upgradeEndResponseParse_1: (+1)
   \   00000102   0x2000             MOVS     R0,#+0
   \                     ??upgradeEndResponseParse_7: (+1)
   \   00000104   0xB005             ADD      SP,SP,#+20
   \   00000106   0xBDF0             POP      {R4-R7,PC}       ;; return
   1887          }
   1888          

   \                                 In section .text, align 2, keep-with-next
   1889          static boolean calculateTimer(int32u currentTime, 
   1890                                        int32u targetTime, 
   1891                                        int32u* returnTimeMs)
   1892          {
   \                     calculateTimer: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1893            int32u timeOut = 0;
   1894            boolean validWaitTime = TRUE; 
   1895          
   1896            if (targetTime < currentTime) {
   \   00000002   0x4281             CMP      R1,R0
   \   00000004   0x4614             MOV      R4,R2
   \   00000006   0xD209             BCS.N    ??calculateTimer_0
   1897              otaPrintln("%p: invalid offset currentTime(0x%4X) > upgradeTime(0x%4X)",
   1898                         "Error",
   1899                         currentTime, 
   1900                         targetTime);
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0x4603             MOV      R3,R0
   \   0000000C   0x.... 0x....      ADR.W    R2,?_38
   \   00000010   0x.... 0x....      ADR.W    R1,?_103
   \   00000014   0x.... 0x....      BL       ?Subroutine5
   1901              return FALSE;
   \                     ??CrossCallReturnLabel_58: (+1)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}
   1902            } else {
   1903              timeOut = targetTime - currentTime;
   \                     ??calculateTimer_0: (+1)
   \   0000001C   0x1A0D             SUBS     R5,R1,R0
   1904              otaPrintln("OTA Cluster: wait for %d s", timeOut);
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0x.... 0x....      ADR.W    R1,?_104
   \   00000024   0x.... 0x....      BL       ??Subroutine3_0
   1905            }
   1906            otaPrintln("RXed timeOut 0x%4X s, MAX timeOut 0x%4X s",
   1907                       timeOut, 
   1908                       TIMEOUT_MAX_WAIT_TIME_MS >> 10);   // divide by ~1000
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000028   0xF640 0x53BB      MOVW     R3,#+3515
   \   0000002C   0x462A             MOV      R2,R5
   \   0000002E   0x.... 0x....      ADR.W    R1,?_105
   \   00000032   0x.... 0x....      BL       ?Subroutine4
   1909                                                          // save flash by doing a bit shift
   1910            timeOut *= 1000;
   \                     ??CrossCallReturnLabel_47: (+1)
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x4368             MULS     R0,R0,R5
   1911          
   1912            if (timeOut > TIMEOUT_MAX_WAIT_TIME_MS) {
   \   0000003C   0x....             LDR.N    R1,??DataTable146_8  ;; 0x36ee81
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xBF28             IT       CS 
   \   00000042   0x....             LDRCS.N  R0,??DataTable146_7  ;; 0x36ee80
   1913              timeOut = TIMEOUT_MAX_WAIT_TIME_MS;
   1914            }
   1915            *returnTimeMs = timeOut;    
   \   00000044   0x6020             STR      R0,[R4, #+0]
   1916            return validWaitTime;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1917          }
   1918          

   \                                 In section .text, align 2, keep-with-next
   1919          static void runUpgrade(void)
   1920          {
   \                     runUpgrade: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   1921            emberAfCoreFlush();
   1922            otaPrintln("Applying upgrade");
   \   00000002   0x.... 0x....      ADR.W    R1,?_106
   \   00000006   0x.... 0x....      BL       ?Subroutine2
   1923            emberAfCoreFlush();
   1924            
   1925            emberAfOtaClientBootloadCallback(&currentDownloadFile);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000000A   0x....             LDR.N    R0,??DataTable146_9
   \   0000000C   0x.... 0x....      BL       emberAfOtaClientBootloadCallback
   1926          
   1927            // If we returned, then something is wrong with the upgrade.  
   1928            // It is expected that an invalid image file is deleted to prevent it
   1929            // from being used a subsequent time.
   1930            queryNextImage(START_NEW_TIMER, 
                                  ^
Warning[Pe188]: enumerated type mixed with another type
   1931                           FALSE);  // query error?
   \   00000010   0xE8BD 0x4004      POP      {R2,LR}
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x....             B.N      queryNextImage
   1932          }
   1933          
   1934          // Sends an image block request for a file the server should 
   1935          // not have.  Test harness only (test case 9.5.6 - Missing File)

   \                                 In section .text, align 2, keep-with-next
   1936          void emAfSendImageBlockRequestTest(void)
   1937          {
   \                     emAfSendImageBlockRequestTest: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   1938            if (currentBootloadState != BOOTLOAD_STATE_NONE) {
   \   00000002   0x....             LDR.N    R4,??DataTable146_5
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xB130             CBZ.N    R0,??emAfSendImageBlockRequestTest_0
   1939              otaPrintln("Image block request test only works when state is BOOTLOAD_STATE_NONE");
   \   00000008   0xE8BD 0x4010      POP      {R4,LR}
   \   0000000C   0x.... 0x....      ADR.W    R1,?_107
   \   00000010   0x2040             MOVS     R0,#+64
   \   00000012   0x.... 0x....      B.W      emberAfPrintln
   1940              return;
   1941            }
   1942          
   1943            updateCurrentOffset(100);
   \                     ??emAfSendImageBlockRequestTest_0: (+1)
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0x.... 0x....      BL       updateCurrentOffset
   1944          
   1945            // Values from the test spec.
   1946            currentDownloadFile.manufacturerId = 0xFFF0;
   \   0000001C   0xF64F 0x70F0      MOVW     R0,#+65520
   \   00000020   0x8120             STRH     R0,[R4, #+8]
   1947            currentDownloadFile.imageTypeId    = 0x0000;
   1948            currentDownloadFile.firmwareVersion = 0xFFFFFFF0;
   1949            sendMessage(ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID, 
   1950                        0,   // upgrade end status (ignored)
   1951                        0);  // timer
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x8160             STRH     R0,[R4, #+10]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0xF06F 0x000F      MVN      R0,#+15
   \   0000002E   0x60E0             STR      R0,[R4, #+12]
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032   0xE8BD 0x4010      POP      {R4,LR}
   \   00000036   0x....             B.N      sendMessage
   1952          }
   1953          

   \                                 In section .text, align 2, keep-with-next
   1954          void emAfSetPageRequest(boolean pageRequestOn)
   1955          {
   1956            usePageRequest = pageRequestOn;
   \                     emAfSetPageRequest: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable146_5
   \   00000002   0x7148             STRB     R0,[R1, #+5]
   1957          }
   \   00000004   0x4770             BX       LR               ;; return
   1958          

   \                                 In section .text, align 2, keep-with-next
   1959          boolean emAfUsingPageRequest(void)
   1960          {
   1961            return usePageRequest;
   \                     emAfUsingPageRequest: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable146_5
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0x4770             BX       LR               ;; return
   1962          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4E 0x6F          DC8 "None"
   \              0x6E 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x4E 0x6F          DC8 "Not initialising OTA"
   \              0x74 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x6C 0x69    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x44 0x65          DC8 "Delaying %d seconds before starting OTA client"
   \              0x6C 0x61    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x20    
   \              0x62 0x65    
   \              0x66 0x6F    
   \              0x72 0x65    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x52 0x61          DC8 "Random Delay before start"
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x65 0x66    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x44 0x69          DC8 "Discovering OTA Server"
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x47 0x65          DC8 "Get OTA Server EUI"
   \              0x74 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x45    
   \              0x55 0x49    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x4F 0x62          DC8 "Obtain link key"
   \              0x74 0x61    
   \              0x69 0x6E    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x51 0x75          DC8 "Querying Next Image"
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x4E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x44 0x6F          DC8 "Downloading Image"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x54 0x69          DC8 "Timeout waiting for message."
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x20 0x53          DC8 " State:   %p"
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x25 0x70    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x20 0x57          DC8 " Waiting for response: %p"
   \              0x61 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x70 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x20 0x4E          DC8 " Next Event Timer: %d ms"
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x20 0x43          DC8 " Current Download Offset: 0x%4X (%d%%)"
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x44    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x4F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x28 0x25    
   \              0x64 0x25    
   \              0x25 0x29    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: setting IEEE address of OTA cluster"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x49    
   \              0x45 0x45    
   \              0x45 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x53 0x65          DC8 "Setting OTA Server to 0x%2X"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x46 0x61          DC8 "Failed to initiate service discovery."
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x79    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   0x79 0x65          DC8      "yes"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128_1:
   \   00000000   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x50 0x61          DC8 50H, 61H, 72H, 74H, 69H, 61H, 6CH, 20H
   \              0x72 0x74    
   \              0x69 0x61    
   \              0x6C 0x20    
   \   00000008   0x66 0x69          DC8 66H, 69H, 6CH, 65H, 20H, 64H, 6FH, 77H
   \              0x6C 0x65    
   \              0x20 0x64    
   \              0x6F 0x77    
   \   00000010   0x6E 0x6C          DC8 6EH, 6CH, 6FH, 61H, 64H, 20H, 66H, 6FH
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x66 0x6F    
   \   00000018   0x75 0x6E          DC8 75H, 6EH, 64H, 2CH, 20H, 63H, 6FH, 6EH
   \              0x64 0x2C    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \   00000020   0x74 0x69          DC8 74H, 69H, 6EH, 75H, 69H, 6EH, 67H, 20H
   \              0x6E 0x75    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x66 0x72          DC8 66H, 72H, 6FH, 6DH, 20H, 6FH, 66H, 66H
   \              0x6F 0x6D    
   \              0x20 0x6F    
   \              0x66 0x66    
   \   00000030   0x73 0x65          DC8 73H, 65H, 74H, 20H, 30H, 78H, 25H, 34H
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x00          DC8 58H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 75H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x75    
   \   00000008   0x6C 0x6C          DC8 6CH, 6CH, 79H, 20H, 64H, 6FH, 77H, 6EH
   \              0x79 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \   00000010   0x6C 0x6F          DC8 6CH, 6FH, 61H, 64H, 65H, 64H, 20H, 66H
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x20 0x66    
   \   00000018   0x69 0x6C          DC8 69H, 6CH, 65H, 20H, 69H, 6EH, 20H, 73H
   \              0x65 0x20    
   \              0x69 0x6E    
   \              0x20 0x73    
   \   00000020   0x74 0x6F          DC8 74H, 6FH, 72H, 61H, 67H, 65H, 20H, 28H
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 73H, 69H, 6FH, 6EH, 20H
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 34H, 58H, 29H, 2EH, 0
   \              0x25 0x34    
   \              0x58 0x29    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 69H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x69    
   \   00000008   0x6C 0x65          DC8 6CH, 65H, 20H, 69H, 6EH, 20H, 73H, 74H
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 61H, 67H, 65H, 20H, 77H, 69H
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x77 0x69    
   \   00000018   0x74 0x68          DC8 74H, 68H, 20H, 64H, 69H, 66H, 66H, 65H
   \              0x20 0x64    
   \              0x69 0x66    
   \              0x66 0x65    
   \   00000020   0x72 0x65          DC8 72H, 65H, 6EH, 74H, 20H, 76H, 65H, 72H
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000028   0x73 0x69          DC8 73H, 69H, 6FH, 6EH, 20H, 28H, 30H, 78H
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x30 0x78    
   \   00000030   0x25 0x34          DC8 25H, 34H, 58H, 29H, 20H, 74H, 68H, 61H
   \              0x58 0x29    
   \              0x20 0x74    
   \              0x68 0x61    
   \   00000038   0x6E 0x20          DC8 6EH, 20H, 63H, 75H, 72H, 72H, 65H, 6EH
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \   00000040   0x74 0x20          DC8 74H, 20H, 76H, 65H, 72H, 73H, 69H, 6FH
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \   00000048   0x6E 0x20          DC8 6EH, 20H, 28H, 30H, 78H, 25H, 34H, 58H
   \              0x28 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \   00000050   0x29 0x00          DC8 29H, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x46 0x69          DC8 46H, 69H, 6CH, 65H, 20H, 69H, 6EH, 20H
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \   00000008   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 61H, 67H, 65H, 20H
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 61H, 6DH, 65H, 20H
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x65 0x20    
   \   00000018   0x61 0x73          DC8 61H, 73H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000020   0x6E 0x74          DC8 6EH, 74H, 20H, 72H, 75H, 6EH, 6EH, 69H
   \              0x20 0x72    
   \              0x75 0x6E    
   \              0x6E 0x69    
   \   00000028   0x6E 0x67          DC8 6EH, 67H, 20H, 76H, 65H, 72H, 73H, 69H
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 28H, 30H, 78H, 25H, 34H
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_26:
   \   00000000   0x4E 0x6F          DC8 "No image found in storage."
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x42 0x6F          DC8 "Bootload state: %p"
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x42 0x61          DC8 "Bad OTA command: 0x%X"
   \              0x64 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x4F 0x54          DC8 "OTA command 0x%X too short (len %d < min %d)"
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x6D    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 66H, 72H, 6FH, 6DH
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000010   0x20 0x75          DC8 20H, 75H, 6EH, 72H, 65H, 63H, 6FH, 67H
   \              0x6E 0x72    
   \              0x65 0x63    
   \              0x6F 0x67    
   \   00000018   0x6E 0x69          DC8 6EH, 69H, 7AH, 65H, 64H, 20H, 73H, 65H
   \              0x7A 0x65    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000020   0x72 0x76          DC8 72H, 76H, 65H, 72H, 20H, 30H, 78H, 25H
   \              0x65 0x72    
   \              0x20 0x30    
   \              0x78 0x25    
   \   00000028   0x32 0x58          DC8 32H, 58H, 2EH, 20H, 20H, 4DH, 79H, 20H
   \              0x2E 0x20    
   \              0x20 0x4D    
   \              0x79 0x20    
   \   00000030   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 73H, 65H, 72H, 76H
   \              0x41 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \   00000038   0x65 0x72          DC8 65H, 72H, 3AH, 20H, 30H, 78H, 25H, 32H
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \   00000040   0x58 0x00          DC8 58H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x47 0x6F          DC8 "Got unexpected %p.  Ignored."
   \              0x74 0x20    
   \              0x75 0x6E    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x70 0x2E    
   \              0x20 0x20    
   \              0x49 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x49 0x6D          DC8 "Image notify"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x49 0x6D          DC8 "Image Notify received %x\015\012"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x4E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x72    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_47:
   \   00000000   0x49 0x67          DC8 "Ignoring"
   \              0x6E 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x51 0x75          DC8 "Query next image response"
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x6E 0x65    
   \              0x78 0x74    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_53:
   \   00000000   0x25 0x70          DC8 "%p returned 0x%X.  No new image to download."
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x2E 0x20    
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_54:
   \   00000000   0x25 0x70          DC8 "%p too short (%d < %d)"
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_55:
   \   00000000   0x25 0x70          DC8 "%p: New image is available for download."
   \              0x3A 0x20    
   \              0x4E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable133:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable137_1:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable139:
   \   00000000   0x........         DC32     emAfOtaClientServiceDiscoveryCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable139_1:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x49 0x6D          DC8 "Image block response"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x55 0x70          DC8 "Upgrade end response"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_38:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146:
   \   00000000   0x........         DC32     emAfOtaMinMessageLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_1:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_2:
   \   00000000   0x........         DC32     emberAfResponseApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_3:
   \   00000000   0x........         DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_4:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_5:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_6:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_7:
   \   00000000   0x0036EE80         DC32     0x36ee80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_8:
   \   00000000   0x0036EE81         DC32     0x36ee81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable146_9:
   \   00000000   0x........         DC32     currentBootloadState+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ?_37:
   \   00000000   0x25 0x70          DC8 "%p: failed parsing OTA cmd 0x%x"
   \              0x3A 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_39:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 44H, 65H, 66H, 61H
   \              0x41 0x20    
   \              0x44 0x65    
   \              0x66 0x61    
   \   00000008   0x75 0x6C          DC8 75H, 6CH, 74H, 20H, 72H, 65H, 73H, 70H
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 73H, 65H, 20H, 74H, 6FH, 20H
   \              0x73 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000018   0x63 0x6F          DC8 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000020   0x49 0x44          DC8 49H, 44H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 20H
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 58H, 0
   \              0x25 0x58    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_40:
   \   00000000   0x25 0x70          DC8 "%p unicast, querying"
   \              0x20 0x75    
   \              0x6E 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x2C 0x20    
   \              0x71 0x75    
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_41:
   \   00000000   0x49 0x6D          DC8 "Image notify command"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_42:
   \   00000000   0x25 0x70          DC8 "%p %p payload type 0x%X"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x70 0x61    
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_43:
   \   00000000   0x49 0x6E          DC8 "Invalid"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_44:
   \   00000000   0x25 0x70          DC8 "%p %p: out of range jitter %d"
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x72 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x6A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_45:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 25H, 70H, 3AH, 20H, 70H
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x70    
   \   00000008   0x61 0x79          DC8 61H, 79H, 6CH, 6FH, 61H, 64H, 20H, 6CH
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x6C    
   \   00000010   0x65 0x6E          DC8 65H, 6EH, 67H, 74H, 68H, 20H, 64H, 6FH
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x64 0x6F    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6EH, 27H, 74H, 20H, 6DH, 61H
   \              0x6E 0x27    
   \              0x74 0x20    
   \              0x6D 0x61    
   \   00000020   0x74 0x63          DC8 74H, 63H, 68H, 20H, 74H, 79H, 70H, 65H
   \              0x68 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 20H, 28H, 25H
   \              0x78 0x25    
   \              0x58 0x20    
   \              0x28 0x25    
   \   00000030   0x64 0x20          DC8 64H, 20H, 3CH, 20H, 25H, 64H, 29H, 0
   \              0x3C 0x20    
   \              0x25 0x64    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_46:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching manufacturer ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x61    
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_48:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching image type ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_49:
   \   00000000   0x25 0x70          DC8 "%p %p due to matching firmware version"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x69    
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_50:
   \   00000000   0x25 0x70          DC8 "%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)"
   \              0x20 0x25    
   \              0x70 0x2C    
   \              0x20 0x52    
   \              0x78 0x27    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x2C    
   \              0x20 0x50    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_51:
   \   00000000   0x53 0x74          DC8 "Starting download, Version 0x%4X"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2C    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_52:
   \   00000000   0x45 0x72          DC8 "Error: Failed to erase old temp data."
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x20 0x6F    
   \              0x6C 0x64    
   \              0x20 0x74    
   \              0x65 0x6D    
   \              0x70 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_56:
   \   00000000   0x25 0x70          DC8 "%p is not using my image info."
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x79    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x2E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_57:
   \   00000000   0x45 0x52          DC8 45H, 52H, 52H, 4FH, 52H, 3AH, 20H, 4EH
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \   00000008   0x65 0x78          DC8 65H, 78H, 74H, 20H, 49H, 6DH, 61H, 67H
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \   00000010   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 74H, 6FH, 6FH
   \              0x69 0x73    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \   00000018   0x20 0x62          DC8 20H, 62H, 69H, 67H, 20H, 74H, 6FH, 20H
   \              0x69 0x67    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 65H, 20H, 28H, 30H
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x28 0x30    
   \   00000028   0x78 0x25          DC8 78H, 25H, 34H, 58H, 20H, 3EH, 20H, 30H
   \              0x34 0x58    
   \              0x20 0x3E    
   \              0x20 0x30    
   \   00000030   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 0
   \              0x34 0x58    
   \              0x29 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_58:
   \   00000000   0x53 0x65          DC8 "Sending Upgrade End request."
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x45 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_59:
   \   00000000   0x25 0x70          DC8 "%p: invalid cmdId 0x%x"
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x63 0x6D    
   \              0x64 0x49    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_60:
   \   00000000   0x45 0x72          DC8 45H, 72H, 72H, 6FH, 72H, 3AH, 20H, 20H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \   00000008   0x46 0x61          DC8 46H, 61H, 69H, 6CH, 65H, 64H, 20H, 74H
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000010   0x6F 0x20          DC8 6FH, 20H, 73H, 65H, 6EH, 64H, 20H, 4FH
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x4F    
   \   00000018   0x54 0x41          DC8 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH, 61H
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \   00000020   0x6E 0x64          DC8 6EH, 64H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 3AH
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \   00000030   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 0
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_61:
   \   00000000   0x53 0x65          DC8 "Server unknown, falling back to discovery."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x75    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x2C 0x20    
   \              0x66 0x61    
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x64 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_62:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x71 0x75          DC8 71H, 75H, 65H, 72H, 79H, 20H, 65H, 72H
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x65 0x72    
   \   00000010   0x72 0x6F          DC8 72H, 6FH, 72H, 73H, 20H, 68H, 69H, 74H
   \              0x72 0x73    
   \              0x20 0x68    
   \              0x69 0x74    
   \   00000018   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 2CH, 20H, 73H
   \              0x25 0x64    
   \              0x29 0x2C    
   \              0x20 0x73    
   \   00000020   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x73 0x65          DC8 73H, 65H, 61H, 72H, 63H, 68H, 20H, 66H
   \              0x61 0x72    
   \              0x63 0x68    
   \              0x20 0x66    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 20H, 6EH, 65H, 77H, 20H, 4FH
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x4F    
   \   00000038   0x54 0x41          DC8 54H, 41H, 20H, 73H, 65H, 72H, 76H, 65H
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \   00000040   0x72 0x2E          DC8 72H, 2EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_63:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x6E 0x75          DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 6FH
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \   00000010   0x66 0x20          DC8 66H, 20H, 64H, 6FH, 77H, 6EH, 6CH, 6FH
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \   00000018   0x61 0x64          DC8 61H, 64H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000020   0x73 0x20          DC8 73H, 20H, 72H, 65H, 61H, 63H, 68H, 20H
   \              0x72 0x65    
   \              0x61 0x63    
   \              0x68 0x20    
   \   00000028   0x28 0x25          DC8 28H, 25H, 64H, 29H, 2CH, 20H, 61H, 62H
   \              0x64 0x29    
   \              0x2C 0x20    
   \              0x61 0x62    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 74H, 69H, 6EH, 67H, 2EH, 0
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_64:
   \   00000000   0x43 0x6C          DC8 "Client verification failed."
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x56 0x65          DC8 "Verifying Image"
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x57 0x61          DC8 "Waiting for Upgrade message"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x43 0x6F          DC8 "Countdown to Upgrade"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x55    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_65:
   \   00000000   0x63 0x75          DC8 "custom Verify 0 (%x)\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x30 0x20    
   \              0x28 0x25    
   \              0x78 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_66:
   \   00000000   0x63 0x75          DC8 "custom Verify 1 (%x)\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x31 0x20    
   \              0x28 0x25    
   \              0x78 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_67:
   \   00000000   0x63 0x75          DC8 "custom Verify 2\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x32 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_68:
   \   00000000   0x63 0x75          DC8 "custom Verify 3\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x33 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_69:
   \   00000000   0x63 0x75          DC8 "custom Verify 4\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x34 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_70:
   \   00000000   0x63 0x75          DC8 "custom Verify 5\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x35 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_71:
   \   00000000   0x63 0x75          DC8 "custom Verify 6\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x36 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_72:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 73H, 69H, 67H, 6EH, 61H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \   00000008   0x74 0x75          DC8 74H, 75H, 72H, 65H, 20H, 76H, 65H, 72H
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000010   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 69H, 6FH
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 73H, 75H, 70H, 70H, 6FH, 72H
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \   00000020   0x74 0x2C          DC8 74H, 2CH, 20H, 61H, 73H, 73H, 75H, 6DH
   \              0x20 0x61    
   \              0x73 0x73    
   \              0x75 0x6D    
   \   00000028   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 69H, 6DH, 61H, 67H
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \   00000030   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 6FH, 6BH, 61H
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6B 0x61    
   \   00000038   0x79 0x2E          DC8 79H, 2EH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_73:
   \   00000000   0x63 0x75          DC8 "custom Verify 7\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x37 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_74:
   \   00000000   0x25 0x70          DC8 "%p verification %p: 0x%X"
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_75:
   \   00000000   0x53 0x69          DC8 "Signature"
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_76:
   \   00000000   0x43 0x75          DC8 "Custom"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_77:
   \   00000000   0x70 0x61          DC8 "passed"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_78:
   \   00000000   0x46 0x41          DC8 "FAILED"
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_79:
   \   00000000   0x63 0x75          DC8 "custom Verify 8\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x38 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_80:
   \   00000000   0x63 0x75          DC8 "custom Verify 9\015\012"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x79 0x20    
   \              0x39 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_81:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 20H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \   00000010   0x72 0x65          DC8 72H, 65H, 71H, 75H, 65H, 73H, 74H, 73H
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x73    
   \   00000018   0x20 0x6D          DC8 20H, 6DH, 61H, 64H, 65H, 20H, 28H, 25H
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000020   0x64 0x29          DC8 64H, 29H, 20H, 77H, 69H, 74H, 68H, 6FH
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x6F    
   \   00000028   0x75 0x74          DC8 75H, 74H, 20H, 72H, 65H, 73H, 70H, 6FH
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 65H, 20H, 66H, 72H, 6FH, 6DH
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000038   0x20 0x73          DC8 20H, 73H, 65H, 72H, 76H, 65H, 72H, 2EH
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x2E    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_82:
   \   00000000   0x55 0x70          DC8 "Upgrading anyway"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x61 0x6E    
   \              0x79 0x77    
   \              0x61 0x79    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_83:
   \   00000000   0x55 0x70          DC8 "Updating Min Block Request Period to %d seconds"
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x4D    
   \              0x69 0x6E    
   \              0x20 0x42    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x52    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x20 0x50    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_84:
   \   00000000   0x44 0x6F          DC8 "Download delay by server %d ms"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_85:
   \   00000000   0x44 0x6F          DC8 "Download aborted by server."
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_86:
   \   00000000   0x53 0x65          DC8 53H, 65H, 72H, 76H, 65H, 72H, 20H, 64H
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x64    
   \   00000008   0x6F 0x65          DC8 6FH, 65H, 73H, 6EH, 27H, 74H, 20H, 73H
   \              0x73 0x6E    
   \              0x27 0x74    
   \              0x20 0x73    
   \   00000010   0x75 0x70          DC8 75H, 70H, 70H, 6FH, 72H, 74H, 20H, 70H
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x70    
   \   00000018   0x61 0x67          DC8 61H, 67H, 65H, 20H, 72H, 65H, 71H, 75H
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000020   0x65 0x73          DC8 65H, 73H, 74H, 2CH, 20H, 6FH, 6EH, 6CH
   \              0x74 0x2C    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \   00000028   0x79 0x20          DC8 79H, 20H, 75H, 73H, 69H, 6EH, 67H, 20H
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000030   0x62 0x6C          DC8 62H, 6CH, 6FH, 63H, 6BH, 20H, 72H, 65H
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \   00000038   0x71 0x75          DC8 71H, 75H, 65H, 73H, 74H, 2EH, 0
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_87:
   \   00000000   0x53 0x65          DC8 "Server returned 'unsupported cluster command'."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x27 0x75    
   \              0x6E 0x73    
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x27 0x2E    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_88:
   \   00000000   0x55 0x6E          DC8 "Unknown %p status code 0x%X"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_89:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 68H, 61H, 73H, 20H, 64H
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x64    
   \   00000008   0x61 0x74          DC8 61H, 74H, 61H, 20H, 73H, 69H, 7AH, 65H
   \              0x61 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \   00000010   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 20H, 73H, 6DH
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x73 0x6D    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 6CH, 65H, 72H, 20H, 74H, 68H
   \              0x6C 0x65    
   \              0x72 0x20    
   \              0x74 0x68    
   \   00000020   0x61 0x6E          DC8 61H, 6EH, 20H, 61H, 63H, 74H, 75H, 61H
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000028   0x6C 0x20          DC8 6CH, 20H, 70H, 61H, 63H, 6BH, 65H, 74H
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \   00000030   0x20 0x73          DC8 20H, 73H, 69H, 7AH, 65H, 20H, 28H, 25H
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000038   0x64 0x29          DC8 64H, 29H, 2EH, 0
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_90:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 45H, 78H, 70H, 65H, 63H, 74H
   \              0x45 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \   00000010   0x65 0x64          DC8 65H, 64H, 20H, 6FH, 66H, 66H, 73H, 65H
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000018   0x74 0x20          DC8 74H, 20H, 30H, 78H, 25H, 34H, 58H, 2CH
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x2C    
   \   00000020   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 67H, 6FH, 74H
   \              0x75 0x74    
   \              0x20 0x67    
   \              0x6F 0x74    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 34H, 58H, 2EH, 20H
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x2E 0x20    
   \   00000030   0x20 0x49          DC8 20H, 49H, 67H, 6EH, 6FH, 72H, 69H, 6EH
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x69 0x6E    
   \   00000038   0x67 0x00          DC8 67H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_91:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 69H, 6EH, 66H, 6FH, 20H
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \   00000008   0x64 0x69          DC8 64H, 69H, 64H, 20H, 6EH, 6FH, 74H, 20H
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \   00000010   0x6D 0x61          DC8 6DH, 61H, 74H, 63H, 68H, 20H, 6DH, 79H
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x6D 0x79    
   \   00000018   0x20 0x65          DC8 20H, 65H, 78H, 70H, 65H, 63H, 74H, 65H
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \   00000020   0x64 0x20          DC8 64H, 20H, 69H, 6EH, 66H, 6FH, 2EH, 20H
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x2E 0x20    
   \   00000028   0x20 0x44          DC8 20H, 44H, 72H, 6FH, 70H, 70H, 69H, 6EH
   \              0x72 0x6F    
   \              0x70 0x70    
   \              0x69 0x6E    
   \   00000030   0x67 0x2E          DC8 67H, 2EH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_92:
   \   00000000   0x46 0x61          DC8 "Failed to write to storage device!"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_93:
   \   00000000   0x44 0x6F          DC8 "Download"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_94:
   \   00000000   0x53 0x65          DC8 "Server aborted upgrade, status: 0x%X"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_95:
   \   00000000   0x45 0x72          DC8 "Error: %p had invalid %p: "
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x68 0x61    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_96:
   \   00000000   0x6D 0x61          DC8 "manufacturer ID"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_97:
   \   00000000   0x30 0x78          DC8 "0x%2X"
   \              0x25 0x32    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_98:
   \   00000000   0x69 0x6D          DC8 "image type ID"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_99:
   \   00000000   0x66 0x69          DC8 "file version"
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_100:
   \   00000000   0x30 0x78          DC8 "0x%4X"
   \              0x25 0x34    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_101:
   \   00000000   0x41 0x64          DC8 "Adding %d ms. delay for immediate upgrade."
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x2E 0x20    
   \              0x64 0x65    
   \              0x6C 0x61    
   \              0x79 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x69 0x6D    
   \              0x6D 0x65    
   \              0x64 0x69    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x75 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_102:
   \   00000000   0x43 0x6F          DC8 "Countdown to upgrade: %d ms"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_103:
   \   00000000   0x25 0x70          DC8 25H, 70H, 3AH, 20H, 69H, 6EH, 76H, 61H
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \   00000008   0x6C 0x69          DC8 6CH, 69H, 64H, 20H, 6FH, 66H, 66H, 73H
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x66 0x73    
   \   00000010   0x65 0x74          DC8 65H, 74H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000018   0x6E 0x74          DC8 6EH, 74H, 54H, 69H, 6DH, 65H, 28H, 30H
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x28 0x30    
   \   00000020   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 20H, 3EH, 20H
   \              0x34 0x58    
   \              0x29 0x20    
   \              0x3E 0x20    
   \   00000028   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 54H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x54    
   \   00000030   0x69 0x6D          DC8 69H, 6DH, 65H, 28H, 30H, 78H, 25H, 34H
   \              0x65 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_104:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: wait for %d s"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x77    
   \              0x61 0x69    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x73    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_105:
   \   00000000   0x52 0x58          DC8 "RXed timeOut 0x%4X s, MAX timeOut 0x%4X s"
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x4F    
   \              0x75 0x74    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x20 0x73    
   \              0x2C 0x20    
   \              0x4D 0x41    
   \              0x58 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x73 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_106:
   \   00000000   0x41 0x70          DC8 "Applying upgrade"
   \              0x70 0x6C    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_107:
   \   00000000   0x49 0x6D          DC8 49H, 6DH, 61H, 67H, 65H, 20H, 62H, 6CH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \   00000008   0x6F 0x63          DC8 6FH, 63H, 6BH, 20H, 72H, 65H, 71H, 75H
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000010   0x65 0x73          DC8 65H, 73H, 74H, 20H, 74H, 65H, 73H, 74H
   \              0x74 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 6EH, 6CH, 79H, 20H, 77H, 6FH
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x77 0x6F    
   \   00000020   0x72 0x6B          DC8 72H, 6BH, 73H, 20H, 77H, 68H, 65H, 6EH
   \              0x73 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 65H, 20H, 69H
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \   00000030   0x73 0x20          DC8 73H, 20H, 42H, 4FH, 4FH, 54H, 4CH, 4FH
   \              0x42 0x4F    
   \              0x4F 0x54    
   \              0x4C 0x4F    
   \   00000038   0x41 0x44          DC8 41H, 44H, 5FH, 53H, 54H, 41H, 54H, 45H
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \   00000040   0x5F 0x4E          DC8 5FH, 4EH, 4FH, 4EH, 45H, 0
   \              0x4F 0x4E    
   \              0x45 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x79 0x65          DC8 "yes"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x6E 0x6F          DC8 "no"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   askServerToRunUpgrade
         8   -> emberAfPrintln
         8   -> recordUpgradeStatus
         0   -> runUpgrade
      16   calculateTimer
        16   -> emberAfPrintln
      24   commandParse
        24   -> emberAfPrint
        24   -> emberAfPrintln
      24   continueImageDownload
        24   -> downloadAndVerifyFinish
        24   -> emAfGetCurrentPageRequestStatus
        24   -> emAfInitPageRequestClient
        24   -> emAfNextMissedBlockRequestOffset
        24   -> emberAfPrintln
        24   -> getCurrentOffset
        24   -> recordUpgradeStatus
        24   -> sendMessage
        24   -> setTimer
        24   -> updateCurrentOffset
      40   continueImageVerification
        40   -> downloadAndVerifyFinish
        40   -> emAfOtaImageSignatureVerify
        40   -> emberAfOtaClientCustomVerifyCallback
        40   -> emberAfOtaStorageCheckTempDataCallback
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> recordUpgradeStatus
        40   -> setTimer
      64   determineDownloadFileStatus
        64   -> __aeabi_memcpy4
        64   -> emAfPrintPercentageSetStartAndEnd
        64   -> emberAfIsOtaImageIdValid
        64   -> emberAfOtaClientVersionInfoCallback
        64   -> emberAfOtaStorageCheckTempDataCallback
        64   -> emberAfOtaStorageDeleteImageCallback
        64   -> emberAfOtaStorageSearchCallback
        64   -> emberAfPrintln
        64   -> updateCurrentOffset
        64   -> updateDownloadFileVersion
      16   downloadAndVerifyFinish
        16   -> askServerToRunUpgrade
        16   -> emberAfOtaClientDownloadCompleteCallback
        16   -> emberAfPrintln
        16   -> queryNextImage
        16   -> sendMessage
       8   emAfOtaClientPrintState
         8   -> emAfCalculatePercentage
         0   -> emberAfPrintln
         8   -> emberAfPrintln
         8   -> getCurrentOffset
      16   emAfOtaClientServiceDiscoveryCallback
        16   -> emberAfFindIeeeAddress
        16   -> emberAfPrintln
        16   -> emberLookupEui64ByNodeId
        16   -> euiLookupErrorOccurred
        16   -> halCommonMemCopy
        16   -> recordServerEuiAndGoToNextState
        16   -> recordUpgradeStatus
        16   -> restartServerDiscoveryAfterDelay
       8   emAfOtaClientStop
         8   -> downloadAndVerifyFinish
         0   -> emberAfDeactivateClientTick
         8   -> recordUpgradeStatus
       0   emAfOtaVerifyStoredDataFinish
         0   -> continueImageVerification
       8   emAfSendImageBlockRequestTest
         0   -> sendMessage
         8   -> updateCurrentOffset
       0   emAfSetPageRequest
       0   emAfUsingPageRequest
       8   emberAfOtaBootloadClusterClientDefaultResponseCallback
         8   -> emberAfPrintln
      32   emberAfOtaBootloadClusterClientInitCallback
        32   -> emAfOtaClientStop
        32   -> emberAfEndpointEnableDisable
        32   -> emberAfOtaClientVersionInfoCallback
        32   -> emberAfOtaStorageInitCallback
        32   -> emberAfPrintln
        32   -> isEepromAvailable
       0   emberAfOtaBootloadClusterClientTickCallback
         0   -> otaClientTick
      16   emberAfOtaClientIncomingMessageRawCallback
        16   -> commandParse
        16   -> emberAfPrintln
        16   -> emberAfSendDefaultResponse
       8   emberAfOtaClientStartCallback
         8   -> isEepromAvailable
         8   -> startServerDiscovery
       8   emberAfPluginAuroraOtaClientStackStatusCallback
         8   -> emberAfPrintln
         8   -> halCommonGetRandom
         8   -> isEepromAvailable
         8   -> recordUpgradeStatus
       0   emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
         0   -> downloadAndVerifyFinish
         0   -> otaClientTick
       0   euiLookupErrorOccurred
         0   -> restartServerDiscoveryAfterDelay
      24   getCurrentOffset
        24   -> emberAfReadAttribute
      64   imageBlockResponseParse
        64   -> calculateTimer
        64   -> continueImageDownload
        64   -> continueImageVerification
        64   -> downloadAndVerifyFinish
        64   -> emAfAbortPageRequest
        64   -> emAfGetCurrentPageRequestStatus
        64   -> emAfGetFinishedPageRequestOffset
        64   -> emAfGetPageRequestMissedPacketDelayMs
        64   -> emAfHandlingPageRequestClient
        64   -> emAfNoteReceivedBlockForPageRequestClient
        64   -> emAfOtaParseImageIdFromMessage
        64   -> emAfPrintPercentageUpdate
        64   -> emberAfGetInt16u
        64   -> emberAfGetInt32u
        64   -> emberAfOtaStorageFinishDownloadCallback
        64   -> emberAfOtaStorageWriteTempDataCallback
        64   -> emberAfPrintln
        64   -> getCurrentOffset
        64   -> halCommonMemCompare
        64   -> setTimer
        64   -> updateCurrentOffset
      64   imageNotifyParse
        64   -> emberAfGetInt16u
        64   -> emberAfGetInt32u
        64   -> emberAfOtaClientVersionInfoCallback
        64   -> emberAfPrintln
        64   -> halCommonGetRandom
        64   -> queryNextImage
      16   otaClientTick
        16   -> emAfPageRequestTimerExpired
        16   -> emberAfPrintln
         0   -> queryNextImage
       8   putImageInfoInMessage
         8   -> emberAfPutInt16uInResp
         0   -> emberAfPutInt32uInResp
      16   queryNextImage
        16   -> emberAfOtaClientVersionInfoCallback
        16   -> emberAfPrintln
        16   -> recordUpgradeStatus
         0   -> setTimer
      72   queryNextImageResponseParse
        72   -> __aeabi_memcpy4
        72   -> continueImageDownload
        72   -> downloadAndVerifyFinish
        72   -> emAfOtaParseImageIdFromMessage
        72   -> emAfPrintPercentageSetStartAndEnd
        72   -> emberAfDeactivateClientTick
        72   -> emberAfGetInt32u
        72   -> emberAfIsOtaImageIdValid
        72   -> emberAfOtaStorageClearTempDataCallback
        72   -> emberAfOtaStorageDeleteImageCallback
        72   -> emberAfOtaStorageDriverMaxDownloadSizeCallback
        72   -> emberAfOtaStorageSearchCallback
        72   -> emberAfPrintln
        72   -> queryNextImage
        72   -> recordUpgradeStatus
        72   -> updateCurrentOffset
        72   -> updateDownloadFileVersion
      24   recordServerEuiAndGoToNextState
        24   -> continueImageDownload
        24   -> determineDownloadFileStatus
        24   -> emberAfOtaStorageDriverPrepareToResumeDownloadCallback
        24   -> emberAfPrintln
        24   -> emberAfWriteAttribute
         0   -> queryNextImage
        24   -> recordUpgradeStatus
      24   recordUpgradeStatus
        24   -> emberAfPrintln
        24   -> emberAfWriteAttribute
       8   restartServerDiscoveryAfterDelay
         0   -> recordUpgradeStatus
         8   -> setTimer
       8   runUpgrade
         8   -> emberAfOtaClientBootloadCallback
         8   -> emberAfPrintln
         0   -> queryNextImage
      40   sendMessage
        40   -> emberAfGetEui64
        40   -> emberAfIndexFromEndpoint
        40   -> emberAfNextSequence
        40   -> emberAfPrintln
        40   -> emberAfPutBlockInResp
        40   -> emberAfPutInt16uInResp
        40   -> emberAfPutInt32uInResp
        40   -> emberAfPutInt8uInResp
        40   -> emberAfSendCommandUnicast
        40   -> getCurrentOffset
        40   -> putImageInfoInMessage
        40   -> setTimer
      24   setTimer
        24   -> emAfGetCurrentPageRequestStatus
        24   -> emberAfScheduleClientTickExtended
      16   startServerDiscovery
        16   -> emberAfFindDevicesByProfileAndCluster
        16   -> emberAfIndexFromEndpoint
        16   -> emberAfPrintln
        16   -> recordUpgradeStatus
         0   -> setTimer
      16   updateCurrentOffset
        16   -> emberAfWriteAttribute
       0   updateDownloadFileVersion
      40   upgradeEndResponseParse
        40   -> calculateTimer
        40   -> downloadAndVerifyFinish
        40   -> emAfOtaParseImageIdFromMessage
        40   -> emberAfGetInt32u
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> recordUpgradeStatus
        40   -> setTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable128
       4  ??DataTable128_1
       4  ??DataTable133
       4  ??DataTable137
       4  ??DataTable137_1
       4  ??DataTable139
       4  ??DataTable139_1
       4  ??DataTable146
       4  ??DataTable146_1
       4  ??DataTable146_2
       4  ??DataTable146_3
       4  ??DataTable146_4
       4  ??DataTable146_5
       4  ??DataTable146_6
       4  ??DataTable146_7
       4  ??DataTable146_8
       4  ??DataTable146_9
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
       6  ?Subroutine5
       8  ?Subroutine6
      12  ?Subroutine7
       8  ?_0
      28  ?_1
      24  ?_10
       8  ?_100
      44  ?_101
      28  ?_102
      60  ?_103
      28  ?_104
      44  ?_105
      20  ?_106
      72  ?_107
      48  ?_11
      32  ?_12
      16  ?_13
      28  ?_14
       4  ?_15
       4  ?_16
      28  ?_17
      40  ?_18
      52  ?_19
      24  ?_2
      28  ?_20
      40  ?_21
      60  ?_22
      56  ?_23
      84  ?_24
      60  ?_25
      28  ?_26
      20  ?_27
      24  ?_28
      48  ?_29
      20  ?_3
      68  ?_30
      32  ?_31
      16  ?_32
      28  ?_33
      28  ?_34
      24  ?_35
      24  ?_36
      32  ?_37
       8  ?_38
      56  ?_39
      16  ?_4
      24  ?_40
      24  ?_41
      24  ?_42
       8  ?_43
      32  ?_44
      56  ?_45
      44  ?_46
      12  ?_47
      40  ?_48
      40  ?_49
      20  ?_5
      48  ?_50
      36  ?_51
      40  ?_52
      48  ?_53
      24  ?_54
      44  ?_55
      32  ?_56
      56  ?_57
      32  ?_58
      24  ?_59
      20  ?_6
      56  ?_60
      44  ?_61
      68  ?_62
      56  ?_63
      28  ?_64
      24  ?_65
      24  ?_66
      20  ?_67
      20  ?_68
      20  ?_69
      16  ?_7
      20  ?_70
      20  ?_71
      60  ?_72
      20  ?_73
      28  ?_74
      12  ?_75
       8  ?_76
       8  ?_77
       8  ?_78
      20  ?_79
      28  ?_8
      20  ?_80
      68  ?_81
      20  ?_82
      48  ?_83
      32  ?_84
      28  ?_85
      64  ?_86
      48  ?_87
      28  ?_88
      60  ?_89
      24  ?_9
      60  ?_90
      52  ?_91
      36  ?_92
      12  ?_93
      40  ?_94
      28  ?_95
      16  ?_96
       8  ?_97
      16  ?_98
      16  ?_99
      62  askServerToRunUpgrade
      12  bootloadStateToExternalState
      74  calculateTimer
     258  commandParse
     108  continueImageDownload
     286  continueImageVerification
      80  currentBootloadState
          myEndpoint
          serverEndpoint
          errors
          waitingForResponse
          usePageRequest
          customVerifyStatus
          currentDownloadFile
          serverNodeId
          hardwareVersion
          minBlockRequestPeriod
          bootloadStateNames
          totalImageSize
          nextEventTimer
     176  determineDownloadFileStatus
      92  downloadAndVerifyFinish
      86  emAfOtaClientPrintState
     130  emAfOtaClientServiceDiscoveryCallback
      34  emAfOtaClientStop
       1  emAfOtaClientStopDownloadPercentage
      14  emAfOtaVerifyStoredDataFinish
      56  emAfSendImageBlockRequestTest
       6  emAfSetPageRequest
       6  emAfUsingPageRequest
      44  emberAfOtaBootloadClusterClientDefaultResponseCallback
      68  emberAfOtaBootloadClusterClientInitCallback
       2  emberAfOtaBootloadClusterClientTickCallback
      46  emberAfOtaClientIncomingMessageRawCallback
      30  emberAfOtaClientStartCallback
      56  emberAfPluginAuroraOtaClientStackStatusCallback
      26  emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
      10  euiLookupErrorOccurred
      44  getCurrentOffset
     514  imageBlockResponseParse
     256  imageNotifyParse
       4  imageNotifyPayloadLengths
     146  otaClientTick
      28  putImageInfoInMessage
     112  queryNextImage
     326  queryNextImageResponseParse
     130  recordServerEuiAndGoToNextState
      60  recordUpgradeStatus
      18  restartServerDiscoveryAfterDelay
      26  runUpgrade
     294  sendMessage
      80  setTimer
      84  startServerDiscovery
      32  updateCurrentOffset
       8  updateDownloadFileVersion
     264  upgradeEndResponseParse
       8  zclStatusFromResult

 
    81 bytes in section .data
   212 bytes in section .rodata
 7 530 bytes in section .text
 
 7 530 bytes of CODE  memory
   212 bytes of CONST memory
    81 bytes of DATA  memory

Errors: none
Warnings: 2
