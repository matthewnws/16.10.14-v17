###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\Aurora_dimmer_callbacks.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\Aurora_dimmer_callbacks.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"Aurora_dimmer_callbacks.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\Aurora_dimmer_callbacks.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\Aurora_dimmer_callbacks.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\Aurora_dimmer_callbacks.c
      1          //
      2          
      3          // This callback file is created for your convenience. You may add application
      4          // code to this file. If you regenerate this file over a previous version, the
      5          // previous version will be overwritten and any code you have added will be
      6          // lost.
      7          
      8          #include <string.h>
      9          #include "app/framework/include/af.h"
     10          #include "app/framework/plugin/aurora-button-joining/aurora-button-joining.h"
     11          #include "app/framework/plugin/aurora-button-joining/aurora-button-joining-hal.h"
     12          #include "app/framework/plugin/aurora-pwm/aurora-pwm.h"
     13          #include "app/framework/plugin/aurora-pwm/aurora-pwm-hal.h"
     14          #include "app/framework/plugin/aurora-colour-control/aurora-colour-control.h"
     15          #include "app/framework/plugin/aurora-level-control/aurora-level-control-hal.h"
     16          #include "app/framework/plugin/aurora-host-protocol/aurora-host-plc-protocol.h"
     17          #include "app/framework/plugin/aurora-host-protocol/aurora-host-protocol.h"
     18          #include "app/framework/plugin/aurora-host-protocol/aurora-host-hal.h"
     19          #include "app/framework/plugin/aurora-colour-control/aurora-colour-conversion.h"
     20          #include "app/framework/plugin/tunneling-server/tunneling-server.h"
     21          
     22          typedef struct {
     23              boolean open;
     24              int16u tunnelId;
     25              int8u protocolId;
     26              int16u manufacturerCode;
     27              boolean flowControlSupport;
     28              int16u maximumIncomingTransferSize;
     29          } tTunnelStatus;
     30          

   \                                 In section .bss, align 4
     31          tTunnelStatus tunnelStatus = {0};
   \                     tunnelStatus:
   \   00000000                      DS8 12
     32          
     33          /** @brief Move To Color - ZCL cmd callback
     34           *
     35           * @param colorX   Ver.: always
     36           * @param colorY   Ver.: always
     37           * @param transitionTime   Ver.: always
     38           */

   \                                 In section .text, align 2, keep-with-next
     39          boolean emberAfColorControlClusterMoveToColorCallback(int16u colorX,
     40                                                                int16u colorY,
     41                                                                int16u transitionTime)
     42          {
   \                     emberAfColorControlClusterMoveToColorCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     43              EmberAfStatus status = emberAfPluginAuroraColourControlMoveToColor(colorX, colorY, transitionTime);    
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraColourControlMoveToColor
     44              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.      
   \   00000006   0x....             B.N      ?Subroutine0
     45              return TRUE;
     46          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
     47          
     48          /** @brief Move Color - ZCL cmd callback
     49           *
     50           * @param rateX   Ver.: always
     51           * @param rateY   Ver.: always
     52           */

   \                                 In section .text, align 2, keep-with-next
     53          boolean emberAfColorControlClusterMoveColorCallback(int16s rateX,
     54                                                              int16s rateY)
     55          {
   \                     emberAfColorControlClusterMoveColorCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     56              EmberAfStatus status = emberAfPluginAuroraColourControlMoveColor(rateX, rateY);
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraColourControlMoveColor
     57              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.      
   \   00000006                      REQUIRE ?Subroutine0
   \   00000006                      ;; // Fall through to label ?Subroutine0
     58              return TRUE;
     59          }
     60          
     61          /** @brief Step Color - ZCL cmd callback
     62           *
     63           * @param stepX   Ver.: always
     64           * @param stepY   Ver.: always
     65           * @param transitionTime   Ver.: always
     66           */

   \                                 In section .text, align 2, keep-with-next
     67          boolean emberAfColorControlClusterStepColorCallback(int16s stepX,
     68                                                              int16s stepY,
     69                                                              int16u transitionTime)
     70          {
   \                     emberAfColorControlClusterStepColorCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     71              EmberAfStatus status = emberAfPluginAuroraColourControlStepColor(stepX, stepY, transitionTime);
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraColourControlStepColor
     72              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.      
   \   00000006   0x....             B.N      ?Subroutine0
     73              return TRUE;
     74          }
     75          
     76          /** @brief Move To Color Temperature
     77           *
     78           * 
     79           *
     80           * @param colorTemperature   Ver.: always
     81           * @param transitionTime   Ver.: always
     82           */

   \                                 In section .text, align 2, keep-with-next
     83          boolean emberAfColorControlClusterMoveToColorTemperatureCallback(int16u colorTemperature,
     84                                                                           int16u transitionTime)
     85          {
   \                     emberAfColorControlClusterMoveToColorTemperatureCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     86              EmberAfStatus status =  emberAfPluginAuroraColourControlMoveToColorTemperature(colorTemperature, transitionTime);
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraColourControlMoveToColorTemperature
     87              emberAfSendImmediateDefaultResponse(status);  // Send ZCl cmd default response.      
   \   00000006   0x....             B.N      ?Subroutine0
     88              return TRUE;
     89          }
     90          
     91          /** @brief Match Protocol Address
     92           *
     93           * @param protocolAddress   Ver.: always
     94           */

   \                                 In section .text, align 2, keep-with-next
     95          boolean emberAfGenericTunnelClusterMatchProtocolAddressCallback(int8u* protocolAddress)
     96          {
     97            return FALSE;
   \                     emberAfGenericTunnelClusterMatchProtocolAddressCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     98          }
     99          
    100          /** @brief Image Block Response
    101           *
    102           * 
    103           *
    104           * @param status   Ver.: always
    105           * @param manufacturerId   Ver.: always
    106           * @param imageType   Ver.: always
    107           * @param fileVersion   Ver.: always
    108           * @param fileOffset   Ver.: always
    109           * @param dataSize   Ver.: always
    110           * @param imageData   Ver.: always
    111           */

   \                                 In section .text, align 2, keep-with-next
    112          boolean emberAfOtaBootloadClusterImageBlockResponseCallback(int8u status,
    113                                                                      int16u manufacturerId,
    114                                                                      int16u imageType,
    115                                                                      int32u fileVersion,
    116                                                                      int32u fileOffset,
    117                                                                      int8u dataSize,
    118                                                                      int8u* imageData)
    119          {
    120            return FALSE;
   \                     emberAfOtaBootloadClusterImageBlockResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    121          }
    122          
    123          /** @brief Upgrade End Response
    124           *
    125           * 
    126           *
    127           * @param manufacturerId   Ver.: always
    128           * @param imageType   Ver.: always
    129           * @param fileVersion   Ver.: always
    130           * @param currentTime   Ver.: always
    131           * @param upgradeTime   Ver.: always
    132           */

   \                                 In section .text, align 2, keep-with-next
    133          boolean emberAfOtaBootloadClusterUpgradeEndResponseCallback(int16u manufacturerId,
    134                                                                      int16u imageType,
    135                                                                      int32u fileVersion,
    136                                                                      int32u currentTime,
    137                                                                      int32u upgradeTime)
    138          {
    139            return FALSE;
   \                     emberAfOtaBootloadClusterUpgradeEndResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    140          }
    141          
    142          /** @brief Query Next Image Response
    143           *
    144           * 
    145           *
    146           * @param status   Ver.: always
    147           * @param manufacturerId   Ver.: always
    148           * @param imageType   Ver.: always
    149           * @param fileVersion   Ver.: always
    150           * @param imageSize   Ver.: always
    151           */

   \                                 In section .text, align 2, keep-with-next
    152          boolean emberAfOtaBootloadClusterQueryNextImageResponseCallback(int8u status,
    153                                                                          int16u manufacturerId,
    154                                                                          int16u imageType,
    155                                                                          int32u fileVersion,
    156                                                                          int32u imageSize)
    157          {
    158            return FALSE;
   \                     emberAfOtaBootloadClusterQueryNextImageResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    159          }
    160          
    161          /** @brief Main Start
    162           *
    163           * This function is called at the start of main after the HAL has been
    164           * initialized.  The standard main function arguments of argc and argv are
    165           * passed in.  However not all platforms have support for main() function
    166           * arguments.  Those that do not are passed NULL for argv, therefore argv should
    167           * be checked for NULL before using it.  If the callback determines that the
    168           * program must exit, it should return TRUE.  The value returned by main() will
    169           * be the value written to the returnCode pointer.  Otherwise the callback
    170           * should return FALSE to let normal execution continue.
    171           *
    172           * @param returnCode   Ver.: always
    173           * @param argc   Ver.: always
    174           * @param argv   Ver.: always
    175           */

   \                                 In section .text, align 2, keep-with-next
    176          boolean emberAfMainStartCallback(int* returnCode,
    177                                           int argc,
    178                                           char** argv)
    179          {
    180            // NOTE:  argc and argv may not be supported on all platforms, so argv MUST be
    181            // checked for NULL before referencing it.  On those platforms without argc 
    182            // and argv "0" and "NULL" are passed respectively.
    183            
    184            return FALSE;  // exit?
   \                     emberAfMainStartCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    185          }
    186          
    187          /** @brief Main Init
    188           *
    189           * This function is called from the application's main function. It gives the
    190           * application a chance to do any initialization required at system startup. Any
    191           * code that you would normally put into the top of the application's main()
    192           * routine should be put into this function.
    193           */

   \                                 In section .text, align 2, keep-with-next
    194          void emberAfMainInitCallback(void)
    195          {  
   \                     emberAfMainInitCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    196              emberAfDebugPrintln("\r\n*** Aurora Light Dimmmer ***");    
   \   00000002   0x.... 0x....      ADR.W    R1,?_0
   \   00000006   0x.... 0x....      BL       ?Subroutine2
    197              emberAfDebugPrintln("Module fw version: 0x%2X", EMBER_AF_PLUGIN_AURORA_OTA_CLIENT_POLICY_FIRMWARE_VERSION2);    
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000000A   0x2211             MOVS     R2,#+17
   \   0000000C   0x.... 0x....      ADR.W    R1,?_1
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0x.... 0x....      BL       emberAfPrintln
    198              
    199          #ifdef AONE_HW_USE_JOIN_INPUT_ON_PB6
    200              emberAfDebugPrintln("AONE Hw, using alternate joining pin=PB6");
    201          #endif
    202          
    203              int8u mode = getAuroraDimmerMode();  
   \   00000016   0x.... 0x....      BL       getAuroraDimmerMode
   \   0000001A   0x4604             MOV      R4,R0
    204              emberAfDebugPrint("AURORA_MODE=%d, ", mode);    
   \   0000001C   0x4622             MOV      R2,R4
   \   0000001E   0x.... 0x....      ADR.W    R1,?_2
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       emberAfPrint
    205              switch (mode) 
   \   00000028   0xB12C             CBZ.N    R4,??emberAfMainInitCallback_0
   \   0000002A   0x2C02             CMP      R4,#+2
   \   0000002C   0xD008             BEQ.N    ??emberAfMainInitCallback_1
   \   0000002E   0xD305             BCC.N    ??emberAfMainInitCallback_2
   \   00000030   0x2C03             CMP      R4,#+3
   \   00000032   0xD007             BEQ.N    ??emberAfMainInitCallback_3
   \   00000034   0xE008             B.N      ??emberAfMainInitCallback_4
    206              {
    207                  case AURORA_MODE_RGBW:
    208                  {
    209                      emberAfDebugPrintln("RGBW");
   \                     ??emberAfMainInitCallback_0: (+1)
   \   00000036   0x.... 0x....      ADR.W    R1,?_3
   \   0000003A   0xE007             B.N      ??emberAfMainInitCallback_5
    210                      break;        
    211                  }
    212                  case AURORA_MODE_CX:
    213                  {
    214                      emberAfDebugPrintln("CX");
   \                     ??emberAfMainInitCallback_2: (+1)
   \   0000003C   0x....             ADR.N    R1,??DataTable17  ;; 0x43, 0x58, 0x00, 0x00
   \   0000003E   0xE005             B.N      ??emberAfMainInitCallback_5
    215                      break;        
    216                  }
    217                  case AURORA_MODE_DIM:
    218                  {
    219                      emberAfDebugPrintln("DIM");
   \                     ??emberAfMainInitCallback_1: (+1)
   \   00000040   0x....             ADR.N    R1,??DataTable17_1  ;; "DIM"
   \   00000042   0xE003             B.N      ??emberAfMainInitCallback_5
    220                      break;
    221                  }    
    222                  case AURORA_MODE_PLC:
    223                  {
    224                      emberAfDebugPrintln("PLC");
   \                     ??emberAfMainInitCallback_3: (+1)
   \   00000044   0x....             ADR.N    R1,??DataTable17_2  ;; "PLC"
   \   00000046   0xE001             B.N      ??emberAfMainInitCallback_5
    225                      break;
    226                  }
    227                  default:
    228                  {
    229                      emberAfDebugPrintln("Invalid");
   \                     ??emberAfMainInitCallback_4: (+1)
   \   00000048   0x.... 0x....      ADR.W    R1,?_7
   \                     ??emberAfMainInitCallback_5: (+1)
   \   0000004C   0x.... 0x....      BL       ?Subroutine2
    230                      break;
    231                  }
    232              }
    233              
    234              emberAfPluginAuroraButtonJoiningButtonIoInit();
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000050   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningButtonIoInit
    235              
    236              emberAfPluginAuroraButtonJoiningInitialiseLeds();
   \   00000054   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningInitialiseLeds
    237              
    238              emberAfPluginAuroraHostHalSerialInitHostPlc();
   \   00000058   0x.... 0x....      BL       emberAfPluginAuroraHostHalSerialInitHostPlc
    239          
    240          #ifndef AONE_HW_USE_JOIN_INPUT_ON_PB6
    241              emberAfPluginAuroraPwmInitializeTimer();  // Cant use pwm timer as this uses PB6.
   \   0000005C   0x.... 0x....      BL       emberAfPluginAuroraPwmInitializeTimer
    242          #endif
    243              
    244              emberAfPluginAuroraColourControlInitColorSpaceConversion();      
   \   00000060   0xE8BD 0x4010      POP      {R4,LR}
   \   00000064   0x.... 0x....      B.W      emberAfPluginAuroraColourControlInitColorSpaceConversion
    245          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    246          
    247          /** @brief Main Tick
    248           *
    249           * Whenever main application tick is called, this callback will be called at the
    250           * end of the main tick execution.
    251           *
    252           */

   \                                 In section .text, align 2, keep-with-next
    253          void emberAfMainTickCallback(void)
    254          {
   \                     emberAfMainTickCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    255              int8u mode;
    256              emberAfPluginAuroraButtonJoiningUpdateStatusLed();
   \   00000002   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningUpdateStatusLed
    257          
    258              // Read any data from the host
    259              mode = getAuroraDimmerMode();
    260              switch(mode) 
   \   00000006   0x.... 0x....      BL       getAuroraDimmerMode
   \   0000000A   0x2803             CMP      R0,#+3
   \   0000000C   0xBF04             ITT      EQ 
    261              {
    262          
    263                  case AURORA_MODE_PLC:
    264                      emberAfPluginAuroraHostHalPlcCheckHost();
   \   0000000E   0xE8BD 0x4001      POPEQ    {R0,LR}
   \   00000012   0x.... 0x....      BEQ.W    emberAfPluginAuroraHostHalPlcCheckHost
    265                      break;
    266                      
    267                  case AURORA_MODE_RGBW:
    268                  case AURORA_MODE_CX:
    269                  case AURORA_MODE_DIM:
    270                  default:
    271                      break;
    272              }
    273          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    274          
    275          /** @brief Stack Status
    276           *
    277           * This function is called by the application framework from the stack status
    278           * handler.  This callbacks provides applications an opportunity to be notified
    279           * of changes to the stack status and take appropriate action.  The return code
    280           * from this callback is ignored by the framework.  The framework will always
    281           * process the stack status after the callback returns.
    282           *
    283           * @param status   Ver.: always
    284           */

   \                                 In section .text, align 2, keep-with-next
    285          boolean emberAfStackStatusCallback(EmberStatus status)
    286          {
   \                     emberAfStackStatusCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    287              switch(status) 
   \   00000002   0x2890             CMP      R0,#+144
   \   00000004   0xD007             BEQ.N    ??emberAfStackStatusCallback_0
   \   00000006   0x2891             CMP      R0,#+145
   \   00000008   0xBF11             ITEEE    NE 
   \   0000000A   0x2894             CMPNE    R0,#+148
    288              {
    289                  case EMBER_NETWORK_UP:
    290                      emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_JOINED, DEVICE_STATE_FLAGS_SET);
    291                      emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_JOINING, DEVICE_STATE_FLAGS_CLEAR);
    292                      emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_NETWORK_UNAVAILABLE, DEVICE_STATE_FLAGS_CLEAR); 
    293                      
    294                      emberAfOtaClientStartCallback(); 
    295                      //GB dont need this on linkup!   emberAfPluginAuroraPwmInitializeTimer();
    296                      break;
    297          
    298                  case EMBER_NETWORK_DOWN:
    299                      emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_CLEAR_MASK, DEVICE_STATE_FLAGS_CLEAR);
    300                      break;
    301          
    302                  case EMBER_JOIN_FAILED:
    303                      emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_CLEAR_MASK, DEVICE_STATE_FLAGS_CLEAR); 
   \   0000000C   0x2100             MOVEQ    R1,#+0
   \   0000000E   0x200F             MOVEQ    R0,#+15
   \   00000010   0x.... 0x....      BLEQ     emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
   \   00000014   0xE00D             B.N      ??emberAfStackStatusCallback_1
   \                     ??emberAfStackStatusCallback_0: (+1)
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2010             MOVS     R0,#+16
   \   0000002A   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
   \   0000002E   0x.... 0x....      BL       emberAfOtaClientStartCallback
    304                      break;
    305          
    306                  default:
    307                    break;
    308              }
    309          
    310              return FALSE;
   \                     ??emberAfStackStatusCallback_1: (+1)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD02             POP      {R1,PC}          ;; return
    311          }
    312          
    313          /** @brief Finished
    314           *
    315           * This callback is fired when the network-find plugin is finished with the
    316           * forming or joining process.  The result of the operation will be returned in
    317           * the status parameter.
    318           *
    319           * @param status   Ver.: always
    320           */

   \                                 In section .text, align 2, keep-with-next
    321          void emberAfPluginNetworkFindFinishedCallback(EmberStatus status)
    322          {
    323              if (status != EMBER_SUCCESS) 
   \                     emberAfPluginNetworkFindFinishedCallback: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF08             IT       EQ 
   \   00000004   0x.... 0x....      BEQ.W    emberAfPluginAuroraButtonJoiningClearJoiningFlag
    324              {
    325                  emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags(DEVICE_STATE_CLEAR_MASK , DEVICE_STATE_FLAGS_CLEAR);
   \   00000008   0xB580             PUSH     {R7,LR}
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x200F             MOVS     R0,#+15
   \   0000000E   0x.... 0x....      BL       emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
    326              }
    327              
    328              emberAfPluginAuroraButtonJoiningClearJoiningFlag();
   \   00000012   0xE8BD 0x4001      POP      {R0,LR}
   \   00000016   0x.... 0x....      B.W      emberAfPluginAuroraButtonJoiningClearJoiningFlag
    329          }
    330          
    331          
    332          /** @brief Image Notify
    333           *
    334           * 
    335           *
    336           * @param payloadType   Ver.: always
    337           * @param queryJitter   Ver.: always
    338           * @param manufacturerId   Ver.: always
    339           * @param imageType   Ver.: always
    340           * @param newFileVersion   Ver.: always
    341           */

   \                                 In section .text, align 2, keep-with-next
    342          boolean emberAfOtaBootloadClusterImageNotifyCallback(int8u payloadType,
    343                                                               int8u queryJitter,
    344                                                               int16u manufacturerId,
    345                                                               int16u imageType,
    346                                                               int32u newFileVersion)
    347          {
    348            return FALSE;
   \                     emberAfOtaBootloadClusterImageNotifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    349          }
    350          
    351          /** @brief callback for setting the level
    352           *
    353           * This controls the level of the light. Currently just recalculates the RGB values based 
    354           * on the new level and moves to that colour.
    355           */

   \                                 In section .text, align 2, keep-with-next
    356          void emberAfPluginAuroraLevelControlSetNewLevelCallback(int8u newLevel)
    357          {
   \                     emberAfPluginAuroraLevelControlSetNewLevelCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    358              emberAfDebugPrintln("SetNewLevel %d", newLevel);
   \   00000004   0x4622             MOV      R2,R4
   \   00000006   0x.... 0x....      ADR.W    R1,?_8
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       emberAfPrintln
    359              
    360              int8u mode = getAuroraDimmerMode();    
   \   00000010   0x.... 0x....      BL       getAuroraDimmerMode
    361              //emberAfDebugPrintln("AURORA_MODE=%d", mode);    
    362              switch (mode) 
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD904             BLS.N    ??emberAfPluginAuroraLevelControlSetNewLevelCal_0
   \   00000018   0x1EC1             SUBS     R1,R0,#+3
   \   0000001A   0xD106             BNE.N    ??emberAfPluginAuroraLevelControlSetNewLevelCal_1
    363              {
    364                  case AURORA_MODE_RGBW:
    365                  case AURORA_MODE_CX:
    366                  case AURORA_MODE_DIM:
    367                  {
    368                      emberAfPluginAuroraColourControlSetNewLevel();
    369                      break;
    370                  }    
    371                  case AURORA_MODE_PLC:
    372                  {
    373                      plcSendSetPowerLevelCommand(newLevel);
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       plcSendSetPowerLevelCommand
    374                      emberAfPluginAuroraColourControlSetNewLevel();
   \                     ??emberAfPluginAuroraLevelControlSetNewLevelCal_0: (+1)
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      B.W      emberAfPluginAuroraColourControlSetNewLevel
    375                      break;
    376                  }    
    377                  default:
    378                  {
    379                      emberAfDebugPrint("inv mode (0x%x)\r\n", mode);
   \                     ??emberAfPluginAuroraLevelControlSetNewLevelCal_1: (+1)
   \   0000002A   0x....             B.N      ?Subroutine1
    380                      break;
    381                  }
    382              }
    383          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x4602             MOV      R2,R0
   \   00000006   0x.... 0x....      ADR.W    R1,?_9
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      B.W      emberAfPrint
    384          
    385          /** @brief Set the colour on the LED
    386           *
    387           * Set the RGB colour on the led.
    388           */

   \                                 In section .text, align 2, keep-with-next
    389          void emberAfPluginAuroraColourControlSetRgbColorCallback(t_RGB* RGB)
    390          {
   \                     emberAfPluginAuroraColourControlSetRgbColorCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    391              emberAfDebugPrintln("Set Color");
   \   00000004   0x.... 0x....      ADR.W    R1,?_10
   \   00000008   0x.... 0x....      BL       ?Subroutine2
    392              
    393              int8u mode = getAuroraDimmerMode();  
   \                     ??CrossCallReturnLabel_1: (+1)
   \   0000000C   0x.... 0x....      BL       getAuroraDimmerMode
    394              //emberAfDebugPrintln("AURORA_MODE=%d", mode);    
    395              switch (mode) 
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD902             BLS.N    ??emberAfPluginAuroraColourControlSetRgbColorCa_0
   \   00000014   0x1EC1             SUBS     R1,R0,#+3
   \   00000016   0xD008             BEQ.N    ??emberAfPluginAuroraColourControlSetRgbColorCa_1
   \   00000018   0xE012             B.N      ??emberAfPluginAuroraColourControlSetRgbColorCa_2
    396              {
    397                  case AURORA_MODE_RGBW:
    398                  case AURORA_MODE_CX:
    399                  case AURORA_MODE_DIM:
    400                  {
    401                      emberAfPluginAuroraPwmSetDutyCycle(RGB);
   \                     ??emberAfPluginAuroraColourControlSetRgbColorCa_0: (+1)
   \   0000001A   0x4620             MOV      R0,R4
   \   0000001C   0x.... 0x....      BL       emberAfPluginAuroraPwmSetDutyCycle
    402                      emberAfPluginAuroraHostProtocolSetRgbColor(RGB);            
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xE8BD 0x4010      POP      {R4,LR}
   \   00000026   0x.... 0x....      B.W      emberAfPluginAuroraHostProtocolSetRgbColor
    403                      break;
    404                  }    
    405                  case AURORA_MODE_PLC:
    406                  {
    407                      emberAfPluginAuroraPwmSetDutyCycle(RGB);
   \                     ??emberAfPluginAuroraColourControlSetRgbColorCa_1: (+1)
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       emberAfPluginAuroraPwmSetDutyCycle
    408                      plcSendSetColorCommand(RGB->R, RGB->G, RGB->B, RGB->W);            
   \   00000030   0x78E3             LDRB     R3,[R4, #+3]
   \   00000032   0x78A2             LDRB     R2,[R4, #+2]
   \   00000034   0x7861             LDRB     R1,[R4, #+1]
   \   00000036   0x7820             LDRB     R0,[R4, #+0]
   \   00000038   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003C   0x.... 0x....      B.W      plcSendSetColorCommand
    409                      break;
    410                  }   
    411                  default:
    412                  {
    413                      emberAfDebugPrint("inv mode (0x%x)\r\n", mode);
   \                     ??emberAfPluginAuroraColourControlSetRgbColorCa_2: (+1)
   \   00000040                      REQUIRE ?Subroutine1
   \   00000040                      ;; // Fall through to label ?Subroutine1
    414                      break;
    415                  }
    416              }
    417          }
    418          

   \                                 In section .text, align 2, keep-with-next
    419          void emberAfOnOffClusterSetNewValueCallback(boolean newValue)
    420          {
   \                     emberAfOnOffClusterSetNewValueCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    421              emberAfDebugPrint("SET ON/OFF\r\n");
   \   00000004   0x.... 0x....      ADR.W    R1,?_11
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x.... 0x....      BL       emberAfPrint
    422              
    423              int8u mode = getAuroraDimmerMode();        
   \   0000000E   0x.... 0x....      BL       getAuroraDimmerMode
    424              //emberAfDebugPrintln("AURORA_MODE=%d", mode);    
    425              switch (mode) 
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD902             BLS.N    ??emberAfOnOffClusterSetNewValueCallback_0
   \   00000016   0x1EC1             SUBS     R1,R0,#+3
   \   00000018   0xD005             BEQ.N    ??emberAfOnOffClusterSetNewValueCallback_1
   \   0000001A   0xE011             B.N      ??emberAfOnOffClusterSetNewValueCallback_2
    426              {
    427                  case AURORA_MODE_RGBW:
    428                  case AURORA_MODE_CX:
    429                  case AURORA_MODE_DIM:
    430                  {
    431                      emberAfPluginAuroraColourControlSetOnOff(newValue);            
   \                     ??emberAfOnOffClusterSetNewValueCallback_0: (+1)
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0x.... 0x....      B.W      emberAfPluginAuroraColourControlSetOnOff
    432                      break;
    433                  }    
    434                  case AURORA_MODE_PLC:
    435                  {
    436                      emberAfPluginAuroraColourControlSetOnOff(newValue);
   \                     ??emberAfOnOffClusterSetNewValueCallback_1: (+1)
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       emberAfPluginAuroraColourControlSetOnOff
    437                      if (newValue) 
   \   0000002C   0x2C00             CMP      R4,#+0
   \   0000002E   0xBF1C             ITT      NE 
    438                      {
    439                          plcSendOnCommand();
   \   00000030   0xE8BD 0x4010      POPNE    {R4,LR}
   \   00000034   0x.... 0x....      BNE.W    plcSendOnCommand
    440                      } 
    441                      else 
    442                      {
    443                          plcSendOffCommand();
   \   00000038   0xE8BD 0x4010      POP      {R4,LR}
   \   0000003C   0x.... 0x....      B.W      plcSendOffCommand
    444                      }
    445                      
    446                      break;
    447                  }    
    448                  default:
    449                  {
    450                      emberAfDebugPrintln("inv mode %d", mode);
   \                     ??emberAfOnOffClusterSetNewValueCallback_2: (+1)
   \   00000040   0xE8BD 0x4010      POP      {R4,LR}
   \   00000044   0x4602             MOV      R2,R0
   \   00000046   0x.... 0x....      ADR.W    R1,?_12
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      B.W      emberAfPrintln
    451                      break;
    452                  }
    453              }
    454          }
    455          
    456          #define EMBER_ZCL_TUNNELING_PROTOCOL_ID_AURORA_PLC               0xC8
    457          
    458          /** @brief Is Protocol Supported
    459           *
    460           * This function is called by the Tunneling server plugin whenever a Request
    461           * Tunnel command is received.  The application should return TRUE if the
    462           * protocol is supported and FALSE otherwise.
    463           *
    464           * @param protocolId The identifier of the metering communication protocol for
    465           * which the tunnel is requested.  Ver.: always
    466           * @param manufacturerCode The manufacturer code for manufacturer-defined
    467           * protocols or 0xFFFF in unused.  Ver.: always
    468           */

   \                                 In section .text, align 2, keep-with-next
    469          boolean emberAfPluginAuroraTunnelingServerIsProtocolSupportedCallback(int8u protocolId,
    470                                                                                int16u manufacturerCode)
    471          {
    472              if ((protocolId == EMBER_ZCL_TUNNELING_PROTOCOL_ID_AURORA_PLC) && 
    473                  (manufacturerCode == EMBER_AF_MANUFACTURER_CODE)) 
   \                     emberAfPluginAuroraTunnelingServerIsProtocolSupportedCallback: (+1)
   \   00000000   0x28C8             CMP      R0,#+200
   \   00000002   0xBF04             ITT      EQ 
   \   00000004   0xF241 0x0010      MOVWEQ   R0,#+4112
   \   00000008   0x4281             CMPEQ    R1,R0
   \   0000000A   0xD101             BNE.N    ??emberAfPluginAuroraTunnelingServerIsProtocolS_0
    474              {
    475                  return TRUE;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x4770             BX       LR
    476              }
    477          
    478            return FALSE;
   \                     ??emberAfPluginAuroraTunnelingServerIsProtocolS_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
    479          }
    480          
    481          /** @brief Data Received
    482           *
    483           * This function is called by the Tunneling server plugin whenever data is
    484           * received from a client through a tunnel.
    485           *
    486           * @param tunnelId The identifier of the tunnel through which the data was
    487           * received.  Ver.: always
    488           * @param data Buffer containing the raw octets of the data.  Ver.: always
    489           * @param dataLen The length in octets of the data.  Ver.: always
    490           */

   \                                 In section .text, align 2, keep-with-next
    491          void emberAfPluginAuroraTunnelingServerDataReceivedCallback(int16u tunnelId,
    492                                                                      int8u* data,
    493                                                                      int16u dataLen)
    494          {
   \                     emberAfPluginAuroraTunnelingServerDataReceivedCallback: (+1)
   \   00000000   0x4608             MOV      R0,R1
    495              // Strip off the length byte[0] that is included by the CICIE firmware
    496              dataLen--;
    497              plcSendTunnelCommand(&data[1], (int8u)dataLen);
   \   00000002   0x1E51             SUBS     R1,R2,#+1
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x.... 0x....      B.W      plcSendTunnelCommand
    498          }
    499          
    500          /** @brief Tunnel Closed
    501           *
    502           * This function is called by the Tunneling server plugin whenever a tunnel is
    503           * closed.  Clients may close tunnels by sending a Close Tunnel command.  The
    504           * server can preemptively close inactive tunnels after a timeout.
    505           *
    506           * @param tunnelId The identifier of the tunnel that has been closed.  Ver.:
    507           * always
    508           * @param clientInitiated TRUE if the client initiated the closing of the tunnel
    509           * or FALSE if the server closed the tunnel due to inactivity.  Ver.: always
    510           */

   \                                 In section .text, align 2, keep-with-next
    511          void emberAfPluginAuroraTunnelingServerTunnelClosedCallback(int16u tunnelId,
    512                                                                      boolean clientInitiated)
    513          {
    514              memset((void*)&tunnelStatus, 0, sizeof(tTunnelStatus));
   \                     emberAfPluginAuroraTunnelingServerTunnelClosedCallback: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable17_3
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x460B             MOV      R3,R1
   \   00000008   0xC00E             STM      R0!,{R1-R3}
    515          }
   \   0000000A   0x4770             BX       LR               ;; return
    516          
    517          /** @brief Tunnel Opened
    518           *
    519           * This function is called by the Tunneling server plugin whenever a tunnel is
    520           * opened.  Clients may open tunnels by sending a Request Tunnel command.
    521           *
    522           * @param tunnelId The identifier of the tunnel that has been opened.  Ver.:
    523           * always
    524           * @param protocolId The identifier of the metering communication protocol for
    525           * the tunnel.  Ver.: always
    526           * @param manufacturerCode The manufacturer code for manufacturer-defined
    527           * protocols or 0xFFFF in unused.  Ver.: always
    528           * @param flowControlSupport TRUE is flow control support is requested or FALSE
    529           * if it is not.  Ver.: always
    530           * @param maximumIncomingTransferSize The maximum incoming transfer size of the
    531           * client.  Ver.: always
    532           */

   \                                 In section .text, align 2, keep-with-next
    533          void emberAfPluginAuroraTunnelingServerTunnelOpenedCallback(int16u tunnelId,
    534                                                                      int8u protocolId,
    535                                                                      int16u manufacturerCode,
    536                                                                      boolean flowControlSupport,
    537                                                                      int16u maximumIncomingTransferSize)
    538          {
   \                     emberAfPluginAuroraTunnelingServerTunnelOpenedCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    539              // Indicate that the tunnel is open and save tunnel data locally
    540              tunnelStatus.open = TRUE;
   \   00000002   0x....             LDR.N    R4,??DataTable17_3
    541              tunnelStatus.tunnelId = tunnelId;
   \   00000004   0x8060             STRH     R0,[R4, #+2]
   \   00000006   0x2501             MOVS     R5,#+1
    542              tunnelStatus.protocolId = protocolId;
    543              tunnelStatus.manufacturerCode = manufacturerCode;
    544              tunnelStatus.flowControlSupport = flowControlSupport;
    545              tunnelStatus.maximumIncomingTransferSize = maximumIncomingTransferSize;
   \   00000008   0x9803             LDR      R0,[SP, #+12]
   \   0000000A   0x7025             STRB     R5,[R4, #+0]
   \   0000000C   0x7121             STRB     R1,[R4, #+4]
   \   0000000E   0x80E2             STRH     R2,[R4, #+6]
   \   00000010   0x7223             STRB     R3,[R4, #+8]
   \   00000012   0x8160             STRH     R0,[R4, #+10]
    546          }
   \   00000014   0xBD30             POP      {R4,R5,PC}       ;; return
    547          
    548          /** @brief Tunnel Server to Client transfer
    549           *
    550           * If the tunnel is open, sends tunnel data to client
    551           */

   \                                 In section .text, align 2, keep-with-next
    552          void emberAfPluginAuroraHostProcessTunnelResponseCallback(int8u *data, int8u size)
    553          {
    554              // The data includes the length byte at the start.
    555              if (tunnelStatus.open) 
   \                     emberAfPluginAuroraHostProcessTunnelResponseCallback: (+1)
   \   00000000   0x....             LDR.N    R3,??DataTable17_3
   \   00000002   0x781A             LDRB     R2,[R3, #+0]
   \   00000004   0xB122             CBZ.N    R2,??emberAfPluginAuroraHostProcessTunnelResponseC_0
    556              {
    557                  emberAfPluginTunnelingServerTransferData(tunnelStatus.tunnelId, data, size);
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x8858             LDRH     R0,[R3, #+2]
   \   0000000C   0x.... 0x....      B.W      emberAfPluginTunnelingServerTransferData
    558              }
    559          }
   \                     ??emberAfPluginAuroraHostProcessTunnelResponseC_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    560          

   \                                 In section .text, align 2, keep-with-next
    561          void calculateEventDuration_and_stepSize(int16u transitionTimeMs, int16u amount, int32u* eventDurationMs, int16u* stepSize) 
    562          {
   \                     calculateEventDuration_and_stepSize: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x000E             MOVS     R6,R1
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x4614             MOV      R4,R2
   \   0000000A   0x461D             MOV      R5,R3
    563              // Helper fn calculates event duration & step size for given transition time & amount.
    564                 
    565              #define MAX_EVENT_DURATION_MS    MILLISECOND_TICKS_PER_SECOND * 5     // Define a realistic maximum event duration.
    566              
    567              int16u noOfSteps;
    568                 
    569              if (amount == 0)
   \   0000000C   0xD106             BNE.N    ??calculateEventDuration_and_stepSize_0
    570              {
    571                  emberAfDebugPrintln("invalid amount");
   \   0000000E   0x.... 0x....      ADR.W    R1,?_13
   \   00000012   0x.... 0x....      BL       ?Subroutine2
    572                  *eventDurationMs = 0; 
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x6020             STR      R0,[R4, #+0]
    573                  *stepSize = 0;        
   \   0000001A   0xE01D             B.N      ??calculateEventDuration_and_stepSize_1
    574                  return;
    575              }
    576              
    577              if (transitionTimeMs == 0)
   \                     ??calculateEventDuration_and_stepSize_0: (+1)
   \   0000001C   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000020   0xD102             BNE.N    ??calculateEventDuration_and_stepSize_2
    578              {
    579                  *eventDurationMs = 0; // Will schedule a single event.
   \   00000022   0x6020             STR      R0,[R4, #+0]
    580                  *stepSize = amount;
   \   00000024   0x802E             STRH     R6,[R5, #+0]
    581                  noOfSteps = 1;
   \   00000026   0xE018             B.N      ??calculateEventDuration_and_stepSize_3
    582              }
    583              else
    584              {
    585                  *eventDurationMs = transitionTimeMs / amount; 
   \                     ??calculateEventDuration_and_stepSize_2: (+1)
   \   00000028   0xFB98 0xF0F6      SDIV     R0,R8,R6
   \   0000002C   0x6020             STR      R0,[R4, #+0]
    586                  
    587                  int32u minEventDuration = MILLISECOND_TICKS_PER_DECISECOND;  //100mS
   \   0000002E   0x2766             MOVS     R7,#+102
    588                  int32u maxEventDuration = MAX_EVENT_DURATION_MS;  // apply a realistic maximum event duration.        
    589                  if (getAuroraDimmerMode() == AURORA_MODE_DIM)
   \   00000030   0x.... 0x....      BL       getAuroraDimmerMode
   \   00000034   0x2802             CMP      R0,#+2
    590                  {
    591                      minEventDuration = (MILLISECOND_TICKS_PER_DECISECOND * 3);  //300mS
    592                  }
    593                  
    594                  if (*eventDurationMs < minEventDuration)
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0xBF08             IT       EQ 
   \   0000003A   0xF44F 0x7799      MOVEQ    R7,#+306
   \   0000003E   0x42B8             CMP      R0,R7
   \   00000040   0xBF38             IT       CC 
   \   00000042   0x6027             STRCC    R7,[R4, #+0]
    595                  {
    596                      *eventDurationMs = minEventDuration;
   \   00000044   0xD30F             BCC.N    ??calculateEventDuration_and_stepSize_4
    597                  }
    598                  else
    599                  if (*eventDurationMs > maxEventDuration)
   \   00000046   0xF5B0 0x5FA0      CMP      R0,#+5120
   \   0000004A   0xD908             BLS.N    ??calculateEventDuration_and_stepSize_5
    600                  {
    601                      *eventDurationMs = maxEventDuration;
   \   0000004C   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000050   0x6020             STR      R0,[R4, #+0]
    602                  }
    603                  
    604                  while (*eventDurationMs < maxEventDuration)
    605                  {    
    606                      noOfSteps = transitionTimeMs / *eventDurationMs;  
    607                      if (noOfSteps < 1)
    608                      {
    609                          noOfSteps = 1;   // apply min no of steps.
    610                      }   
    611                      *stepSize = amount / noOfSteps;        
    612                      if (*stepSize != 0)
    613                      {
    614                          break;      
    615                      }        
    616                      *eventDurationMs += 100;  // Add 100ms to event duration and recalculate steps.
    617                  }  
    618                  
    619                  if (*stepSize == 0)
   \                     ??calculateEventDuration_and_stepSize_6: (+1)
   \   00000052   0x8828             LDRH     R0,[R5, #+0]
   \   00000054   0xB908             CBNZ.N   R0,??calculateEventDuration_and_stepSize_3
    620                  {
    621                      *stepSize = 1;  // Finally apply minimum limit to step size.
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??calculateEventDuration_and_stepSize_1: (+1)
   \   00000058   0x8028             STRH     R0,[R5, #+0]
    622                  }    
    623              }
    624              
    625              //emberAfDebugPrintln("move cfg: eventDurationMs=%d, noOfSteps=%d, stepSize=%d", *eventDurationMs, noOfSteps, *stepSize);
    626          }
   \                     ??calculateEventDuration_and_stepSize_3: (+1)
   \   0000005A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??calculateEventDuration_and_stepSize_5: (+1)
   \   0000005E   0x6820             LDR      R0,[R4, #+0]
   \   00000060   0xF5B0 0x5FA0      CMP      R0,#+5120
   \   00000064   0xD2F5             BCS.N    ??calculateEventDuration_and_stepSize_6
   \                     ??calculateEventDuration_and_stepSize_4: (+1)
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0xFBB8 0xF1F0      UDIV     R1,R8,R0
   \   0000006C   0xB289             UXTH     R1,R1
   \   0000006E   0xB901             CBNZ.N   R1,??calculateEventDuration_and_stepSize_7
   \   00000070   0x2101             MOVS     R1,#+1
   \                     ??calculateEventDuration_and_stepSize_7: (+1)
   \   00000072   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \   00000076   0x8029             STRH     R1,[R5, #+0]
   \   00000078   0x8829             LDRH     R1,[R5, #+0]
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xD1E9             BNE.N    ??calculateEventDuration_and_stepSize_6
   \   0000007E   0x3064             ADDS     R0,R0,#+100
   \   00000080   0x6020             STR      R0,[R4, #+0]
   \   00000082   0xE7EC             B.N      ??calculateEventDuration_and_stepSize_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   0x43 0x58          DC8      0x43, 0x58, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   0x44 0x49          DC8      "DIM"
   \              0x4D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   0x50 0x4C          DC8      "PLC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   0x........         DC32     tunnelStatus

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x43 0x58          DC8 "CX"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x44 0x49          DC8 "DIM"
   \              0x4D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x50 0x4C          DC8 "PLC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x0D 0x0A          DC8 "\015\012*** Aurora Light Dimmmer ***"
   \              0x2A 0x2A    
   \              0x2A 0x20    
   \              0x41 0x75    
   \              0x72 0x6F    
   \              0x72 0x61    
   \              0x20 0x4C    
   \              0x69 0x67    
   \              0x68 0x74    
   \              0x20 0x44    
   \              0x69 0x6D    
   \              0x6D 0x6D    
   \              0x65 0x72    
   \              0x20 0x2A    
   \              0x2A 0x2A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x4D 0x6F          DC8 "Module fw version: 0x%2X"
   \              0x64 0x75    
   \              0x6C 0x65    
   \              0x20 0x66    
   \              0x77 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x41 0x55          DC8 "AURORA_MODE=%d, "
   \              0x52 0x4F    
   \              0x52 0x41    
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x3D    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x52 0x47          DC8 "RGBW"
   \              0x42 0x57    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x49 0x6E          DC8 "Invalid"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x53 0x65          DC8 "SetNewLevel %d"
   \              0x74 0x4E    
   \              0x65 0x77    
   \              0x4C 0x65    
   \              0x76 0x65    
   \              0x6C 0x20    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x69 0x6E          DC8 "inv mode (0x%x)\015\012"
   \              0x76 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x53 0x65          DC8 "Set Color"
   \              0x74 0x20    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x53 0x45          DC8 "SET ON/OFF\015\012"
   \              0x54 0x20    
   \              0x4F 0x4E    
   \              0x2F 0x4F    
   \              0x46 0x46    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x69 0x6E          DC8 "inv mode %d"
   \              0x76 0x20    
   \              0x6D 0x6F    
   \              0x64 0x65    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x69 0x6E          DC8 "invalid amount"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x61 0x6D    
   \              0x6F 0x75    
   \              0x6E 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   calculateEventDuration_and_stepSize
        24   -> emberAfPrintln
        24   -> getAuroraDimmerMode
       8   emberAfColorControlClusterMoveColorCallback
         8   -> emberAfPluginAuroraColourControlMoveColor
         8   -> emberAfSendImmediateDefaultResponse
       8   emberAfColorControlClusterMoveToColorCallback
         8   -> emberAfPluginAuroraColourControlMoveToColor
         8   -> emberAfSendImmediateDefaultResponse
       8   emberAfColorControlClusterMoveToColorTemperatureCallback
         8   -> emberAfPluginAuroraColourControlMoveToColorTemperature
         8   -> emberAfSendImmediateDefaultResponse
       8   emberAfColorControlClusterStepColorCallback
         8   -> emberAfPluginAuroraColourControlStepColor
         8   -> emberAfSendImmediateDefaultResponse
       0   emberAfGenericTunnelClusterMatchProtocolAddressCallback
       8   emberAfMainInitCallback
         8   -> emberAfPluginAuroraButtonJoiningButtonIoInit
         8   -> emberAfPluginAuroraButtonJoiningInitialiseLeds
         0   -> emberAfPluginAuroraColourControlInitColorSpaceConversion
         8   -> emberAfPluginAuroraHostHalSerialInitHostPlc
         8   -> emberAfPluginAuroraPwmInitializeTimer
         8   -> emberAfPrint
         8   -> emberAfPrintln
         8   -> getAuroraDimmerMode
       0   emberAfMainStartCallback
       8   emberAfMainTickCallback
         8   -> emberAfPluginAuroraButtonJoiningUpdateStatusLed
         8   -> emberAfPluginAuroraHostHalPlcCheckHost
         8   -> getAuroraDimmerMode
       8   emberAfOnOffClusterSetNewValueCallback
         8   -> emberAfPluginAuroraColourControlSetOnOff
         8   -> emberAfPrint
         0   -> emberAfPrintln
         8   -> getAuroraDimmerMode
         8   -> plcSendOnCommand
       0   emberAfOtaBootloadClusterImageBlockResponseCallback
       0   emberAfOtaBootloadClusterImageNotifyCallback
       0   emberAfOtaBootloadClusterQueryNextImageResponseCallback
       0   emberAfOtaBootloadClusterUpgradeEndResponseCallback
       8   emberAfPluginAuroraColourControlSetRgbColorCallback
         8   -> emberAfPluginAuroraPwmSetDutyCycle
         0   -> emberAfPrint
         8   -> emberAfPrintln
         8   -> getAuroraDimmerMode
       0   emberAfPluginAuroraHostProcessTunnelResponseCallback
       8   emberAfPluginAuroraLevelControlSetNewLevelCallback
         0   -> emberAfPrint
         8   -> emberAfPrintln
         8   -> getAuroraDimmerMode
         8   -> plcSendSetPowerLevelCommand
       0   emberAfPluginAuroraTunnelingServerDataReceivedCallback
         0   -> plcSendTunnelCommand
       0   emberAfPluginAuroraTunnelingServerIsProtocolSupportedCallback
       0   emberAfPluginAuroraTunnelingServerTunnelClosedCallback
      12   emberAfPluginAuroraTunnelingServerTunnelOpenedCallback
       8   emberAfPluginNetworkFindFinishedCallback
         0   -> emberAfPluginAuroraButtonJoiningClearJoiningFlag
         8   -> emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags
       8   emberAfStackStatusCallback
         8   -> emberAfOtaClientStartCallback
         8   -> emberAfPluginAuroraButtonJoiningUpdateDeviceStateFlags


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_2
       4  ??DataTable17_3
       8  ?Subroutine0
      16  ?Subroutine1
       6  ?Subroutine2
      32  ?_0
      28  ?_1
      12  ?_10
      16  ?_11
      12  ?_12
      16  ?_13
      20  ?_2
       8  ?_3
       4  ?_4
       4  ?_5
       4  ?_6
       8  ?_7
      16  ?_8
      20  ?_9
     132  calculateEventDuration_and_stepSize
       6  emberAfColorControlClusterMoveColorCallback
       8  emberAfColorControlClusterMoveToColorCallback
       8  emberAfColorControlClusterMoveToColorTemperatureCallback
       8  emberAfColorControlClusterStepColorCallback
       4  emberAfGenericTunnelClusterMatchProtocolAddressCallback
     104  emberAfMainInitCallback
       4  emberAfMainStartCallback
      24  emberAfMainTickCallback
      80  emberAfOnOffClusterSetNewValueCallback
       4  emberAfOtaBootloadClusterImageBlockResponseCallback
       4  emberAfOtaBootloadClusterImageNotifyCallback
       4  emberAfOtaBootloadClusterQueryNextImageResponseCallback
       4  emberAfOtaBootloadClusterUpgradeEndResponseCallback
      64  emberAfPluginAuroraColourControlSetRgbColorCallback
      18  emberAfPluginAuroraHostProcessTunnelResponseCallback
      44  emberAfPluginAuroraLevelControlSetNewLevelCallback
      12  emberAfPluginAuroraTunnelingServerDataReceivedCallback
      20  emberAfPluginAuroraTunnelingServerIsProtocolSupportedCallback
      12  emberAfPluginAuroraTunnelingServerTunnelClosedCallback
      22  emberAfPluginAuroraTunnelingServerTunnelOpenedCallback
      26  emberAfPluginNetworkFindFinishedCallback
      54  emberAfStackStatusCallback
      12  tunnelStatus

 
  12 bytes in section .bss
  12 bytes in section .rodata
 900 bytes in section .text
 
 900 bytes of CODE  memory
  12 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: none
