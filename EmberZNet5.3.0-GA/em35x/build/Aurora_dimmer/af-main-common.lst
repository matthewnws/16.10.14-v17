###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:33:50
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\util\af-main-common.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\util\af-main-common.c" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"af-main-common.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\util\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\af-main-common.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\af-main-common.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\util\af-main-common.c
      1          // *******************************************************************
      2          // * af-main-common.c
      3          // *
      4          // * Code common to both the Host and SOC (system on a chip) versions
      5          // * of the Application Framework.
      6          // *
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *******************************************************************
      9          
     10          #include PLATFORM_HEADER     // Micro and compiler specific typedefs and macros
     11          
     12          #if defined EZSP_HOST
     13            #include "stack/include/ember-types.h"
     14            #include "stack/include/error.h"
     15            #include "stack/include/library.h"
     16          #else
     17            // Ember stack and related utilities
     18            #include "stack/include/ember.h"         // Main stack definitions
     19            #include "stack/include/cbke-crypto-engine.h"
     20          #endif
     21          
     22          // HAL - hardware abstraction layer
     23          #include "hal/hal.h"
     24          #include "app/util/serial/serial.h"  // Serial utility APIs
     25          
     26          // CLI - command line interface
     27          #include "app/util/serial/command-interpreter2.h"
     28          
     29          #if defined EZSP_HOST
     30            // EZSP - ember serial host protocol
     31            #include "app/util/ezsp/ezsp-protocol.h"
     32            #include "app/util/ezsp/ezsp.h"
     33            #include "app/util/ezsp/serial-interface.h"
     34            #include "app/util/ezsp/ezsp-utils.h"
     35          #endif
     36          
     37          // Fragmentation.
     38          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
     39          #include "app/framework/plugin/fragmentation/fragmentation.h"
     40          #endif
     41          
     42          // Service discovery library
     43          #include "service-discovery.h"
     44          
     45          // determines the number of in-clusters and out-clusters based on defines
     46          // in config.h
     47          #include "af-main.h"
     48          
     49          #include "attribute-storage.h"
     50          #include "attribute-table.h"
     51          #include "util.h"
     52          #include "callback.h"
     53          #include "print.h"
     54          #include "config.h"
     55          #include "app/framework/security/af-security.h"
     56          #include "app/framework/security/crypto-state.h"
     57          
     58          // Querying the Ember Stack for what libraries are present.
     59          #include "app/util/common/library.h"
     60          
     61          // ZDO - ZigBee Device Object
     62          #include "app/util/zigbee-framework/zigbee-device-common.h"
     63          
     64          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     65          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     66          
     67          //------------------------------------------------------------------------------
     68          
     69          #define INVALID_MESSAGE_TAG 0xFF
     70          
     71          #if defined(EMBER_AF_HAS_COORDINATOR_NETWORK)
     72            #if !defined(EMBER_AF_PLUGIN_CONCENTRATOR)
     73              #error "A Coordinator device (Trust Center) MUST enable the concentrator plugin to function correctly."
     74            #endif
     75          #endif
     76          
     77          #ifdef EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS
     78            EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS
     79          #endif
     80          
     81          #ifdef EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS
     82            EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS
     83          #endif
     84          
     85          // flags the user can turn on or off to make the printing behave differently

   \                                 In section .data, align 1
     86          boolean emberAfPrintReceivedMessages = TRUE;
   \                     emberAfPrintReceivedMessages:
   \   00000000   0x01               DC8 1
     87          

   \                                 In section .rodata, align 4, keep-with-next
     88          PGM EmberAfOtaImageId emberAfInvalidImageId = INVALID_OTA_IMAGE_ID;
   \                     emberAfInvalidImageId:
   \   00000000   0xFFFF 0xFFFF      DC16 65535, 65535
   \   00000004   0xFFFFFFFF         DC32 4294967295
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     89          

   \                                 In section .bss, align 4
     90          static CallbackTableEntry messageSentCallbacks[EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE];
   \                     messageSentCallbacks:
   \   00000000                      DS8 24
     91          
     92          
     93          // We declare this variable 'const' but NOT PGM.  Those functions that we may use
     94          // this variable would also have to declare it PGM in order to function
     95          // correctly, which is not the case (e.g. emberFindKeyTableEntry()).

   \                                 In section .rodata, align 4, keep-with-next
     96          const EmberEUI64 emberAfNullEui64 = {0,0,0,0,0,0,0,0};
   \                     emberAfNullEui64:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     97          
     98          //------------------------------------------------------------------------------
     99          // Forward declarations
    100          static int8u getMessageSentCallbackIndex(void);
    101          static void invalidateMessageSentCallbackEntry(int8u messageTag);
    102          static EmberAfMessageSentFunction getMessageSentCallback(int8u tag);
    103          
    104          static int8u getMessageSentCallbackIndex(void) 
    105          {
    106            int8u i;
    107            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    108              if (messageSentCallbacks[i].tag == INVALID_MESSAGE_TAG) {
    109                return i;
    110              }
    111            }
    112          
    113            return INVALID_MESSAGE_TAG;
    114          }
    115          
    116          static void invalidateMessageSentCallbackEntry(int8u tag)
    117          {
    118            int8u i;
    119            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    120              if (messageSentCallbacks[i].tag == tag) {
    121                messageSentCallbacks[i].tag = INVALID_MESSAGE_TAG;
    122                messageSentCallbacks[i].callback = NULL;
    123                return;
    124              }
    125            }
    126          }
    127          
    128          static EmberAfMessageSentFunction getMessageSentCallback(int8u tag) 
    129          {
    130            int8u i;
    131            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
    132              if (messageSentCallbacks[i].tag == tag) {
    133                return messageSentCallbacks[i].callback;
    134              }
    135            }
    136          
    137            return NULL;
    138          }
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void emAfInitializeMessageSentCallbackArray(void)
    141          {
    142            int8u i;
    143            for (i = 0; i < EMBER_AF_MESSAGE_SENT_CALLBACK_TABLE_SIZE; i++) {
   \                     emAfInitializeMessageSentCallbackArray: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable57_2
    144              messageSentCallbacks[i].tag = INVALID_MESSAGE_TAG;
   \                     ??emAfInitializeMessageSentCallbackArray_0: (+1)
   \   00000006   0xEB01 0x03C0      ADD      R3,R1,R0, LSL #+3
   \   0000000A   0x22FF             MOVS     R2,#+255
   \   0000000C   0x711A             STRB     R2,[R3, #+4]
    145              messageSentCallbacks[i].callback = NULL;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0xF841 0x2030      STR      R2,[R1, R0, LSL #+3]
    146            }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xDBF5             BLT.N    ??emAfInitializeMessageSentCallbackArray_0
    147          }
   \   0000001A   0x4770             BX       LR               ;; return
    148          

   \                                 In section .text, align 2, keep-with-next
    149          EmberAfCbkeKeyEstablishmentSuite emberAfIsFullSmartEnergySecurityPresent(void)
    150          {
    151            EmberAfCbkeKeyEstablishmentSuite cbkeKeyEstablishmentSuite = EMBER_AF_INVALID_KEY_ESTABLISHMENT_SUITE;
    152          
    153          #if defined EMBER_AF_HAS_SECURITY_PROFILE_SE
    154            EmberCertificateData cert;
    155            if ((emberGetLibraryStatus(EMBER_ECC_LIBRARY_ID)
    156                 & EMBER_LIBRARY_PRESENT_MASK)
    157                && (EMBER_SUCCESS == emberGetCertificate(&cert)) ) {
    158              cbkeKeyEstablishmentSuite |= EMBER_AF_CBKE_KEY_ESTABLISHMENT_SUITE_163K1;
    159            }
    160            
    161            EmberCertificate283k1Data cert283k1;
    162            if((emberGetLibraryStatus(EMBER_ECC_LIBRARY_283K1_ID)
    163                 & EMBER_LIBRARY_PRESENT_MASK)
    164                 &&  (EMBER_SUCCESS == emberGetCertificate283k1(&cert283k1))) {
    165              cbkeKeyEstablishmentSuite |= EMBER_AF_CBKE_KEY_ESTABLISHMENT_SUITE_283K1;
    166            }
    167          #endif
    168          
    169            return cbkeKeyEstablishmentSuite;
   \                     emberAfIsFullSmartEnergySecurityPresent: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    170          }
    171          

   \                                 In section .text, align 2, keep-with-next
    172          static EmberStatus send(EmberOutgoingMessageType type,
    173                                  int16u indexOrDestination,
    174                                  EmberApsFrame *apsFrame,
    175                                  int16u messageLength,
    176                                  int8u *message,
    177                                  boolean broadcast,
    178                                  EmberAfMessageSentFunction callback)
    179          {
   \                     send: (+1)
   \   00000000   0xE92D 0x4DFB      PUSH     {R0,R1,R3-R8,R10,R11,LR}
   \   00000004   0x461F             MOV      R7,R3
    180            EmberStatus status;
    181            int8u commandId, index, messageSentIndex;
    182          
    183            // The send APIs only deal with ZCL messages, so they must at least contain
    184            // the ZCL header.
    185            if (messageLength < EMBER_AF_ZCL_OVERHEAD) {
   \   00000006   0x2F03             CMP      R7,#+3
   \   00000008   0xB083             SUB      SP,SP,#+12
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0xDB05             BLT.N    ??send_0
   \   0000000E   0x9E0E             LDR      R6,[SP, #+56]
    186              return EMBER_ERR_FATAL;
    187            } else if (message[0] & ZCL_MANUFACTURER_SPECIFIC_MASK) {
   \   00000010   0x7831             LDRB     R1,[R6, #+0]
   \   00000012   0x0749             LSLS     R1,R1,#+29
   \   00000014   0xD505             BPL.N    ??send_1
    188              if (messageLength < EMBER_AF_ZCL_MANUFACTURER_SPECIFIC_OVERHEAD) {
   \   00000016   0x2F05             CMP      R7,#+5
   \   00000018   0xDA01             BGE.N    ??send_2
    189                return EMBER_ERR_FATAL;
   \                     ??send_0: (+1)
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xE074             B.N      ??send_3
    190              }
    191              commandId = message[4];
   \                     ??send_2: (+1)
   \   0000001E   0x7930             LDRB     R0,[R6, #+4]
   \   00000020   0xE000             B.N      ??send_4
    192            } else {
    193              commandId = message[2];
   \                     ??send_1: (+1)
   \   00000022   0x78B0             LDRB     R0,[R6, #+2]
   \                     ??send_4: (+1)
   \   00000024   0xF88D 0x0004      STRB     R0,[SP, #+4]
    194            }
    195          
    196            messageSentIndex = getMessageSentCallbackIndex();
   \   00000028   0x2500             MOVS     R5,#+0
   \   0000002A   0x.... 0x....      LDR.W    R8,??DataTable57_2
   \                     ??send_5: (+1)
   \   0000002E   0xEB08 0x00C5      ADD      R0,R8,R5, LSL #+3
   \   00000032   0x7900             LDRB     R0,[R0, #+4]
   \   00000034   0x28FF             CMP      R0,#+255
   \   00000036   0xD004             BEQ.N    ??send_6
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0xB2ED             UXTB     R5,R5
   \   0000003C   0x2D03             CMP      R5,#+3
   \   0000003E   0xDBF6             BLT.N    ??send_5
   \   00000040   0x25FF             MOVS     R5,#+255
   \                     ??send_6: (+1)
   \   00000042   0xF8DD 0xB040      LDR      R11,[SP, #+64]
    197            if (callback != NULL && messageSentIndex == INVALID_MESSAGE_TAG) {
   \   00000046   0xEA5F 0x000B      MOVS     R0,R11
   \   0000004A   0xD003             BEQ.N    ??send_7
   \   0000004C   0x2DFF             CMP      R5,#+255
   \   0000004E   0xBF08             IT       EQ 
   \   00000050   0x20B4             MOVEQ    R0,#+180
    198              return EMBER_TABLE_FULL;
   \   00000052   0xD059             BEQ.N    ??send_3
    199            }
    200          
    201            // The source endpoint in the APS frame MUST be valid at this point.  We use
    202            // it to set the appropriate outgoing network as well as the profile id in
    203            // the APS frame.
    204            index = emberAfIndexFromEndpoint(apsFrame->sourceEndpoint);
   \                     ??send_7: (+1)
   \   00000054   0x7920             LDRB     R0,[R4, #+4]
   \   00000056   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   0000005A   0x4682             MOV      R10,R0
    205            if (index == 0xFF) {
   \   0000005C   0xF1BA 0x0FFF      CMP      R10,#+255
   \   00000060   0xBF08             IT       EQ 
   \   00000062   0x20A3             MOVEQ    R0,#+163
    206              return EMBER_INVALID_ENDPOINT;
   \   00000064   0xD050             BEQ.N    ??send_3
    207            }
    208            status = emberAfPushEndpointNetworkIndex(apsFrame->sourceEndpoint);
   \   00000066   0x7920             LDRB     R0,[R4, #+4]
   \   00000068   0x.... 0x....      BL       emberAfPushEndpointNetworkIndex
    209            if (status != EMBER_SUCCESS) {
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD14B             BNE.N    ??send_3
    210              return status;
    211            }
    212            apsFrame->profileId = emberAfProfileIdFromIndex(index);
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable57_3
   \   00000074   0xEB00 0x100A      ADD      R0,R0,R10, LSL #+4
    213          
    214            // Encryption is turned on if it is required, but not turned off if it isn't.
    215            // This allows the application to send encrypted messages in special cases
    216            // that aren't covered by the specs by manually setting the encryption bit
    217            // prior to calling the send APIs.
    218            if (emberAfDetermineIfLinkSecurityIsRequired(commandId,
    219                                                         FALSE, // incoming?
    220                                                         broadcast,
    221                                                         apsFrame->profileId,
    222                                                         apsFrame->clusterId)) {
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x8843             LDRH     R3,[R0, #+2]
   \   0000007C   0x8023             STRH     R3,[R4, #+0]
   \   0000007E   0x8860             LDRH     R0,[R4, #+2]
   \   00000080   0x9A0F             LDR      R2,[SP, #+60]
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000088   0x.... 0x....      BL       emberAfDetermineIfLinkSecurityIsRequired
   \   0000008C   0xB118             CBZ.N    R0,??send_8
    223              apsFrame->options |= EMBER_APS_OPTION_ENCRYPTION;
   \   0000008E   0x88E0             LDRH     R0,[R4, #+6]
   \   00000090   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000094   0x80E0             STRH     R0,[R4, #+6]
    224            }
    225          
    226            if (messageLength
    227                <= emberAfMaximumApsPayloadLength(type, indexOrDestination, apsFrame)) {
   \                     ??send_8: (+1)
   \   00000096   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   0000009A   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   0000009E   0x4622             MOV      R2,R4
   \   000000A0   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   000000A4   0x42B8             CMP      R0,R7
   \   000000A6   0xD31C             BCC.N    ??send_9
    228              int8u messageTag = INVALID_MESSAGE_TAG;
   \   000000A8   0x20FF             MOVS     R0,#+255
   \   000000AA   0xF88D 0x0008      STRB     R0,[SP, #+8]
    229              status = emAfSend(type,
    230                                indexOrDestination,
    231                                apsFrame,
    232                                (int8u)messageLength,
    233                                message,
    234                                &messageTag);
   \   000000AE   0xA802             ADD      R0,SP,#+8
   \   000000B0   0x9001             STR      R0,[SP, #+4]
   \   000000B2   0x9600             STR      R6,[SP, #+0]
   \   000000B4   0xF8BD 0x1010      LDRH     R1,[SP, #+16]
   \   000000B8   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   000000BC   0xB2FB             UXTB     R3,R7
   \   000000BE   0x4622             MOV      R2,R4
   \   000000C0   0x.... 0x....      BL       emAfSend
   \   000000C4   0x4607             MOV      R7,R0
    235              if (callback != NULL && status == EMBER_SUCCESS && messageTag != INVALID_MESSAGE_TAG) {
   \   000000C6   0xEA5F 0x000B      MOVS     R0,R11
   \   000000CA   0xD00C             BEQ.N    ??send_10
   \   000000CC   0xB95F             CBNZ.N   R7,??send_10
   \   000000CE   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000D2   0x28FF             CMP      R0,#+255
   \   000000D4   0xD012             BEQ.N    ??send_11
    236                messageSentCallbacks[messageSentIndex].tag = messageTag;
   \   000000D6   0xEB08 0x01C5      ADD      R1,R8,R5, LSL #+3
    237                messageSentCallbacks[messageSentIndex].callback = callback;
   \   000000DA   0xF848 0xB035      STR      R11,[R8, R5, LSL #+3]
   \   000000DE   0x7108             STRB     R0,[R1, #+4]
   \   000000E0   0xE00C             B.N      ??send_11
    238              }
    239          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    240            } else if (!broadcast) {
    241              status = emAfFragmentationSendUnicast(type,
    242                                                    indexOrDestination,
    243                                                    apsFrame,
    244                                                    message,
    245                                                    messageLength);
    246              emberAfDebugPrintln("%pstart:len=%d.", "Fragmentation:", messageLength);
    247          #endif
    248            } else {
    249              status = EMBER_MESSAGE_TOO_LONG;
   \                     ??send_9: (+1)
   \   000000E2   0x2774             MOVS     R7,#+116
   \   000000E4   0xE00D             B.N      ??send_12
    250            }
    251          
    252            if (status == EMBER_OPERATION_IN_PROGRESS
    253                && apsFrame->options & EMBER_APS_OPTION_DSA_SIGN) {
   \                     ??send_10: (+1)
   \   000000E6   0x2FBA             CMP      R7,#+186
   \   000000E8   0xD107             BNE.N    ??send_13
   \   000000EA   0x79A0             LDRB     R0,[R4, #+6]
   \   000000EC   0x06C0             LSLS     R0,R0,#+27
   \   000000EE   0xD508             BPL.N    ??send_12
    254              // We consider "in progress" signed messages as being sent successfully.
    255              // The stack will send the message after signing.
    256              status = EMBER_SUCCESS;
    257              emAfSetCryptoOperationInProgress();
   \   000000F0   0x2001             MOVS     R0,#+1
   \   000000F2   0x.... 0x....      BL       emAfSetCryptoStatus
   \   000000F6   0x2700             MOVS     R7,#+0
   \   000000F8   0xE000             B.N      ??send_11
    258            }
    259          
    260            if (status == EMBER_SUCCESS) {
   \                     ??send_13: (+1)
   \   000000FA   0xB917             CBNZ.N   R7,??send_12
    261              emberAfAddToCurrentAppTasks(EMBER_AF_WAITING_FOR_DATA_ACK
    262                                          | EMBER_AF_WAITING_FOR_ZCL_RESPONSE);
   \                     ??send_11: (+1)
   \   000000FC   0x2011             MOVS     R0,#+17
   \   000000FE   0x.... 0x....      BL       emberAfAddToCurrentAppTasksCallback
    263            }
    264          
    265            emberAfPopNetworkIndex();
   \                     ??send_12: (+1)
   \   00000102   0x.... 0x....      BL       emberAfPopNetworkIndex
    266            return status;
   \   00000106   0x4638             MOV      R0,R7
   \                     ??send_3: (+1)
   \   00000108   0xB006             ADD      SP,SP,#+24
   \   0000010A   0xE8BD 0x8DF0      POP      {R4-R8,R10,R11,PC}  ;; return
    267          }
    268          

   \                                 In section .text, align 2, keep-with-next
    269          EmberStatus emberAfSendMulticastWithCallback(EmberMulticastId multicastId,
    270                                                       EmberApsFrame *apsFrame,
    271                                                       int16u messageLength,
    272                                                       int8u *message,
    273                                                       EmberAfMessageSentFunction callback)
    274          {
   \                     emberAfSendMulticastWithCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    275            apsFrame->groupId = multicastId;
   \   00000004   0x8108             STRH     R0,[R1, #+8]
    276            return send(EMBER_OUTGOING_MULTICAST,
    277                        multicastId,
    278                        apsFrame,
    279                        messageLength,
    280                        message,
    281                        TRUE, // broadcast?
    282                        callback);
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x4613             MOV      R3,R2
   \   0000000A   0x9C06             LDR      R4,[SP, #+24]
   \   0000000C   0x9402             STR      R4,[SP, #+8]
   \   0000000E   0x460A             MOV      R2,R1
   \   00000010   0x2401             MOVS     R4,#+1
   \   00000012   0x4601             MOV      R1,R0
   \   00000014   0x9401             STR      R4,[SP, #+4]
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x....             B.N      ?Subroutine0
    283          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       send
   \   00000004   0xB004             ADD      SP,SP,#+16
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
    284          

   \                                 In section .text, align 2, keep-with-next
    285          EmberStatus emberAfSendMulticast(EmberMulticastId multicastId,
    286                                           EmberApsFrame *apsFrame,
    287                                           int16u messageLength,
    288                                           int8u *message)
    289          {
   \                     emberAfSendMulticast: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    290            return emberAfSendMulticastWithCallback(multicastId,
    291                                                    apsFrame,
    292                                                    messageLength,
    293                                                    message,
    294                                                    NULL);
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x9400             STR      R4,[SP, #+0]
   \   00000008   0x.... 0x....      BL       emberAfSendMulticastWithCallback
   \   0000000C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    295          }
    296          

   \                                 In section .text, align 2, keep-with-next
    297          EmberStatus emberAfSendBroadcastWithCallback(EmberNodeId destination,
    298                                                       EmberApsFrame *apsFrame,
    299                                                       int16u messageLength,
    300                                                       int8u *message,
    301                                                       EmberAfMessageSentFunction callback)
    302          {
   \                     emberAfSendBroadcastWithCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    303            return send(EMBER_OUTGOING_BROADCAST,
    304                        destination,
    305                        apsFrame,
    306                        messageLength,
    307                        message,
    308                        TRUE, // broadcast?
    309                        callback);
   \   00000004   0x9C06             LDR      R4,[SP, #+24]
   \   00000006   0x9300             STR      R3,[SP, #+0]
   \   00000008   0x9402             STR      R4,[SP, #+8]
   \   0000000A   0x4613             MOV      R3,R2
   \   0000000C   0x460A             MOV      R2,R1
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x9401             STR      R4,[SP, #+4]
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016                      REQUIRE ?Subroutine0
   \   00000016                      ;; // Fall through to label ?Subroutine0
    310          }
    311          

   \                                 In section .text, align 2, keep-with-next
    312          EmberStatus emberAfSendBroadcast(EmberNodeId destination,
    313                                           EmberApsFrame *apsFrame,
    314                                           int16u messageLength,
    315                                           int8u *message)
    316          {
   \                     emberAfSendBroadcast: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    317            return emberAfSendBroadcastWithCallback(destination,
    318                                                    apsFrame,
    319                                                    messageLength,
    320                                                    message,
    321                                                    NULL);
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x9400             STR      R4,[SP, #+0]
   \   00000008   0x.... 0x....      BL       emberAfSendBroadcastWithCallback
   \   0000000C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    322          }
    323          

   \                                 In section .text, align 2, keep-with-next
    324          EmberStatus emberAfSendUnicastWithCallback(EmberOutgoingMessageType type,
    325                                                     int16u indexOrDestination,
    326                                                     EmberApsFrame *apsFrame,
    327                                                     int16u messageLength,
    328                                                     int8u *message,
    329                                                     EmberAfMessageSentFunction callback)
    330          {
   \                     emberAfSendUnicastWithCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    331            // The source endpoint in the APS frame MAY NOT be valid at this point if the
    332            // outgoing type is "via binding."
    333            if (type == EMBER_OUTGOING_VIA_BINDING) {
   \   00000004   0x2C02             CMP      R4,#+2
   \   00000006   0xB085             SUB      SP,SP,#+20
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x461F             MOV      R7,R3
   \   0000000E   0xD10A             BNE.N    ??emberAfSendUnicastWithCallback_0
    334              // If using binding, set the endpoints based on those in the binding.  The
    335              // cluster in the binding is not used because bindings can be used to send
    336              // messages with any cluster id, not just the one set in the binding.
    337              EmberBindingTableEntry binding;
    338              EmberStatus status = emberGetBinding(indexOrDestination, &binding);
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0xB2E8             UXTB     R0,R5
   \   00000014   0x.... 0x....      BL       emberGetBinding
    339              if (status != EMBER_SUCCESS) {
   \   00000018   0xB988             CBNZ.N   R0,??emberAfSendUnicastWithCallback_1
    340                return status;
    341              }
    342              apsFrame->sourceEndpoint = binding.local;
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0x7130             STRB     R0,[R6, #+4]
    343              apsFrame->destinationEndpoint = binding.remote;
   \   00000020   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000024   0x7170             STRB     R0,[R6, #+5]
    344            }
    345            return send(type,
    346                        indexOrDestination,
    347                        apsFrame,
    348                        messageLength,
    349                        message,
    350                        FALSE, // broadcast?
    351                        callback);
   \                     ??emberAfSendUnicastWithCallback_0: (+1)
   \   00000026   0x463B             MOV      R3,R7
   \   00000028   0x980B             LDR      R0,[SP, #+44]
   \   0000002A   0x9002             STR      R0,[SP, #+8]
   \   0000002C   0x4632             MOV      R2,R6
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x980A             LDR      R0,[SP, #+40]
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       send
   \                     ??emberAfSendUnicastWithCallback_1: (+1)
   \   0000003E   0xB005             ADD      SP,SP,#+20
   \   00000040   0xBDF0             POP      {R4-R7,PC}       ;; return
    352          }
    353          

   \                                 In section .text, align 2, keep-with-next
    354          EmberStatus emberAfSendUnicast(EmberOutgoingMessageType type,
    355                                         int16u indexOrDestination,
    356                                         EmberApsFrame *apsFrame,
    357                                         int16u messageLength,
    358                                         int8u *message)
    359          {
   \                     emberAfSendUnicast: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    360            return emberAfSendUnicastWithCallback(type,
    361                                                  indexOrDestination,
    362                                                  apsFrame,
    363                                                  messageLength,
    364                                                  message,
    365                                                  NULL);
   \   00000002   0x2400             MOVS     R4,#+0
   \   00000004   0x9401             STR      R4,[SP, #+4]
   \   00000006   0x9C04             LDR      R4,[SP, #+16]
   \   00000008   0x9400             STR      R4,[SP, #+0]
   \   0000000A   0x.... 0x....      BL       emberAfSendUnicastWithCallback
   \   0000000E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    366          }
    367          

   \                                 In section .text, align 2, keep-with-next
    368          EmberStatus emberAfSendUnicastToBindingsWithCallback(EmberApsFrame *apsFrame,
    369                                                               int16u messageLength,
    370                                                               int8u* message,
    371                                                               EmberAfMessageSentFunction callback)
    372          {
   \                     emberAfSendUnicastToBindingsWithCallback: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4688             MOV      R8,R1
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0x4699             MOV      R9,R3
    373              EmberStatus status;
    374              
    375              boolean bindingSentOk = FALSE;  //GB result flag.
   \   0000000E   0x2500             MOVS     R5,#+0
    376              
    377              for (int8u i=0; i<EMBER_BINDING_TABLE_SIZE; i++) 
   \   00000010   0x2700             MOVS     R7,#+0
    378              {
    379                  EmberBindingTableEntry binding;
    380                  status = emberGetBinding(i, &binding);    
    381                  if (status != EMBER_SUCCESS) 
   \                     ??emberAfSendUnicastToBindingsWithCallback_0: (+1)
   \   00000012   0xA903             ADD      R1,SP,#+12
   \   00000014   0x4638             MOV      R0,R7
   \   00000016   0x.... 0x....      BL       emberGetBinding
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xBF04             ITT      EQ 
   \   0000001E   0xF89D 0x000C      LDRBEQ   R0,[SP, #+12]
   \   00000022   0x2801             CMPEQ    R0,#+1
    382                  {
    383                      continue;  //GB dont return
    384                  }
    385                  
    386                  if (binding.type == EMBER_UNICAST_BINDING
    387                      && binding.local == apsFrame->sourceEndpoint
    388                      && binding.clusterId == apsFrame->clusterId) 
   \   00000024   0xD119             BNE.N    ??emberAfSendUnicastToBindingsWithCallback_1
   \   00000026   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000002A   0x7921             LDRB     R1,[R4, #+4]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xBF02             ITTT     EQ 
   \   00000030   0xF8BD 0x000E      LDRHEQ   R0,[SP, #+14]
   \   00000034   0x8861             LDRHEQ   R1,[R4, #+2]
   \   00000036   0x4288             CMPEQ    R0,R1
   \   00000038   0xD10F             BNE.N    ??emberAfSendUnicastToBindingsWithCallback_1
    389                  {
    390                      apsFrame->destinationEndpoint = binding.remote;
   \   0000003A   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000003E   0x7160             STRB     R0,[R4, #+5]
    391                      status = send(EMBER_OUTGOING_VIA_BINDING,
    392                                      i,
    393                                      apsFrame,
    394                                      messageLength,
    395                                      message,
    396                                      FALSE, // broadcast?
    397                                      callback);
    398                      if (status == EMBER_SUCCESS) 
   \   00000040   0xF8CD 0x9008      STR      R9,[SP, #+8]
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9001             STR      R0,[SP, #+4]
   \   00000048   0x9600             STR      R6,[SP, #+0]
   \   0000004A   0x4643             MOV      R3,R8
   \   0000004C   0x4622             MOV      R2,R4
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       send
   \   00000056   0xB900             CBNZ.N   R0,??emberAfSendUnicastToBindingsWithCallback_1
    399                      {
    400                          bindingSentOk = TRUE;  //GB Set flag, dont return. 
   \   00000058   0x2501             MOVS     R5,#+1
    401                      }
    402                  }
    403              }
   \                     ??emberAfSendUnicastToBindingsWithCallback_1: (+1)
   \   0000005A   0x1C7F             ADDS     R7,R7,#+1
   \   0000005C   0x2F08             CMP      R7,#+8
   \   0000005E   0xDBD8             BLT.N    ??emberAfSendUnicastToBindingsWithCallback_0
    404          
    405              //GB Set status for return- 'SUCCESS' if at least one msg has been sucessfully sent to a binding entry.
    406              status = (bindingSentOk) ? EMBER_SUCCESS : EMBER_INVALID_BINDING_INDEX;
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xBF14             ITE      NE 
   \   00000064   0x2000             MOVNE    R0,#+0
   \   00000066   0x206C             MOVEQ    R0,#+108
    407              
    408              return status;
   \   00000068   0xB007             ADD      SP,SP,#+28
   \   0000006A   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    409          }
    410          

   \                                 In section .text, align 2, keep-with-next
    411          EmberStatus emberAfSendUnicastToBindings(EmberApsFrame *apsFrame,
    412                                                   int16u messageLength,
    413                                                   int8u* message)
    414          {
    415            return emberAfSendUnicastToBindingsWithCallback(apsFrame,
    416                                                            messageLength,
    417                                                            message,
    418                                                            NULL);
   \                     emberAfSendUnicastToBindings: (+1)
   \   00000000   0x2300             MOVS     R3,#+0
   \   00000002   0x....             B.N      emberAfSendUnicastToBindingsWithCallback
    419          }
    420          

   \                                 In section .text, align 2, keep-with-next
    421          EmberStatus emberAfSendInterPan(EmberPanId panId,
    422                                          const EmberEUI64 eui64,
    423                                          EmberNodeId nodeId,
    424                                          EmberMulticastId multicastId,
    425                                          EmberAfClusterId clusterId,
    426                                          EmberAfProfileId profileId,
    427                                          int16u messageLength,
    428                                          int8u* messageBytes)
    429          {
   \                     emberAfSendInterPan: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461F             MOV      R7,R3
    430            EmberAfInterpanHeader header;
    431            MEMSET(&header, 0, sizeof(EmberAfInterpanHeader));
   \   0000000C   0x2216             MOVS     R2,#+22
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       halCommonMemSet
    432            header.panId = panId;
   \   00000016   0xF8AD 0x400C      STRH     R4,[SP, #+12]
    433            header.shortAddress = nodeId;
   \   0000001A   0xF8AD 0x600A      STRH     R6,[SP, #+10]
    434            if (eui64 != NULL) {
   \   0000001E   0xB16D             CBZ.N    R5,??emberAfSendInterPan_0
    435              MEMCOPY(header.longAddress, eui64, EUI64_SIZE);
   \   00000020   0x2208             MOVS     R2,#+8
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0xF10D 0x0001      ADD      R0,SP,#+1
   \   00000028   0x.... 0x....      BL       halCommonMemCopy
    436              header.options |= EMBER_AF_INTERPAN_OPTION_MAC_HAS_LONG_ADDRESS;
   \   0000002C   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   00000030   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000034   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    437              header.messageType = EMBER_AF_INTER_PAN_UNICAST;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE00A             B.N      ??emberAfSendInterPan_1
    438            } else if (multicastId != 0) {
   \                     ??emberAfSendInterPan_0: (+1)
   \   0000003C   0xB11F             CBZ.N    R7,??emberAfSendInterPan_2
    439              header.groupId = multicastId;
   \   0000003E   0xF8AD 0x7012      STRH     R7,[SP, #+18]
    440              header.messageType = EMBER_AF_INTER_PAN_MULTICAST;
   \   00000042   0x200C             MOVS     R0,#+12
   \   00000044   0xE005             B.N      ??emberAfSendInterPan_1
    441            } else {
    442              header.messageType = (nodeId < EMBER_BROADCAST_ADDRESS
    443                                    ? EMBER_AF_INTER_PAN_UNICAST
    444                                    : EMBER_AF_INTER_PAN_BROADCAST);
   \                     ??emberAfSendInterPan_2: (+1)
   \   00000046   0xF64F 0x70FC      MOVW     R0,#+65532
   \   0000004A   0x4286             CMP      R6,R0
   \   0000004C   0xBFB4             ITE      LT 
   \   0000004E   0x2000             MOVLT    R0,#+0
   \   00000050   0x2008             MOVGE    R0,#+8
   \                     ??emberAfSendInterPan_1: (+1)
   \   00000052   0xF88D 0x0000      STRB     R0,[SP, #+0]
    445            }
    446            header.profileId = profileId;
   \   00000056   0x980D             LDR      R0,[SP, #+52]
    447            header.clusterId = clusterId;
    448            return emberAfInterpanSendMessageCallback(&header,
    449                                                      messageLength,
    450                                                      messageBytes);
   \   00000058   0x9A0F             LDR      R2,[SP, #+60]
   \   0000005A   0x990E             LDR      R1,[SP, #+56]
   \   0000005C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   00000060   0x980C             LDR      R0,[SP, #+48]
   \   00000062   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   00000066   0xA800             ADD      R0,SP,#+0
   \   00000068   0x.... 0x....      BL       emberAfInterpanSendMessageCallback
   \   0000006C   0xB007             ADD      SP,SP,#+28
   \   0000006E   0xBDF0             POP      {R4-R7,PC}       ;; return
    451          }
    452          

   \                                 In section .text, align 2, keep-with-next
    453          void emberAfPrintMessageData(int8u* data, int16u length)
    454          {
   \                     emberAfPrintMessageData: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    455          #if defined EMBER_AF_PRINT_APP
    456            emberAfAppPrint(" payload (len %2x) [", length); 
   \   00000006   0x462A             MOV      R2,R5
   \   00000008   0x.... 0x....      ADR.W    R1,?_8
   \   0000000C   0x2004             MOVS     R0,#+4
   \   0000000E   0x.... 0x....      BL       emberAfPrint
    457            emberAfAppPrintBuffer(data, length, TRUE);
   \   00000012   0x2301             MOVS     R3,#+1
   \   00000014   0x462A             MOV      R2,R5
   \   00000016   0x4621             MOV      R1,R4
   \   00000018   0x2004             MOVS     R0,#+4
   \   0000001A   0x.... 0x....      BL       emberAfPrintBuffer
    458            emberAfAppPrintln("]"); 
   \   0000001E   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000022   0x....             ADR.N    R1,??DataTable53  ;; "]"
   \   00000024   0x2004             MOVS     R0,#+4
   \   00000026   0x.... 0x....      B.W      emberAfPrintln
    459          #endif
    460          }
    461          

   \                                 In section .text, align 2, keep-with-next
    462          void emAfPrintStatus(PGM_P task,
    463                               EmberStatus status)
    464          {
   \                     emAfPrintStatus: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4603             MOV      R3,R0
    465            if (status == EMBER_SUCCESS) {
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable57_4
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0xB939             CBNZ.N   R1,??emAfPrintStatus_0
    466              emberAfPrint(emberAfPrintActiveArea,
    467                           "%p: %p", 
    468                           "Success",
    469                           task );
   \   0000000C   0xE8BD 0x5000      POP      {R12,LR}
   \   00000010   0x.... 0x....      ADR.W    R2,?_11
   \   00000014   0x.... 0x....      ADR.W    R1,?_10
   \   00000018   0x.... 0x....      B.W      emberAfPrint
    470            } else {
    471              emberAfPrint(emberAfPrintActiveArea,
    472                           "%p: %p: 0x%x", 
    473                           "Error",
    474                           task, 
    475                           status);
   \                     ??emAfPrintStatus_0: (+1)
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x.... 0x....      ADR.W    R2,?_13
   \   00000022   0x.... 0x....      ADR.W    R1,?_12
   \   00000026   0x.... 0x....      BL       emberAfPrint
    476            }
    477          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    478          
    479          static EmberStatus broadcastPermitJoin(int8u duration)
    480          {
    481            EmberStatus status;
    482            int8u data[3] = { 0,   // sequence number (filled in later)
    483                              0,   // duration (filled in below)
    484                              0 }; // TC significance (not used)
    485          
    486            data[1] = duration;
    487            status = emberSendZigDevRequest(EMBER_BROADCAST_ADDRESS,
    488                                            PERMIT_JOINING_REQUEST,
    489                                            0,   // APS options
    490                                            data,
    491                                            3);  // length
    492            return status;
    493          }
    494          
    495          // Public API

   \                                 In section .text, align 2, keep-with-next
    496          EmberStatus emberAfPermitJoin(int8u duration,
    497                                        boolean broadcastMgmtPermitJoin)
    498          {
   \                     emberAfPermitJoin: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    499            // Permit joining forever is bad behavior, so we want to limit
    500            // this.  If 254 is not enough a re-broadcast should be done later.
    501            if (duration == 255) {
   \   00000002   0x28FF             CMP      R0,#+255
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0xD104             BNE.N    ??emberAfPermitJoin_0
    502              emberAfAppPrintln("Limiting duration of permit join from forever (255) to 254");
   \   00000008   0x.... 0x....      ADR.W    R1,?_15
   \   0000000C   0x.... 0x....      BL       ?Subroutine3
    503              duration = 254;
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000010   0x20FE             MOVS     R0,#+254
    504            }
    505            return emAfPermitJoin(duration,
    506                                  broadcastMgmtPermitJoin);
   \                     ??emberAfPermitJoin_0: (+1)
   \   00000012   0x4621             MOV      R1,R4
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018                      REQUIRE emAfPermitJoin
   \   00000018                      ;; // Fall through to label emAfPermitJoin
    507          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    508          
    509          // Old API that doesn't restrict prevent permit joining forever (255)

   \                                 In section .text, align 2, keep-with-next
    510          EmberStatus emAfPermitJoin(int8u duration, 
    511                                     boolean broadcastMgmtPermitJoin) 
    512          {
   \                     emAfPermitJoin: (+1)
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    513            EmberStatus status = emberPermitJoining(duration);
   \   00000006   0x.... 0x....      BL       emberPermitJoining
   \   0000000A   0x4606             MOV      R6,R0
    514            emberAfAppPrintln("pJoin for %d sec: 0x%x", duration, status); 
   \   0000000C   0x4633             MOV      R3,R6
   \   0000000E   0x4622             MOV      R2,R4
   \   00000010   0x.... 0x....      ADR.W    R1,?_16
   \   00000014   0x2004             MOVS     R0,#+4
   \   00000016   0x.... 0x....      BL       emberAfPrintln
    515            if (status == EMBER_SUCCESS && broadcastMgmtPermitJoin) {
   \   0000001A   0xB97E             CBNZ.N   R6,??emAfPermitJoin_0
   \   0000001C   0xB175             CBZ.N    R5,??emAfPermitJoin_0
    516              status = broadcastPermitJoin(duration);
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xF88D 0x4005      STRB     R4,[SP, #+5]
   \   0000002C   0xAB01             ADD      R3,SP,#+4
   \   0000002E   0x2200             MOVS     R2,#+0
   \   00000030   0x2136             MOVS     R1,#+54
   \   00000032   0xF64F 0x70FC      MOVW     R0,#+65532
   \   00000036   0x.... 0x....      BL       emberSendZigDevRequest
   \   0000003A   0x4606             MOV      R6,R0
    517            }
    518            return status;
   \                     ??emAfPermitJoin_0: (+1)
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    519          }
    520          
    521          
    522          // ******************************************************************
    523          // Functions called by the Serial Command Line Interface (CLI)
    524          // ******************************************************************
    525          

   \                                 In section .text, align 2, keep-with-next
    526          boolean emAfProcessZdo(EmberNodeId sender,
    527                                 EmberApsFrame* apsFrame,
    528                                 int8u* message, 
    529                                 int16u length)
    530          {
   \                     emAfProcessZdo: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
    531            if (apsFrame->profileId != EMBER_ZDO_PROFILE_ID) {
   \   00000006   0x8828             LDRH     R0,[R5, #+0]
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0xB108             CBZ.N    R0,??emAfProcessZdo_0
    532              return FALSE;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD70             POP      {R4-R6,PC}
    533            }
    534            
    535            // To make the printing simpler, we assume all 'request' messages
    536            // have a status of 0x00.  Request messages have no status value in them
    537            // but saying 'success' (0x00) seems appropriate.
    538            // Response messages will have their status value printed appropriately.
    539            emberAfZdoPrintln("RX: ZDO, command 0x%2x, status: 0x%X", 
    540                              apsFrame->clusterId,
    541                              (apsFrame->clusterId >= CLUSTER_ID_RESPONSE_MINIMUM
    542                               ? message[1]
    543                               : 0));
    544              
    545            if (apsFrame->clusterId == SIMPLE_DESCRIPTOR_RESPONSE) {
    546              emberAfZdoPrintln("RX: %p Desc Resp", "Simple");
    547            } else if (apsFrame->clusterId == MATCH_DESCRIPTORS_RESPONSE) {
    548              emberAfZdoPrint("RX: %p Desc Resp", "Match");
    549              emberAfZdoPrintln(", Matches: %d", message[4]);
    550            } else if (apsFrame->clusterId == END_DEVICE_BIND_RESPONSE) {
    551              emberAfZdoPrintln("RX: End dev bind response, status=%x", message[1]);
    552            } else if (apsFrame->clusterId == END_DEVICE_ANNOUNCE) {
    553              emberAfZdoPrintln("Device Announce: 0x%2x",
    554                                (int16u)(message[1])
    555                                + (int16u)(message[2] << 8));
    556            } else if (apsFrame->clusterId == IEEE_ADDRESS_RESPONSE) {
    557              emberAfZdoPrintln("RX: IEEE Address Response");
    558            } else if (apsFrame->clusterId == ACTIVE_ENDPOINTS_RESPONSE) {
    559              emberAfZdoPrintln("RX: Active EP Response, Count: %d", message[4]);
    560            }
    561          
    562          #if defined(EMBER_AF_PLUGIN_IAS_ZONE_CLIENT)
    563            emberAfPluginIasZoneClientZdoCallback(sender, apsFrame, message, length);
    564          #endif
    565          
    566            if (emberAfPreZDOMessageReceivedCallback(sender, apsFrame, message, length)) {
   \                     ??emAfProcessZdo_0: (+1)
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberAfPreZDOMessageReceivedCallback
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xBF02             ITTT     EQ 
   \   0000001A   0x8868             LDRHEQ   R0,[R5, #+2]
   \   0000001C   0xF248 0x0121      MOVWEQ   R1,#+32801
   \   00000020   0x4288             CMPEQ    R0,R1
    567              goto zdoProcessingDone;
    568            }
    569          
    570            if (apsFrame->clusterId == BIND_RESPONSE) {
   \   00000022   0xD103             BNE.N    ??emAfProcessZdo_1
    571              emberAfPartnerLinkKeyExchangeResponseCallback(sender, message[1]);
   \   00000024   0x7871             LDRB     R1,[R6, #+1]
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       emberAfPartnerLinkKeyExchangeResponseCallback
    572            }
    573          
    574           zdoProcessingDone:
    575            // if it is a zdo response we can remove the zdo waiting task
    576            // and let a sleepy go back into hibernation
    577            if (apsFrame->clusterId > CLUSTER_ID_RESPONSE_MINIMUM) {
   \                     ??emAfProcessZdo_1: (+1)
   \   0000002C   0x8868             LDRH     R0,[R5, #+2]
   \   0000002E   0xF5B0 0x4F00      CMP      R0,#+32768
   \   00000032   0xBFC4             ITT      GT 
    578              emberAfRemoveFromCurrentAppTasks(EMBER_AF_WAITING_FOR_ZDO_RESPONSE);
   \   00000034   0x2008             MOVGT    R0,#+8
   \   00000036   0x.... 0x....      BLGT     emberAfRemoveFromCurrentAppTasksCallback
    579            }
    580          
    581            return TRUE;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    582          }
    583          

   \                                 In section .text, align 2, keep-with-next
    584          void emAfIncomingMessageHandler(EmberIncomingMessageType type,
    585                                          EmberApsFrame *apsFrame,
    586                                          int8u lastHopLqi,
    587                                          int8s lastHopRssi,
    588                                          int16u messageLength,
    589                                          int8u *messageContents)
    590          {
   \                     emAfIncomingMessageHandler: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x460E             MOV      R6,R1
   \   0000000A   0x4692             MOV      R10,R2
   \   0000000C   0x4698             MOV      R8,R3
    591            EmberNodeId sender = emberGetSender();
   \   0000000E   0x.... 0x....      BL       emberGetSender
   \   00000012   0x4605             MOV      R5,R0
    592            EmberAfIncomingMessage im;
    593          
    594          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    595            if (emAfFragmentationIncomingMessage(apsFrame,
    596                                                 sender,
    597                                                 &messageContents,
    598                                                 &messageLength)) {
    599              emberAfDebugPrintln("%pfragment processed.", "Fragmentation:");
    600              return;
    601            }
    602          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    603          
    604            emberAfDebugPrintln("Processing message: len=%d profile=%2x cluster=%2x",
    605                                messageLength,
    606                                apsFrame->profileId,
    607                                apsFrame->clusterId);
   \   00000014   0x8870             LDRH     R0,[R6, #+2]
   \   00000016   0x9C10             LDR      R4,[SP, #+64]
   \   00000018   0x.... 0x....      ADR.W    R1,?_17
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x4622             MOV      R2,R4
   \   00000020   0x8833             LDRH     R3,[R6, #+0]
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0x.... 0x....      BL       emberAfPrintln
    608            emberAfDebugFlush();
    609          
    610            // Populate the incoming message struct to pass to the incoming message
    611            // callback.
    612            im.type              = type;
   \   00000028   0xF88D 0x9008      STRB     R9,[SP, #+8]
    613            im.apsFrame          = apsFrame;
   \   0000002C   0x9603             STR      R6,[SP, #+12]
   \   0000002E   0x9F11             LDR      R7,[SP, #+68]
    614            im.message           = messageContents;
   \   00000030   0x9704             STR      R7,[SP, #+16]
    615            im.msgLen            = messageLength;
   \   00000032   0xF8AD 0x4014      STRH     R4,[SP, #+20]
    616            im.source            = sender;
   \   00000036   0xF8AD 0x5016      STRH     R5,[SP, #+22]
    617            im.lastHopLqi        = lastHopLqi;
   \   0000003A   0xF88D 0xA018      STRB     R10,[SP, #+24]
    618            im.lastHopRssi       = lastHopRssi;
   \   0000003E   0xF88D 0x8019      STRB     R8,[SP, #+25]
    619            im.bindingTableIndex = emberAfGetBindingIndex();
   \   00000042   0x.... 0x....      BL       emberAfGetBindingIndex
   \   00000046   0xF88D 0x001A      STRB     R0,[SP, #+26]
    620            im.addressTableIndex = emberAfGetAddressIndex();
   \   0000004A   0x.... 0x....      BL       emberAfGetAddressIndex
   \   0000004E   0xF88D 0x001B      STRB     R0,[SP, #+27]
    621            im.networkIndex      = emberGetCurrentNetwork();
   \   00000052   0x.... 0x....      BL       emberGetCurrentNetwork
   \   00000056   0xF88D 0x001C      STRB     R0,[SP, #+28]
    622            if (emberAfPreMessageReceivedCallback(&im)) {
   \   0000005A   0xA802             ADD      R0,SP,#+8
   \   0000005C   0x.... 0x....      BL       emberAfPreMessageReceivedCallback
   \   00000060   0xB9A8             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    623              return;
    624            }
    625          
    626            // Handle service discovery responses.
    627            if (emAfServiceDiscoveryIncoming(sender,
    628                                             apsFrame,
    629                                             messageContents,
    630                                             messageLength)) {
   \   00000062   0x4623             MOV      R3,R4
   \   00000064   0x463A             MOV      R2,R7
   \   00000066   0x4631             MOV      R1,R6
   \   00000068   0x4628             MOV      R0,R5
   \   0000006A   0x.... 0x....      BL       emAfServiceDiscoveryIncoming
   \   0000006E   0xB970             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    631              return;
    632            }
    633          
    634            // Handle ZDO messages.
    635            if (emAfProcessZdo(sender, apsFrame, messageContents, messageLength)) {
   \   00000070   0x4623             MOV      R3,R4
   \   00000072   0x463A             MOV      R2,R7
   \   00000074   0x4631             MOV      R1,R6
   \   00000076   0x4628             MOV      R0,R5
   \   00000078   0x.... 0x....      BL       emAfProcessZdo
   \   0000007C   0xB938             CBNZ.N   R0,??emAfIncomingMessageHandler_0
    636              return;
    637            }
    638          
    639            // Handle ZCL messages.
    640            if (emberAfProcessMessage(apsFrame,
    641                                      type,
    642                                      messageContents,
    643                                      messageLength,
    644                                      sender,
    645                                      NULL)) { // no inter-pan header
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x9500             STR      R5,[SP, #+0]
   \   00000082   0x4623             MOV      R3,R4
   \   00000084   0x463A             MOV      R2,R7
   \   00000086   0x4649             MOV      R1,R9
   \   00000088   0x4630             MOV      R0,R6
   \   0000008A   0x.... 0x....      BL       emberAfProcessMessage
    646              return;
   \                     ??emAfIncomingMessageHandler_0: (+1)
   \   0000008E   0xB008             ADD      SP,SP,#+32
   \   00000090   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    647            }
    648          }
    649          
    650          static void printMessage(EmberIncomingMessageType tyep,
    651                                   EmberApsFrame* apsFrame,
    652                                   int16u messageLength,
    653                                   int8u* messageContents)
    654          {
    655            emberAfAppPrint("Profile: %p (0x%2X), Cluster: 0x%2X, %d bytes,",
    656                               (apsFrame->profileId == EMBER_ZDO_PROFILE_ID
    657                                ? "ZDO"
    658                                : (apsFrame->profileId == SE_PROFILE_ID 
    659                                   ? "SE"
    660                                   : (apsFrame->profileId == 0x0104
    661                                      ? "HA"
    662                                      : "??"))),
    663                               apsFrame->profileId,
    664                               apsFrame->clusterId,
    665                               messageLength);
    666            if (apsFrame->profileId != EMBER_ZDO_PROFILE_ID
    667                && messageLength >= 3) {
    668              emberAfAppPrint(" ZCL %p Cmd ID: %d", 
    669                              (messageContents[0] & ZCL_CLUSTER_SPECIFIC_COMMAND
    670                               ? "Cluster"
    671                               : "Global"),
    672                              messageContents[2]);
    673            } 
    674            emberAfAppPrintln("");
    675          }
    676          

   \                                 In section .text, align 2, keep-with-next
    677          void emAfMessageSentHandler(EmberOutgoingMessageType type,
    678                                      int16u indexOrDestination,
    679                                      EmberApsFrame *apsFrame,
    680                                      EmberStatus status,
    681                                      int16u messageLength,
    682                                      int8u *messageContents,
    683                                      int8u messageTag)
    684          {
   \                     emAfMessageSentHandler: (+1)
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x001D             MOVS     R5,R3
   \   00000006   0x9C0A             LDR      R4,[SP, #+40]
   \   00000008   0x9E0B             LDR      R6,[SP, #+44]
   \   0000000A   0x4680             MOV      R8,R0
   \   0000000C   0x4689             MOV      R9,R1
   \   0000000E   0x4617             MOV      R7,R2
    685            EmberAfMessageSentFunction callback;
    686            if (status != EMBER_SUCCESS) {
   \   00000010   0xD031             BEQ.N    ??CrossCallReturnLabel_7
    687              emberAfAppPrint("%ptx %x, ", "ERROR: ", status);
   \   00000012   0x.... 0x....      ADR.W    R2,?_28
   \   00000016   0x.... 0x....      ADR.W    R1,?_27
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x.... 0x....      BL       emberAfPrint
    688              printMessage(type, apsFrame, messageLength, messageContents);
   \   00000020   0x883B             LDRH     R3,[R7, #+0]
   \   00000022   0xB90B             CBNZ.N   R3,??emAfMessageSentHandler_0
   \   00000024   0x....             ADR.N    R2,??DataTable56  ;; "ZDO"
   \   00000026   0xE00A             B.N      ??emAfMessageSentHandler_1
   \                     ??emAfMessageSentHandler_0: (+1)
   \   00000028   0xF240 0x1109      MOVW     R1,#+265
   \   0000002C   0x428B             CMP      R3,R1
   \   0000002E   0xBF08             IT       EQ 
   \   00000030   0x....             ADREQ.N  R2,??DataTable56_1  ;; 0x53, 0x45, 0x00, 0x00
   \   00000032   0xD004             BEQ.N    ??emAfMessageSentHandler_1
   \   00000034   0xF5B3 0x7F82      CMP      R3,#+260
   \   00000038   0xBF0C             ITE      EQ 
   \   0000003A   0x....             ADREQ.N  R2,??DataTable56_2  ;; 0x48, 0x41, 0x00, 0x00
   \   0000003C   0x....             ADRNE.N  R2,??DataTable56_3  ;; 0x3F, 0x3F, 0x00, 0x00
   \                     ??emAfMessageSentHandler_1: (+1)
   \   0000003E   0x9401             STR      R4,[SP, #+4]
   \   00000040   0x8878             LDRH     R0,[R7, #+2]
   \   00000042   0x.... 0x....      ADR.W    R1,?_18
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x2004             MOVS     R0,#+4
   \   0000004A   0x.... 0x....      BL       emberAfPrint
   \   0000004E   0x8838             LDRH     R0,[R7, #+0]
   \   00000050   0xB170             CBZ.N    R0,??emAfMessageSentHandler_2
   \   00000052   0x2C03             CMP      R4,#+3
   \   00000054   0xDB0C             BLT.N    ??emAfMessageSentHandler_2
   \   00000056   0x7830             LDRB     R0,[R6, #+0]
   \   00000058   0x78B3             LDRB     R3,[R6, #+2]
   \   0000005A   0x.... 0x....      ADR.W    R1,?_23
   \   0000005E   0x07C0             LSLS     R0,R0,#+31
   \   00000060   0xBF4C             ITE      MI 
   \   00000062   0x.... 0x....      ADRMI.W  R2,?_24
   \   00000066   0x.... 0x....      ADRPL.W  R2,?_25
   \   0000006A   0x2004             MOVS     R0,#+4
   \   0000006C   0x.... 0x....      BL       emberAfPrint
   \                     ??emAfMessageSentHandler_2: (+1)
   \   00000070   0x....             ADR.N    R1,??DataTable56_4  ;; ""
   \   00000072   0x.... 0x....      BL       ?Subroutine3
    689            }
    690          
    691            callback = getMessageSentCallback(messageTag);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000076   0x980C             LDR      R0,[SP, #+48]
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable57_2
   \   0000007C   0x2200             MOVS     R2,#+0
   \                     ??emAfMessageSentHandler_3: (+1)
   \   0000007E   0xEB01 0x03C2      ADD      R3,R1,R2, LSL #+3
   \   00000082   0x791B             LDRB     R3,[R3, #+4]
   \   00000084   0x4283             CMP      R3,R0
   \   00000086   0xD011             BEQ.N    ??emAfMessageSentHandler_4
   \   00000088   0x1C52             ADDS     R2,R2,#+1
   \   0000008A   0xB2D2             UXTB     R2,R2
   \   0000008C   0x2A03             CMP      R2,#+3
   \   0000008E   0xDBF6             BLT.N    ??emAfMessageSentHandler_3
   \   00000090   0xF04F 0x0A00      MOV      R10,#+0
    692            invalidateMessageSentCallbackEntry(messageTag);
   \                     ??emAfMessageSentHandler_5: (+1)
   \   00000094   0x2200             MOVS     R2,#+0
   \                     ??emAfMessageSentHandler_6: (+1)
   \   00000096   0xEB01 0x03C2      ADD      R3,R1,R2, LSL #+3
   \   0000009A   0xF893 0xC004      LDRB     R12,[R3, #+4]
   \   0000009E   0x4584             CMP      R12,R0
   \   000000A0   0xD007             BEQ.N    ??emAfMessageSentHandler_7
   \   000000A2   0x1C52             ADDS     R2,R2,#+1
   \   000000A4   0xB2D2             UXTB     R2,R2
   \   000000A6   0x2A03             CMP      R2,#+3
   \   000000A8   0xDBF5             BLT.N    ??emAfMessageSentHandler_6
   \   000000AA   0xE007             B.N      ??emAfMessageSentHandler_8
   \                     ??emAfMessageSentHandler_4: (+1)
   \   000000AC   0xF851 0xA032      LDR      R10,[R1, R2, LSL #+3]
   \   000000B0   0xE7F0             B.N      ??emAfMessageSentHandler_5
   \                     ??emAfMessageSentHandler_7: (+1)
   \   000000B2   0x20FF             MOVS     R0,#+255
   \   000000B4   0x7118             STRB     R0,[R3, #+4]
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0xF841 0x0032      STR      R0,[R1, R2, LSL #+3]
    693            emberAfDeliveryStatusCallback(type, status);
   \                     ??emAfMessageSentHandler_8: (+1)
   \   000000BC   0x4629             MOV      R1,R5
   \   000000BE   0x4640             MOV      R0,R8
   \   000000C0   0x.... 0x....      BL       emberAfDeliveryStatusCallback
    694          
    695            if (status == EMBER_SUCCESS
    696                && apsFrame->profileId == EMBER_ZDO_PROFILE_ID
    697                && apsFrame->clusterId < CLUSTER_ID_RESPONSE_MINIMUM) {
   \   000000C4   0x2D00             CMP      R5,#+0
   \   000000C6   0xBF04             ITT      EQ 
   \   000000C8   0x8838             LDRHEQ   R0,[R7, #+0]
   \   000000CA   0x2800             CMPEQ    R0,#+0
   \   000000CC   0xD106             BNE.N    ??emAfMessageSentHandler_9
   \   000000CE   0x8878             LDRH     R0,[R7, #+2]
   \   000000D0   0xF5B0 0x4F00      CMP      R0,#+32768
   \   000000D4   0xBFBC             ITT      LT 
    698              emberAfAddToCurrentAppTasks(EMBER_AF_WAITING_FOR_ZDO_RESPONSE);
   \   000000D6   0x2008             MOVLT    R0,#+8
   \   000000D8   0x.... 0x....      BLLT     emberAfAddToCurrentAppTasksCallback
    699            }
    700          
    701            emberAfRemoveFromCurrentAppTasks(EMBER_AF_WAITING_FOR_DATA_ACK);
   \                     ??emAfMessageSentHandler_9: (+1)
   \   000000DC   0x2001             MOVS     R0,#+1
   \   000000DE   0x.... 0x....      BL       emberAfRemoveFromCurrentAppTasksCallback
    702          
    703            if (messageContents != NULL && messageContents[0] & ZCL_CLUSTER_SPECIFIC_COMMAND) {
   \   000000E2   0xB136             CBZ.N    R6,??emAfMessageSentHandler_10
   \   000000E4   0x7830             LDRB     R0,[R6, #+0]
   \   000000E6   0x07C0             LSLS     R0,R0,#+31
   \   000000E8   0xD503             BPL.N    ??emAfMessageSentHandler_10
    704              emberAfClusterMessageSentCallback(type,
    705                                                indexOrDestination,
    706                                                apsFrame,
    707                                                messageLength,
    708                                                messageContents,
    709                                                status);
   \   000000EA   0x.... 0x....      BL       ?Subroutine2
    710            }
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000EE   0x.... 0x....      BL       emberAfClusterMessageSentCallback
    711          
    712            if (callback != NULL) {
   \                     ??emAfMessageSentHandler_10: (+1)
   \   000000F2   0xF1BA 0x0F00      CMP      R10,#+0
   \   000000F6   0xD002             BEQ.N    ??emAfMessageSentHandler_11
    713              (*callback)(type, indexOrDestination, apsFrame, messageLength, messageContents, status);
   \   000000F8   0x.... 0x....      BL       ?Subroutine2
    714            }
   \                     ??CrossCallReturnLabel_3: (+1)
   \   000000FC   0x47D0             BLX      R10
    715          
    716          #ifdef EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS
    717            EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS
   \                     ??emAfMessageSentHandler_11: (+1)
   \   000000FE   0x9601             STR      R6,[SP, #+4]
   \   00000100   0x9400             STR      R4,[SP, #+0]
   \   00000102   0x462B             MOV      R3,R5
   \   00000104   0x463A             MOV      R2,R7
   \   00000106   0x4649             MOV      R1,R9
   \   00000108   0x4640             MOV      R0,R8
   \   0000010A   0x.... 0x....      BL       emberAfPluginConcentratorMessageSentCallback
    718          #endif
    719          
    720              emberAfMessageSentCallback(type,
    721                                         indexOrDestination,
    722                                         apsFrame,
    723                                         messageLength,
    724                                         messageContents,
    725                                         status);
   \   0000010E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000112   0x.... 0x....      BL       emberAfMessageSentCallback
    726          
    727          }
   \   00000116   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x9501             STR      R5,[SP, #+4]
   \   00000002   0x9600             STR      R6,[SP, #+0]
   \   00000004   0x4623             MOV      R3,R4
   \   00000006   0x463A             MOV      R2,R7
   \   00000008   0x4649             MOV      R1,R9
   \   0000000A   0x4640             MOV      R0,R8
   \   0000000C   0x4770             BX       LR
    728          
    729          #ifdef EMBER_AF_PLUGIN_FRAGMENTATION
    730          void emAfFragmentationMessageSentHandler(EmberOutgoingMessageType type,
    731                                                   int16u indexOrDestination,
    732                                                   EmberApsFrame *apsFrame,
    733                                                   int8u *buffer,
    734                                                   int16u bufLen,
    735                                                   EmberStatus status)
    736          {
    737            // the fragmented message is no longer in process
    738            emberAfDebugPrintln("%pend.", "Fragmentation:");
    739            emAfMessageSentHandler(type,
    740                                   indexOrDestination,
    741                                   apsFrame,
    742                                   status,
    743                                   bufLen,
    744                                   buffer,
    745                                   INVALID_MESSAGE_TAG);
    746          }
    747          #endif //EMBER_AF_PLUGIN_FRAGMENTATION
    748          

   \                                 In section .text, align 2, keep-with-next
    749          void emAfStackStatusHandler(EmberStatus status)
    750          {
   \                     emAfStackStatusHandler: (+1)
   \   00000000   0xE92D 0x42FC      PUSH     {R2-R7,R9,LR}
   \   00000004   0x4604             MOV      R4,R0
    751            emberAfAppFlush();
    752          
    753            // To be extra careful, we clear the network cache whenever a new status is
    754            // received.
    755            emAfClearNetworkCache(emberGetCurrentNetwork());
    756          
    757            switch (status) {
   \   00000006   0x3890             SUBS     R0,R0,#+144
   \   00000008   0x.... 0x....      ADR.W    R5,?_30
   \   0000000C   0x.... 0x....      ADR.W    R9,?_31
   \   00000010   0xD00C             BEQ.N    ??emAfStackStatusHandler_0
   \   00000012   0x1E40             SUBS     R0,R0,#+1
   \   00000014   0xD048             BEQ.N    ??emAfStackStatusHandler_1
   \   00000016   0x1EC0             SUBS     R0,R0,#+3
   \   00000018   0xD046             BEQ.N    ??emAfStackStatusHandler_1
   \   0000001A   0x1E80             SUBS     R0,R0,#+2
   \   0000001C   0xD044             BEQ.N    ??emAfStackStatusHandler_1
   \   0000001E   0x1E80             SUBS     R0,R0,#+2
   \   00000020   0xD042             BEQ.N    ??emAfStackStatusHandler_1
   \   00000022   0x3813             SUBS     R0,R0,#+19
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xD93F             BLS.N    ??emAfStackStatusHandler_1
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xD14F             BNE.N    ??emAfStackStatusHandler_2
    758              case EMBER_NETWORK_UP:
    759              case EMBER_TRUST_CENTER_EUI_HAS_CHANGED:  // also means NETWORK_UP
    760                {
    761                  // Set the runtime security settings as soon as the stack goes up.
    762                  EmberExtendedSecurityBitmask oldExtended;
    763                  EmberExtendedSecurityBitmask newExtended;
    764                  const EmberAfSecurityProfileData *data = emAfGetCurrentSecurityProfileData();
   \                     ??emAfStackStatusHandler_0: (+1)
   \   0000002C   0x.... 0x....      BL       emAfGetCurrentSecurityProfileData
   \   00000030   0x4607             MOV      R7,R0
    765                  boolean trustCenter = (emberAfGetNodeId() == EMBER_TRUST_CENTER_NODE_ID);
   \   00000032   0x.... 0x....      BL       emberAfGetNodeId
   \   00000036   0x1E46             SUBS     R6,R0,#+1
   \   00000038   0x41B6             SBCS     R6,R6,R6
   \   0000003A   0x0FF6             LSRS     R6,R6,#+31
    766                  if (data != NULL) {
   \   0000003C   0xB12F             CBZ.N    R7,??emAfStackStatusHandler_3
    767                    newExtended = (trustCenter
    768                                ? data->tcExtendedBitmask
    769                                : data->nodeExtendedBitmask);
   \   0000003E   0x2E00             CMP      R6,#+0
   \   00000040   0xBF14             ITE      NE 
   \   00000042   0x88B8             LDRHNE   R0,[R7, #+4]
   \   00000044   0x8938             LDRHEQ   R0,[R7, #+8]
   \   00000046   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    770                  }
    771          
    772                  emberGetExtendedSecurityBitmask(&oldExtended);
   \                     ??emAfStackStatusHandler_3: (+1)
   \   0000004A   0xF10D 0x0006      ADD      R0,SP,#+6
   \   0000004E   0x.... 0x....      BL       emberGetExtendedSecurityBitmask
    773                  if (oldExtended & EMBER_EXT_NO_FRAME_COUNTER_RESET){
   \   00000052   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000056   0x0680             LSLS     R0,R0,#+26
   \   00000058   0xD505             BPL.N    ??emAfStackStatusHandler_4
    774                    newExtended |= EMBER_EXT_NO_FRAME_COUNTER_RESET;
   \   0000005A   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   0000005E   0xF040 0x0020      ORR      R0,R0,#0x20
   \   00000062   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    775                  }
    776          
    777                  emberAfSecurityInitCallback(NULL, &newExtended, trustCenter);
   \                     ??emAfStackStatusHandler_4: (+1)
   \   00000066   0x4632             MOV      R2,R6
   \   00000068   0xA901             ADD      R1,SP,#+4
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       emberAfSecurityInitCallback
    778                  emberSetExtendedSecurityBitmask(newExtended);
   \   00000070   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000074   0x.... 0x....      BL       emberSetExtendedSecurityBitmask
    779          
    780                  emberAfAppPrintln("%p%pUP 0x%2X", "EMBER_", "NETWORK_", emberAfGetNodeId());
   \   00000078   0x.... 0x....      BL       emberAfGetNodeId
   \   0000007C   0x9000             STR      R0,[SP, #+0]
   \   0000007E   0x464B             MOV      R3,R9
   \   00000080   0x462A             MOV      R2,R5
   \   00000082   0x.... 0x....      ADR.W    R1,?_29
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x.... 0x....      BL       emberAfPrintln
    781                  emberAfAppFlush();
    782          #if defined(EMBER_TEST)
    783                  simulatedTimePasses();
    784          #endif        
    785          
    786                  if (status == EMBER_TRUST_CENTER_EUI_HAS_CHANGED) {
   \   0000008C   0x2CBC             CMP      R4,#+188
   \   0000008E   0xD106             BNE.N    ??emAfStackStatusHandler_5
    787                    emberAfAppPrintln("Trust Center EUI has changed.");
   \   00000090   0x.... 0x....      ADR.W    R1,?_32
   \   00000094   0x.... 0x....      BL       ?Subroutine3
    788                    // We abort registration because we want to clear out any previous
    789                    // state and force it to start anew.  One of two results will occur after
    790                    // we restart registration later.
    791                    // (1) It succeeds and we are on a new network with a new TC, in which
    792                    //     case we need to kick off key establishment to re-authenticate it 
    793                    //     and also re-discover other ESIs.
    794                    // (2) It will fail, in which case we have to reboot to forget the untrusted
    795                    //     network and its settings.
    796                    emberAfRegistrationAbortCallback();
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000098   0x.... 0x....      BL       emberAfRegistrationAbortCallback
   \   0000009C   0xE001             B.N      ??emAfStackStatusHandler_6
    797                  } else {
    798                    emberStartWritingStackTokens();
   \                     ??emAfStackStatusHandler_5: (+1)
   \   0000009E   0x.... 0x....      BL       emberStartWritingStackTokens
    799                  }
    800          
    801                  // This kicks off registration for newly joined devices.  If registration
    802                  // already occurred, nothing will happen here.
    803                  emberAfRegistrationStartCallback();
   \                     ??emAfStackStatusHandler_6: (+1)
   \   000000A2   0x.... 0x....      BL       emberAfRegistrationStartCallback
    804                  break;
   \   000000A6   0xE017             B.N      ??emAfStackStatusHandler_7
    805                }
    806          
    807              case EMBER_RECEIVED_KEY_IN_THE_CLEAR:
    808              case EMBER_NO_NETWORK_KEY_RECEIVED:
    809              case EMBER_NO_LINK_KEY_RECEIVED:
    810              case EMBER_PRECONFIGURED_KEY_REQUIRED:
    811              case EMBER_MOVE_FAILED:
    812              case EMBER_JOIN_FAILED:
    813              case EMBER_NO_BEACONS:
    814              case EMBER_CANNOT_JOIN_AS_ROUTER:
    815              case EMBER_NETWORK_DOWN:
    816                if (status == EMBER_NETWORK_DOWN) {
   \                     ??emAfStackStatusHandler_1: (+1)
   \   000000A8   0x2C91             CMP      R4,#+145
   \   000000AA   0xD104             BNE.N    ??emAfStackStatusHandler_8
    817                  emberAfAppPrintln("%p%pDOWN", "EMBER_", "NETWORK_");
   \   000000AC   0x464B             MOV      R3,R9
   \   000000AE   0x462A             MOV      R2,R5
   \   000000B0   0x.... 0x....      ADR.W    R1,?_33
   \   000000B4   0xE004             B.N      ??emAfStackStatusHandler_9
    818                } else {
    819                emberAfAppPrintln("%pJOIN%p", "EMBER_", "_FAILED");
   \                     ??emAfStackStatusHandler_8: (+1)
   \   000000B6   0x.... 0x....      ADR.W    R3,?_35
   \   000000BA   0x.... 0x....      ADR.W    R1,?_34
   \   000000BE   0x462A             MOV      R2,R5
   \                     ??emAfStackStatusHandler_9: (+1)
   \   000000C0   0x2004             MOVS     R0,#+4
   \   000000C2   0x.... 0x....      BL       emberAfPrintln
    820              }
    821              emberAfAppFlush();
    822              emberAfStackDown();
   \   000000C6   0x.... 0x....      BL       emberAfStackDown
    823              break;
   \   000000CA   0xE005             B.N      ??emAfStackStatusHandler_7
    824          
    825            default:
    826              emberAfDebugPrintln("EVENT: stackStatus 0x%x", status);
   \                     ??emAfStackStatusHandler_2: (+1)
   \   000000CC   0x4622             MOV      R2,R4
   \   000000CE   0x.... 0x....      ADR.W    R1,?_36
   \   000000D2   0x2002             MOVS     R0,#+2
   \   000000D4   0x.... 0x....      BL       emberAfPrintln
    827            }
    828          
    829            emberAfAppFlush();
    830          
    831          #ifdef EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS
    832            EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS
   \                     ??emAfStackStatusHandler_7: (+1)
   \   000000D8   0x4620             MOV      R0,R4
   \   000000DA   0x.... 0x....      BL       emberAfPluginAuroraOtaClientStackStatusCallback
   \   000000DE   0x4620             MOV      R0,R4
   \   000000E0   0x.... 0x....      BL       emberAfPluginConcentratorStackStatusCallback
   \   000000E4   0x4620             MOV      R0,R4
   \   000000E6   0x.... 0x....      BL       emberAfPluginNetworkFindStackStatusCallback
    833          #endif
    834          
    835            if (emberAfStackStatusCallback(status)) {
   \   000000EA   0x4620             MOV      R0,R4
   \   000000EC   0x.... 0x....      BL       emberAfStackStatusCallback
   \   000000F0   0xB118             CBZ.N    R0,??CrossCallReturnLabel_5
    836              // Bug 13690: Even if the callback handled the status, we still want to do
    837              // our things regarding the stack status. Therefore we no longer return
    838              // here. For now we just print a warning message to inform the customer that
    839              // a TRUE value returned by emberAfStackStatusCallback() no longer avoid
    840              // the Stack Status to be handled by our code.
    841              emberAfAppPrintln("The app framework is handling the stack status.");
   \   000000F2   0x.... 0x....      ADR.W    R1,?_37
   \   000000F6   0x.... 0x....      BL       ?Subroutine3
    842            }
    843          }
   \                     ??CrossCallReturnLabel_5: (+1)
   \   000000FA   0xE8BD 0x82F3      POP      {R0,R1,R4-R7,R9,PC}  ;; return
    844          
    845          #ifdef EMBER_AF_USE_STANDARD_NETWORK_INIT
    846            #define networkInit emberNetworkInit
    847          #else
    848          static EmberStatus networkInitExtended(void)
    849            {
    850              EmberNetworkInitStruct networkInitStruct = { 
    851                EMBER_AF_CUSTOM_NETWORK_INIT_OPTIONS   // EmberNetworkInitBitmask value
    852              };
    853              return emberNetworkInitExtended(&networkInitStruct);
    854            }
    855            #define networkInit networkInitExtended
    856          #endif
    857          
    858          // If possible, initialize each network.  For ZigBee PRO networks, the node
    859          // type of the device must match the one used previously, but note that
    860          // coordinator-capable devices are allowed to initialize as routers.

   \                                 In section .text, align 2, keep-with-next
    861          void emAfNetworkInit(void)
    862          {
   \                     emAfNetworkInit: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    863            int8u i;
    864            for (i = 0; i < EMBER_SUPPORTED_NETWORKS; i++) {
   \   00000002   0x....             LDR.N    R4,??DataTable57_5
   \   00000004   0x7865             LDRB     R5,[R4, #+1]
   \   00000006   0xB083             SUB      SP,SP,#+12
    865              boolean initialize = TRUE;
    866              emberAfPushNetworkIndex(i);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       emberAfPushNetworkIndex
    867              emAfClearNetworkCache(i);
    868              if (emAfNetworks[i].type == EM_AF_NETWORK_TYPE_ZIGBEE_PRO) {
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0xB978             CBNZ.N   R0,??emAfNetworkInit_0
    869                EmberNodeType nodeType;
    870                if (emAfNetworks[i].variant.pro.nodeType == EMBER_COORDINATOR) {
   \   00000012   0x2D01             CMP      R5,#+1
   \   00000014   0xBF08             IT       EQ 
    871                  zaTrustCenterSecurityPolicyInit();
   \   00000016   0x.... 0x....      BLEQ     zaTrustCenterSecurityPolicyInit
    872                }
    873                if (emberAfGetNodeType(&nodeType) != EMBER_SUCCESS
    874                    || (nodeType != emAfNetworks[i].variant.pro.nodeType
    875                        && (emAfNetworks[i].variant.pro.nodeType != EMBER_COORDINATOR
    876                            || nodeType != EMBER_ROUTER))) {
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       emberAfGetNodeType
   \   00000020   0xB970             CBNZ.N   R0,??emAfNetworkInit_1
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x42A8             CMP      R0,R5
   \   00000028   0xD003             BEQ.N    ??emAfNetworkInit_0
   \   0000002A   0x2D01             CMP      R5,#+1
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x2802             CMPEQ    R0,#+2
   \   00000030   0xD106             BNE.N    ??emAfNetworkInit_1
    877                  initialize = FALSE;
    878                }
    879              }
    880              if (initialize) {
    881                networkInit();
   \                     ??emAfNetworkInit_0: (+1)
   \   00000032   0x.... 0x....      ADR.W    R0,?_38
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x.... 0x....      BL       emberNetworkInitExtended
    882              }
    883              emberAfPopNetworkIndex();
   \                     ??emAfNetworkInit_1: (+1)
   \   00000040   0x.... 0x....      BL       emberAfPopNetworkIndex
    884            }
    885          }
   \   00000044   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    886          

   \                                 In section .text, align 2, keep-with-next
    887          int8u emberAfCopyBigEndianEui64Argument(int8s index, EmberEUI64 destination)
    888          {
   \                     emberAfCopyBigEndianEui64Argument: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x460C             MOV      R4,R1
    889            EmberEUI64 tmp;
    890            int8u length = emberCopyEui64Argument(index, tmp);
   \   00000006   0x2301             MOVS     R3,#+1
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       emberCopyStringArgument
   \   00000010   0x4605             MOV      R5,R0
    891            emberReverseMemCopy(destination, tmp, EUI64_SIZE);
   \   00000012   0x2208             MOVS     R2,#+8
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0x.... 0x....      BL       emberReverseMemCopy
    892            return length;
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0xBD3E             POP      {R1-R5,PC}       ;; return
    893          }
    894          
    895          // form-and-join library callbacks.

   \                                 In section .text, align 2, keep-with-next
    896          void emberUnusedPanIdFoundHandler(EmberPanId panId, int8u channel)
    897          {
   \                     emberUnusedPanIdFoundHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    898            emberAfPushCallbackNetworkIndex();
   \   00000006   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    899            emberAfUnusedPanIdFoundCallback(panId, channel);
   \   0000000A   0x4629             MOV      R1,R5
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       emberAfUnusedPanIdFoundCallback
    900            emberAfPopNetworkIndex();
   \   00000012   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000016   0x.... 0x....      B.W      emberAfPopNetworkIndex
    901          }
    902          

   \                                 In section .text, align 2, keep-with-next
    903          void emberJoinableNetworkFoundHandler(EmberZigbeeNetwork *networkFound,
    904                                                int8u lqi,
    905                                                int8s rssi)
    906          {
   \                     emberJoinableNetworkFoundHandler: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
    907            emberAfPushCallbackNetworkIndex();
   \   00000008   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    908            emberAfJoinableNetworkFoundCallback(networkFound, lqi, rssi);
   \   0000000C   0x4632             MOV      R2,R6
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       emberAfJoinableNetworkFoundCallback
    909            emberAfPopNetworkIndex();
   \   00000016   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000001A   0x.... 0x....      B.W      emberAfPopNetworkIndex
    910          }
    911          

   \                                 In section .text, align 2, keep-with-next
    912          void emberScanErrorHandler(EmberStatus status)
    913          {
   \                     emberScanErrorHandler: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    914            emberAfPushCallbackNetworkIndex();
   \   00000004   0x.... 0x....      BL       emberAfPushCallbackNetworkIndex
    915            emberAfScanErrorCallback(status);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       emberAfScanErrorCallback
    916            emberAfPopNetworkIndex();
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      emberAfPopNetworkIndex
    917          }
    918          

   \                                 In section .text, align 2, keep-with-next
    919          EmberStatus emberAfFormNetwork(EmberNetworkParameters *parameters)
    920          {
    921            EmberStatus status = EMBER_INVALID_CALL;
    922          #ifdef EMBER_AF_HAS_COORDINATOR_NETWORK
    923            if (emAfCurrentNetwork->type == EM_AF_NETWORK_TYPE_ZIGBEE_PRO
    924                && emAfCurrentNetwork->variant.pro.nodeType == EMBER_COORDINATOR) {
   \                     emberAfFormNetwork: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable57_6
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xB082             SUB      SP,SP,#+8
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x780A             LDRB     R2,[R1, #+0]
   \   0000000C   0x2070             MOVS     R0,#+112
   \   0000000E   0x2A00             CMP      R2,#+0
   \   00000010   0xBF04             ITT      EQ 
   \   00000012   0x7849             LDRBEQ   R1,[R1, #+1]
   \   00000014   0x2901             CMPEQ    R1,#+1
   \   00000016   0xD10B             BNE.N    ??emberAfFormNetwork_0
    925              zaTrustCenterSecurityInit();
   \   00000018   0x.... 0x....      BL       zaTrustCenterSecurityInit
    926              emberAfCorePrintln("%ping on ch %d, panId 0x%2X",
    927                                 "Form", 
    928                                 parameters->radioChannel,
    929                                 parameters->panId);
   \   0000001C   0x8920             LDRH     R0,[R4, #+8]
   \   0000001E   0x.... 0x....      ADR.W    R2,?_40
   \   00000022   0x.... 0x....      BL       ?Subroutine1
    930              emberAfCoreFlush();
    931              status = emberFormNetwork(parameters);
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   0000002C   0x.... 0x....      B.W      emberFormNetwork
    932            }
    933          #endif
    934            return status;
   \                     ??emberAfFormNetwork_0: (+1)
   \   00000030   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    935          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x.... 0x....      ADR.W    R1,?_39
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x7AE3             LDRB     R3,[R4, #+11]
   \   0000000A   0x.... 0x....      B.W      emberAfPrintln
    936          

   \                                 In section .text, align 2, keep-with-next
    937          EmberStatus emberAfJoinNetwork(EmberNetworkParameters *parameters)
    938          {
   \                     emberAfJoinNetwork: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    939            EmberStatus status = EMBER_INVALID_CALL;
    940            if (emAfCurrentNetwork->type == EM_AF_NETWORK_TYPE_ZIGBEE_PRO) {
   \   00000002   0x....             LDR.N    R1,??DataTable57_6
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x780A             LDRB     R2,[R1, #+0]
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0x2070             MOVS     R0,#+112
   \   0000000C   0xB982             CBNZ.N   R2,??emberAfJoinNetwork_0
    941              EmberNodeType nodeType = emAfCurrentNetwork->variant.pro.nodeType;
   \   0000000E   0x784D             LDRB     R5,[R1, #+1]
    942              if (nodeType == EMBER_COORDINATOR) {
   \   00000010   0x2D01             CMP      R5,#+1
   \   00000012   0xBF08             IT       EQ 
   \   00000014   0x2502             MOVEQ    R5,#+2
    943                nodeType = EMBER_ROUTER;
    944              }
    945              zaNodeSecurityInit();
   \   00000016   0x.... 0x....      BL       zaNodeSecurityInit
    946              emberAfCorePrintln("%ping on ch %d, panId 0x%2X",
    947                                 "Join", 
    948                                 parameters->radioChannel,
    949                                 parameters->panId);
   \   0000001A   0x8920             LDRH     R0,[R4, #+8]
   \   0000001C   0x.... 0x....      ADR.W    R2,?_41
   \   00000020   0x.... 0x....      BL       ?Subroutine1
    950              status = emberJoinNetwork(nodeType, parameters);
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000024   0x4621             MOV      R1,R4
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000002C   0x.... 0x....      B.W      emberJoinNetwork
    951            }
    952            return status;
   \                     ??emberAfJoinNetwork_0: (+1)
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    953          }
    954          
    955          // mfgString is expected to be +1 of MFG_STRING_MAX_LENGTH

   \                                 In section .text, align 2, keep-with-next
    956          void emberAfFormatMfgString(int8u* mfgString)
    957          {
   \                     emberAfFormatMfgString: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    958            int8u i;
    959            emberAfGetMfgString(mfgString);
   \   00000004   0x.... 0x....      BL       emberAfGetMfgString
    960          
    961            for (i = 0; i < MFG_STRING_MAX_LENGTH; i++) {
   \   00000008   0x2000             MOVS     R0,#+0
    962              // The MFG string is not necessarily NULL terminated.
    963              // Uninitialized bytes are left at 0xFF so we make sure
    964              // it is NULL terminated.
    965              if (mfgString[i] == 0xFF) {
   \                     ??emberAfFormatMfgString_0: (+1)
   \   0000000A   0x5D01             LDRB     R1,[R0, R4]
   \   0000000C   0x29FF             CMP      R1,#+255
   \   0000000E   0xBF04             ITT      EQ 
   \   00000010   0x2100             MOVEQ    R1,#+0
   \   00000012   0x5501             STRBEQ   R1,[R0, R4]
    966                mfgString[i] = '\0';
    967              }
    968            }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2810             CMP      R0,#+16
   \   00000018   0xDBF7             BLT.N    ??emberAfFormatMfgString_0
    969            mfgString[MFG_STRING_MAX_LENGTH] = '\0';
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7420             STRB     R0,[R4, #+16]
    970          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
    971          

   \                                 In section .text, align 4, keep-with-next
    972          static PGM EmberReleaseTypeStruct releaseTypes[] = {
   \                     releaseTypes:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 ?_0
   \   00000008   0x11 0x00          DC8 17, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 ?_1
   \   00000010   0x12 0x00          DC8 18, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 ?_2
   \   00000018   0x13 0x00          DC8 19, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 ?_3
   \   00000020   0x21 0x00          DC8 33, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 ?_4
   \   00000028   0x22 0x00          DC8 34, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 ?_5
   \   00000030   0x23 0x00          DC8 35, 0, 0, 0
   \              0x00 0x00    
   \   00000034   0x........         DC32 ?_6
   \   00000038   0xAA 0x00          DC8 170, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x........         DC32 ?_7
   \   00000040   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0H
    973            EMBER_RELEASE_TYPE_TO_STRING_STRUCT_DATA
    974          };
    975          

   \                                 In section .text, align 2, keep-with-next
    976          void emAfParseAndPrintVersion(EmberVersion versionStruct)
    977          {
   \                     emAfParseAndPrintVersion: (+1)
   \   00000000   0xB533             PUSH     {R0,R1,R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    978            int8u i = 0;
   \   00000004   0x2000             MOVS     R0,#+0
    979            PGM_P typeText = NULL;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x.... 0x....      ADR.W    R1,releaseTypes
   \   0000000C   0xE008             B.N      ??emAfParseAndPrintVersion_0
    980            while (releaseTypes[i].typeString != NULL) {
    981              if (releaseTypes[i].typeNum == versionStruct.type) {
   \                     ??emAfParseAndPrintVersion_1: (+1)
   \   0000000E   0xF811 0x3030      LDRB     R3,[R1, R0, LSL #+3]
   \   00000012   0xF89D 0x500A      LDRB     R5,[SP, #+10]
   \   00000016   0x42AB             CMP      R3,R5
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x6854             LDREQ    R4,[R2, #+4]
    982                typeText = releaseTypes[i].typeString;
    983              }
    984              i++;
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0xB2C0             UXTB     R0,R0
    985            }
   \                     ??emAfParseAndPrintVersion_0: (+1)
   \   00000020   0xEB01 0x02C0      ADD      R2,R1,R0, LSL #+3
   \   00000024   0x6853             LDR      R3,[R2, #+4]
   \   00000026   0x2B00             CMP      R3,#+0
   \   00000028   0xD1F1             BNE.N    ??emAfParseAndPrintVersion_1
    986            emberAfAppPrint("stack ver. [%d.%d.%d",
    987                            versionStruct.major,
    988                            versionStruct.minor,
    989                            versionStruct.patch);
   \   0000002A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000002E   0xF89D 0x3007      LDRB     R3,[SP, #+7]
   \   00000032   0xF89D 0x2006      LDRB     R2,[SP, #+6]
   \   00000036   0x.... 0x....      ADR.W    R1,?_42
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x2004             MOVS     R0,#+4
   \   0000003E   0x.... 0x....      BL       emberAfPrint
    990            if (versionStruct.special != 0) {
   \   00000042   0xF89D 0x2009      LDRB     R2,[SP, #+9]
   \   00000046   0xB11A             CBZ.N    R2,??emAfParseAndPrintVersion_2
    991              emberAfAppPrint(".%d",
    992                              versionStruct.special);
   \   00000048   0x....             ADR.N    R1,??DataTable57  ;; ".%d"
   \   0000004A   0x2004             MOVS     R0,#+4
   \   0000004C   0x.... 0x....      BL       emberAfPrint
    993            }
    994            emberAfAppPrintln(" %p build %d]", 
    995                              (typeText == NULL
    996                               ? "???"
    997                               : typeText),
    998                              versionStruct.build);
   \                     ??emAfParseAndPrintVersion_2: (+1)
   \   00000050   0xB904             CBNZ.N   R4,??emAfParseAndPrintVersion_3
   \   00000052   0x....             ADR.N    R4,??DataTable57_1  ;; "\?\?\?"
   \                     ??emAfParseAndPrintVersion_3: (+1)
   \   00000054   0xF8BD 0x3004      LDRH     R3,[SP, #+4]
   \   00000058   0x4622             MOV      R2,R4
   \   0000005A   0xB003             ADD      SP,SP,#+12
   \   0000005C   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000060   0x.... 0x....      ADR.W    R1,?_44
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x.... 0x....      B.W      emberAfPrintln
    999            emberAfAppFlush();
   1000          }
   1001          
   1002          //hal button isr

   \                                 In section .text, align 2, keep-with-next
   1003          void halButtonIsr(int8u button, int8u state) {
   1004            #ifdef EMBER_CALLBACK_HAL_BUTTON_ISR
   1005            emberAfHalButtonIsrCallback(button, state);
   1006            #endif
   1007          }
   \                     halButtonIsr: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable53:
   \   00000000   0x5D 0x00          DC8      "]",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56:
   \   00000000   0x5A 0x44          DC8      "ZDO"
   \              0x4F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_1:
   \   00000000   0x53 0x45          DC8      0x53, 0x45, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_2:
   \   00000000   0x48 0x41          DC8      0x48, 0x41, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_3:
   \   00000000   0x3F 0x3F          DC8      0x3F, 0x3F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable56_4:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57:
   \   00000000   0x2E 0x25          DC8      ".%d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_1:
   \   00000000   0x3F 0x3F          DC8      "\?\?\?"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_2:
   \   00000000   0x........         DC32     messageSentCallbacks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_3:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_4:
   \   00000000   0x........         DC32     emberAfPrintActiveArea

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_5:
   \   00000000   0x........         DC32     emAfNetworks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable57_6:
   \   00000000   0x........         DC32     emAfCurrentNetwork

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x20 0x70          DC8 " payload (len %2x) ["
   \              0x61 0x79    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x28    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x25 0x32    
   \              0x78 0x29    
   \              0x20 0x5B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x25 0x70          DC8 "%p: %p"
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x50 0x72          DC8 "Pre-Release"
   \              0x65 0x2D    
   \              0x52 0x65    
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x41 0x6C          DC8 "Alpha 1"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x31 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x41 0x6C          DC8 "Alpha 2"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x41 0x6C          DC8 "Alpha 3"
   \              0x70 0x68    
   \              0x61 0x20    
   \              0x33 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x42 0x65          DC8 "Beta 1"
   \              0x74 0x61    
   \              0x20 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x42 0x65          DC8 "Beta 2"
   \              0x74 0x61    
   \              0x20 0x32    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x42 0x65          DC8 "Beta 3"
   \              0x74 0x61    
   \              0x20 0x33    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x47 0x41          DC8 "GA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_11:
   \   00000000   0x53 0x75          DC8 "Success"
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_12:
   \   00000000   0x25 0x70          DC8 "%p: %p: 0x%x"
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_13:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_15:
   \   00000000   0x4C 0x69          DC8 4CH, 69H, 6DH, 69H, 74H, 69H, 6EH, 67H
   \              0x6D 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \   00000008   0x20 0x64          DC8 20H, 64H, 75H, 72H, 61H, 74H, 69H, 6FH
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \   00000010   0x6E 0x20          DC8 6EH, 20H, 6FH, 66H, 20H, 70H, 65H, 72H
   \              0x6F 0x66    
   \              0x20 0x70    
   \              0x65 0x72    
   \   00000018   0x6D 0x69          DC8 6DH, 69H, 74H, 20H, 6AH, 6FH, 69H, 6EH
   \              0x74 0x20    
   \              0x6A 0x6F    
   \              0x69 0x6E    
   \   00000020   0x20 0x66          DC8 20H, 66H, 72H, 6FH, 6DH, 20H, 66H, 6FH
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x66 0x6F    
   \   00000028   0x72 0x65          DC8 72H, 65H, 76H, 65H, 72H, 20H, 28H, 32H
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x28 0x32    
   \   00000030   0x35 0x35          DC8 35H, 35H, 29H, 20H, 74H, 6FH, 20H, 32H
   \              0x29 0x20    
   \              0x74 0x6F    
   \              0x20 0x32    
   \   00000038   0x35 0x34          DC8 35H, 34H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_9:
   \   00000000   0x5D 0x00          DC8 "]"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_16:
   \   00000000   0x70 0x4A          DC8 "pJoin for %d sec: 0x%x"
   \              0x6F 0x69    
   \              0x6E 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x73    
   \              0x65 0x63    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_17:
   \   00000000   0x50 0x72          DC8 50H, 72H, 6FH, 63H, 65H, 73H, 73H, 69H
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x69    
   \   00000008   0x6E 0x67          DC8 6EH, 67H, 20H, 6DH, 65H, 73H, 73H, 61H
   \              0x20 0x6D    
   \              0x65 0x73    
   \              0x73 0x61    
   \   00000010   0x67 0x65          DC8 67H, 65H, 3AH, 20H, 6CH, 65H, 6EH, 3DH
   \              0x3A 0x20    
   \              0x6C 0x65    
   \              0x6E 0x3D    
   \   00000018   0x25 0x64          DC8 25H, 64H, 20H, 70H, 72H, 6FH, 66H, 69H
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x66 0x69    
   \   00000020   0x6C 0x65          DC8 6CH, 65H, 3DH, 25H, 32H, 78H, 20H, 63H
   \              0x3D 0x25    
   \              0x32 0x78    
   \              0x20 0x63    
   \   00000028   0x6C 0x75          DC8 6CH, 75H, 73H, 74H, 65H, 72H, 3DH, 25H
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x3D 0x25    
   \   00000030   0x32 0x78          DC8 32H, 78H, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_18:
   \   00000000   0x50 0x72          DC8 "Profile: %p (0x%2X), Cluster: 0x%2X, %d bytes,"
   \              0x6F 0x66    
   \              0x69 0x6C    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x28 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x29 0x2C    
   \              0x20 0x43    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x2C    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x2C    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_23:
   \   00000000   0x20 0x5A          DC8 " ZCL %p Cmd ID: %d"
   \              0x43 0x4C    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x43 0x6D    
   \              0x64 0x20    
   \              0x49 0x44    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_24:
   \   00000000   0x43 0x6C          DC8 "Cluster"
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_25:
   \   00000000   0x47 0x6C          DC8 "Global"
   \              0x6F 0x62    
   \              0x61 0x6C    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_27:
   \   00000000   0x25 0x70          DC8 "%ptx %x, "
   \              0x74 0x78    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_28:
   \   00000000   0x45 0x52          DC8 "ERROR: "
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_29:
   \   00000000   0x25 0x70          DC8 "%p%pUP 0x%2X"
   \              0x25 0x70    
   \              0x55 0x50    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x32 0x58    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_30:
   \   00000000   0x45 0x4D          DC8 "EMBER_"
   \              0x42 0x45    
   \              0x52 0x5F    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_31:
   \   00000000   0x4E 0x45          DC8 "NETWORK_"
   \              0x54 0x57    
   \              0x4F 0x52    
   \              0x4B 0x5F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_32:
   \   00000000   0x54 0x72          DC8 "Trust Center EUI has changed."
   \              0x75 0x73    
   \              0x74 0x20    
   \              0x43 0x65    
   \              0x6E 0x74    
   \              0x65 0x72    
   \              0x20 0x45    
   \              0x55 0x49    
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x63    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x64    
   \              0x2E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_33:
   \   00000000   0x25 0x70          DC8 "%p%pDOWN"
   \              0x25 0x70    
   \              0x44 0x4F    
   \              0x57 0x4E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_34:
   \   00000000   0x25 0x70          DC8 "%pJOIN%p"
   \              0x4A 0x4F    
   \              0x49 0x4E    
   \              0x25 0x70    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_35:
   \   00000000   0x5F 0x46          DC8 "_FAILED"
   \              0x41 0x49    
   \              0x4C 0x45    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_36:
   \   00000000   0x45 0x56          DC8 "EVENT: stackStatus 0x%x"
   \              0x45 0x4E    
   \              0x54 0x3A    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x63 0x6B    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_37:
   \   00000000   0x54 0x68          DC8 "The app framework is handling the stack status."
   \              0x65 0x20    
   \              0x61 0x70    
   \              0x70 0x20    
   \              0x66 0x72    
   \              0x61 0x6D    
   \              0x65 0x77    
   \              0x6F 0x72    
   \              0x6B 0x20    
   \              0x69 0x73    
   \              0x20 0x68    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x2E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_19:
   \   00000000   0x5A 0x44          DC8 "ZDO"
   \              0x4F 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_20:
   \   00000000   0x53 0x45          DC8 "SE"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_21:
   \   00000000   0x48 0x41          DC8 "HA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_22:
   \   00000000   0x3F 0x3F          DC8 "??"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 1, keep-with-next
   \                     ?_26:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_43:
   \   00000000   0x2E 0x25          DC8 ".%d"
   \              0x64 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_45:
   \   00000000   0x3F 0x3F          DC8 "???"
   \              0x3F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_38:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_39:
   \   00000000   0x25 0x70          DC8 "%ping on ch %d, panId 0x%2X"
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6F 0x6E    
   \              0x20 0x63    
   \              0x68 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x70 0x61    
   \              0x6E 0x49    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_40:
   \   00000000   0x46 0x6F          DC8 "Form"
   \              0x72 0x6D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_41:
   \   00000000   0x4A 0x6F          DC8 "Join"
   \              0x69 0x6E    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_42:
   \   00000000   0x73 0x74          DC8 "stack ver. [%d.%d.%d"
   \              0x61 0x63    
   \              0x6B 0x20    
   \              0x76 0x65    
   \              0x72 0x2E    
   \              0x20 0x5B    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_44:
   \   00000000   0x20 0x25          DC8 " %p build %d]"
   \              0x70 0x20    
   \              0x62 0x75    
   \              0x69 0x6C    
   \              0x64 0x20    
   \              0x25 0x64    
   \              0x5D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0
   1008          
   1009          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      64   emAfIncomingMessageHandler
        64   -> emAfProcessZdo
        64   -> emAfServiceDiscoveryIncoming
        64   -> emberAfGetAddressIndex
        64   -> emberAfGetBindingIndex
        64   -> emberAfPreMessageReceivedCallback
        64   -> emberAfPrintln
        64   -> emberAfProcessMessage
        64   -> emberGetCurrentNetwork
        64   -> emberGetSender
       0   emAfInitializeMessageSentCallbackArray
      40   emAfMessageSentHandler
        40   -- Indirect call
        40   -> emberAfAddToCurrentAppTasksCallback
        40   -> emberAfClusterMessageSentCallback
        40   -> emberAfDeliveryStatusCallback
        40   -> emberAfMessageSentCallback
        40   -> emberAfPluginConcentratorMessageSentCallback
        40   -> emberAfPrint
        40   -> emberAfPrintln
        40   -> emberAfRemoveFromCurrentAppTasksCallback
      24   emAfNetworkInit
        24   -> emberAfGetNodeType
        24   -> emberAfPopNetworkIndex
        24   -> emberAfPushNetworkIndex
        24   -> emberNetworkInitExtended
        24   -> zaTrustCenterSecurityPolicyInit
      24   emAfParseAndPrintVersion
        24   -> emberAfPrint
         0   -> emberAfPrintln
      24   emAfPermitJoin
        24   -> emberAfPrintln
        24   -> emberPermitJoining
        24   -> emberSendZigDevRequest
       8   emAfPrintStatus
         8   -> emberAfPrint
      16   emAfProcessZdo
        16   -> emberAfPartnerLinkKeyExchangeResponseCallback
        16   -> emberAfPreZDOMessageReceivedCallback
        16   -> emberAfRemoveFromCurrentAppTasksCallback
      32   emAfStackStatusHandler
        32   -> emAfGetCurrentSecurityProfileData
        32   -> emberAfGetNodeId
        32   -> emberAfPluginAuroraOtaClientStackStatusCallback
        32   -> emberAfPluginConcentratorStackStatusCallback
        32   -> emberAfPluginNetworkFindStackStatusCallback
        32   -> emberAfPrintln
        32   -> emberAfRegistrationAbortCallback
        32   -> emberAfRegistrationStartCallback
        32   -> emberAfSecurityInitCallback
        32   -> emberAfStackDown
        32   -> emberAfStackStatusCallback
        32   -> emberGetExtendedSecurityBitmask
        32   -> emberSetExtendedSecurityBitmask
        32   -> emberStartWritingStackTokens
      24   emberAfCopyBigEndianEui64Argument
        24   -> emberCopyStringArgument
        24   -> emberReverseMemCopy
      16   emberAfFormNetwork
        16   -> emberAfPrintln
        16   -> zaTrustCenterSecurityInit
       8   emberAfFormatMfgString
         8   -> emberAfGetMfgString
       0   emberAfIsFullSmartEnergySecurityPresent
      16   emberAfJoinNetwork
        16   -> emberAfPrintln
        16   -> zaNodeSecurityInit
       8   emberAfPermitJoin
         0   -> emAfPermitJoin
         8   -> emberAfPrintln
      16   emberAfPrintMessageData
        16   -> emberAfPrint
        16   -> emberAfPrintBuffer
         0   -> emberAfPrintln
      16   emberAfSendBroadcast
        16   -> emberAfSendBroadcastWithCallback
      24   emberAfSendBroadcastWithCallback
        24   -> send
      48   emberAfSendInterPan
        48   -> emberAfInterpanSendMessageCallback
        48   -> halCommonMemCopy
        48   -> halCommonMemSet
      16   emberAfSendMulticast
        16   -> emberAfSendMulticastWithCallback
      24   emberAfSendMulticastWithCallback
        24   -> send
      16   emberAfSendUnicast
        16   -> emberAfSendUnicastWithCallback
       0   emberAfSendUnicastToBindings
         0   -> emberAfSendUnicastToBindingsWithCallback
      56   emberAfSendUnicastToBindingsWithCallback
        56   -> emberGetBinding
        56   -> send
      40   emberAfSendUnicastWithCallback
        40   -> emberGetBinding
        40   -> send
      16   emberJoinableNetworkFoundHandler
        16   -> emberAfJoinableNetworkFoundCallback
         0   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
       8   emberScanErrorHandler
         0   -> emberAfPopNetworkIndex
         8   -> emberAfPushCallbackNetworkIndex
         8   -> emberAfScanErrorCallback
      16   emberUnusedPanIdFoundHandler
         0   -> emberAfPopNetworkIndex
        16   -> emberAfPushCallbackNetworkIndex
        16   -> emberAfUnusedPanIdFoundCallback
       0   halButtonIsr
      56   send
        56   -> emAfSend
        56   -> emAfSetCryptoStatus
        56   -> emberAfAddToCurrentAppTasksCallback
        56   -> emberAfDetermineIfLinkSecurityIsRequired
        56   -> emberAfIndexFromEndpoint
        56   -> emberAfMaximumApsPayloadLength
        56   -> emberAfPopNetworkIndex
        56   -> emberAfPushEndpointNetworkIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable53
       4  ??DataTable56
       4  ??DataTable56_1
       4  ??DataTable56_2
       4  ??DataTable56_3
       4  ??DataTable56_4
       4  ??DataTable57
       4  ??DataTable57_1
       4  ??DataTable57_2
       4  ??DataTable57_3
       4  ??DataTable57_4
       4  ??DataTable57_5
       4  ??DataTable57_6
       8  ?Subroutine0
      14  ?Subroutine1
      14  ?Subroutine2
       6  ?Subroutine3
      12  ?_0
       8  ?_1
       8  ?_10
       8  ?_11
      16  ?_12
       8  ?_13
       4  ?_14
      60  ?_15
      24  ?_16
      52  ?_17
      48  ?_18
       4  ?_19
       8  ?_2
       4  ?_20
       4  ?_21
       4  ?_22
      20  ?_23
       8  ?_24
       8  ?_25
       1  ?_26
      12  ?_27
       8  ?_28
      16  ?_29
       8  ?_3
       8  ?_30
      12  ?_31
      32  ?_32
      12  ?_33
      12  ?_34
       8  ?_35
      24  ?_36
      48  ?_37
       4  ?_38
      28  ?_39
       8  ?_4
       8  ?_40
       8  ?_41
      24  ?_42
       4  ?_43
      16  ?_44
       4  ?_45
       8  ?_5
       8  ?_6
       4  ?_7
      24  ?_8
       2  ?_9
     148  emAfIncomingMessageHandler
      28  emAfInitializeMessageSentCallbackArray
     282  emAfMessageSentHandler
      70  emAfNetworkInit
     106  emAfParseAndPrintVersion
      64  emAfPermitJoin
      44  emAfPrintStatus
      62  emAfProcessZdo
     254  emAfStackStatusHandler
      32  emberAfCopyBigEndianEui64Argument
      50  emberAfFormNetwork
      32  emberAfFormatMfgString
      16  emberAfInvalidImageId
       4  emberAfIsFullSmartEnergySecurityPresent
      50  emberAfJoinNetwork
       8  emberAfNullEui64
      24  emberAfPermitJoin
      42  emberAfPrintMessageData
       1  emberAfPrintReceivedMessages
      14  emberAfSendBroadcast
      22  emberAfSendBroadcastWithCallback
     112  emberAfSendInterPan
      14  emberAfSendMulticast
      26  emberAfSendMulticastWithCallback
      16  emberAfSendUnicast
       4  emberAfSendUnicastToBindings
     110  emberAfSendUnicastToBindingsWithCallback
      66  emberAfSendUnicastWithCallback
      30  emberJoinableNetworkFoundHandler
      22  emberScanErrorHandler
      26  emberUnusedPanIdFoundHandler
       2  halButtonIsr
      24  messageSentCallbacks
      72  releaseTypes
     270  send

 
    24 bytes in section .bss
     1 byte  in section .data
   119 bytes in section .rodata
 2 756 bytes in section .text
 
 2 756 bytes of CODE  memory
   119 bytes of CONST memory
    25 bytes of DATA  memory

Errors: none
Warnings: none
