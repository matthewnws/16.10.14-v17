###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     11/Mar/2015  10:00:17 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\color-control\color-control.c #
#    Command line =  C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\color-control\color-control.c #
#                     -D "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/ #
#                    Aurora_dimmer_tokens.h\"" -D                             #
#                    "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_ #
#                    dimmer.h\"" -D APP_BTL -D "BOARD_HEADER=\"app/builder/Au #
#                    rora_dimmer/Aurora_dimmer_board.h\"" -D                  #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357    #
#                    -D PHY_EM3XX -D "APPLICATION_TOKEN_HEADER=\"app/framewor #
#                    k/util/tokens.h\"" -D "CONFIGURATION_HEADER=\"app/framew #
#                    ork/util/config.h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION #
#                    =\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_conf #
#                    ig.h\"" -D "__SOURCEFILE__=\"color-control.c\"" -lC      #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --diag_suppress Pa050 -o      #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --debug --endian=little       #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\color-control\ -I             #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\ -I                      #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\ -I             #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\i #
#                    nclude\ -I C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZN #
#                    et5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\ -I  #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\stack\ -I       #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\ -I         #
#                    C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\..\ -Ohz    #
#                    --use_c++_inline                                         #
#    List file    =  C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\color-control.lst              #
#    Object file  =  C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\color-control.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Work\SVN\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\em35x\app\framework\plugin\color-control\color-control.c
      1          // *******************************************************************
      2          // * color-control.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "app/framework/include/af.h"
      9          #include "app/framework/util/attribute-storage.h"
     10          
     11          typedef struct {
     12            boolean active;
     13            int8u commandId;
     14            boolean hueMoveDirection; // TRUE for up
     15            boolean satMoveDirection; // TRUE for up
     16            boolean acceleratedHue; // Used for HueAndSat; true if Hue move > Sat move
     17            int8u acceleratedMoveRate;
     18            int8u hueMoveToLevel;
     19            int8u saturationMoveToLevel;
     20            int32u eventDuration; // All time fields in milliseconds
     21            int32u elapsedTime;
     22            int32u transitionTime;
     23          } ColorControlState;
     24          

   \                                 In section .bss, align 4
     25          static ColorControlState stateTable[EMBER_AF_COLOR_CONTROL_CLUSTER_SERVER_ENDPOINT_COUNT];
   \                     stateTable:
   \   00000000                      DS8 20
     26          
     27          static ColorControlState *getColorControlState(int8u endpoint);
     28          
     29          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
     30          static void colorControlClearRemainingTime(int8u endpoint);
     31          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
     32          
     33          static void colorControlSetHue(int8u endpoint, int8u hue);
     34          static void colorControlSetSaturation(int8u endpoint, int8u saturation);
     35          static void colorControlSetColorModeToZero(void);
     36          static EmberAfStatus colorControlReadCurrentHue(int8u endpoint, int8u* hue);
     37          static EmberAfStatus colorControlReadCurrentSaturation(int8u endpoint,
     38                                                                 int8u* saturation);
     39          static boolean colorControlHueAndSaturationHandler(int8u endpoint);
     40          

   \                                 In section .text, align 2, keep-with-next
     41          static ColorControlState *getColorControlState(int8u endpoint)
     42          {
   \                     getColorControlState:
   \   00000000   0xB580             PUSH     {R7,LR}
     43            int8u index = emberAfFindClusterServerEndpointIndex(endpoint, ZCL_COLOR_CONTROL_CLUSTER_ID);
   \   00000002   0xF44F 0x7140      MOV      R1,#+768
   \   00000006   0x.... 0x....      BL       emberAfFindClusterServerEndpointIndex
     44            return (index == 0xFF ? NULL : &stateTable[index]);
   \   0000000A   0x28FF             CMP      R0,#+255
   \   0000000C   0xD101             BNE.N    ??getColorControlState_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}
   \                     ??getColorControlState_0:
   \   00000012   0x2114             MOVS     R1,#+20
   \   00000014   0x.... 0x....      LDR.W    R2,??DataTable19
   \   00000018   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000001C   0xBD02             POP      {R1,PC}          ;; return
     45          }
     46          

   \                                 In section .text, align 2, keep-with-next
     47          void emberAfColorControlClusterServerInitCallback(int8u endpoint)
     48          {
   \                     emberAfColorControlClusterServerInitCallback:
   \   00000000   0xB580             PUSH     {R7,LR}
     49            ColorControlState *state = getColorControlState(endpoint);
   \   00000002   0x.... 0x....      BL       getColorControlState
     50            if (state == NULL) {
   \   00000006   0xB108             CBZ.N    R0,??emberAfColorControlClusterServerInitCallback_0
     51              return;
     52            }
     53          
     54            state->active = FALSE;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7001             STRB     R1,[R0, #+0]
     55          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
     56            colorControlClearRemainingTime(endpoint);
     57          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
     58          }
   \                     ??emberAfColorControlClusterServerInitCallback_0:
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void emberAfColorControlClusterServerTickCallback(int8u endpoint)
     61          {
   \                     emberAfColorControlClusterServerTickCallback:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
     62            ColorControlState *state = getColorControlState(endpoint);
   \   00000004   0x.... 0x....      BL       getColorControlState
   \   00000008   0x0005             MOVS     R5,R0
     63            EmberAfStatus status;
     64            int8u hue, sat;
     65            boolean hueUp = state->hueMoveDirection;
   \   0000000A   0x78AE             LDRB     R6,[R5, #+2]
     66            boolean satUp = state->satMoveDirection;
   \   0000000C   0x78EF             LDRB     R7,[R5, #+3]
     67          
     68            if (state == NULL) 
   \   0000000E   0xD028             BEQ.N    ??emberAfColorControlClusterServerTickCallback_0
     69            {
     70              return;
     71            }
     72          
     73            status = colorControlReadCurrentHue(endpoint, &hue);
   \   00000010   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       colorControlReadCurrentHue
     74            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000001A   0xB118             CBZ.N    R0,??emberAfColorControlClusterServerTickCallback_1
     75            {
     76              emberAfColorControlClusterPrintln("ERR: could not read current hue %x", status);
   \   0000001C   0x4602             MOV      R2,R0
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: could not read c...">`
   \   00000022   0xE007             B.N      ??emberAfColorControlClusterServerTickCallback_2
     77              return;
     78            }
     79            status = colorControlReadCurrentSaturation(endpoint, &sat);
   \                     ??emberAfColorControlClusterServerTickCallback_1:
   \   00000024   0xA900             ADD      R1,SP,#+0
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       colorControlReadCurrentSaturation
     80            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000002C   0xB128             CBZ.N    R0,??emberAfColorControlClusterServerTickCallback_3
     81            {
     82              emberAfColorControlClusterPrintln("ERR: could not read current saturation %x", status);
   \   0000002E   0x4602             MOV      R2,R0
   \   00000030   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: could not read c...">_1`
   \                     ??emberAfColorControlClusterServerTickCallback_2:
   \   00000034   0x.... 0x....      BL       ?Subroutine9
     83              return;
   \                     ??CrossCallReturnLabel_16:
   \   00000038   0xBDF1             POP      {R0,R4-R7,PC}
     84            }
     85          
     86            switch(state->commandId) 
   \                     ??emberAfColorControlClusterServerTickCallback_3:
   \   0000003A   0x7868             LDRB     R0,[R5, #+1]
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD911             BLS.N    ??emberAfColorControlClusterServerTickCallback_4
   \   00000040   0x1EC0             SUBS     R0,R0,#+3
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xD92D             BLS.N    ??emberAfColorControlClusterServerTickCallback_5
   \   00000046   0x1EC0             SUBS     R0,R0,#+3
   \   00000048   0xD14F             BNE.N    ??emberAfColorControlClusterServerTickCallback_6
     87            {
     88              case ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID:
     89                state->active = colorControlHueAndSaturationHandler(endpoint);
   \   0000004A   0x4620             MOV      R0,R4
   \   0000004C   0x.... 0x....      BL       colorControlHueAndSaturationHandler
   \                     ??emberAfColorControlClusterServerTickCallback_7:
   \   00000050   0x7028             STRB     R0,[R5, #+0]
     90                break;
     91            
     92              case ZCL_STEP_HUE_COMMAND_ID:
     93              case ZCL_MOVE_TO_HUE_COMMAND_ID:
     94              case ZCL_MOVE_HUE_COMMAND_ID:
     95                hue = hueUp ? hue + 1 : hue - 1;
     96                if (hue == 0xFF) {
     97                  hue = hueUp ? 0x00 : 0xFE;
     98                }
     99                colorControlSetHue(endpoint, hue);
    100                if (state->commandId != ZCL_MOVE_HUE_COMMAND_ID) 
    101                {
    102                  state->active = (hue != state->hueMoveToLevel);
    103                }
    104                break;
    105                
    106              case ZCL_STEP_SATURATION_COMMAND_ID:
    107              case ZCL_MOVE_TO_SATURATION_COMMAND_ID:
    108              case ZCL_MOVE_SATURATION_COMMAND_ID:
    109                sat = satUp ? sat + 1 : sat - 1;
    110                if (sat == 0xFF) 
    111                {
    112                  sat = satUp ? 0xFE : 0x00;
    113                }
    114                colorControlSetSaturation(endpoint, sat);
    115                if (state->commandId != ZCL_MOVE_SATURATION_COMMAND_ID) 
    116                {
    117                  state->active = (sat != state->saturationMoveToLevel
    118                                   || sat == 0x00
    119                                   || sat == 0xFE);
    120                }
    121                break;
    122                
    123              default:
    124                emberAfColorControlClusterPrintln("ERR: unknown color control command.");
    125                return;
    126            }
    127          
    128          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    129            {
    130              int16u remainingTime;
    131          
    132              state->elapsedTime = (state->active 
    133                                    ? state->elapsedTime + state->eventDuration
    134                                    : state->transitionTime); 
    135          
    136              // If we're done, we should clear the remaining time
    137              if (state->elapsedTime == state->transitionTime) 
    138              {
    139                colorControlClearRemainingTime(endpoint);
    140                return;
    141              }
    142          
    143              // The remainingTime attribute expects values in tenths of seconds;
    144              // we maintain in milliseconds
    145              remainingTime = state->elapsedTime / 100;
    146              status = emberAfWriteServerAttribute(endpoint,
    147                                                   ZCL_COLOR_CONTROL_CLUSTER_ID,
    148                                                   ZCL_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE_ID,
    149                                                   (int8u *)&remainingTime,
    150                                                   ZCL_INT16U_ATTRIBUTE_TYPE);
    151              if (status != EMBER_ZCL_STATUS_SUCCESS) 
    152              {                                                                             
    153                emberAfColorControlClusterPrintln("ERR: writing remaining time %x", status);                                        
    154                return;                                                                                                             
    155              }    
    156            }
    157          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    158          
    159            if (!state->active) 
   \                     ??emberAfColorControlClusterServerTickCallback_8:
   \   00000052   0x7828             LDRB     R0,[R5, #+0]
   \   00000054   0xB128             CBZ.N    R0,??emberAfColorControlClusterServerTickCallback_0
    160            {
    161              return;
    162            }
    163          
    164            //schedule the next tick
    165            emberAfScheduleServerTick(endpoint,
    166                                      ZCL_COLOR_CONTROL_CLUSTER_ID,
    167                                      state->eventDuration);
   \   00000056   0x68AA             LDR      R2,[R5, #+8]
   \   00000058   0xF44F 0x7140      MOV      R1,#+768
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      BL       emberAfScheduleServerTick
    168          }
   \                     ??emberAfColorControlClusterServerTickCallback_0:
   \   00000062   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   \                     ??emberAfColorControlClusterServerTickCallback_4:
   \   00000064   0x2E00             CMP      R6,#+0
   \   00000066   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000006A   0xBF14             ITE      NE 
   \   0000006C   0x1C40             ADDNE    R0,R0,#+1
   \   0000006E   0x1E40             SUBEQ    R0,R0,#+1
   \   00000070   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_10:
   \   00000074   0xD105             BNE.N    ??emberAfColorControlClusterServerTickCallback_9
   \   00000076   0x2E00             CMP      R6,#+0
   \   00000078   0xBF14             ITE      NE 
   \   0000007A   0x2000             MOVNE    R0,#+0
   \   0000007C   0x20FE             MOVEQ    R0,#+254
   \   0000007E   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \                     ??emberAfColorControlClusterServerTickCallback_9:
   \   00000082   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       colorControlSetHue
   \   0000008C   0x7868             LDRB     R0,[R5, #+1]
   \   0000008E   0x2801             CMP      R0,#+1
   \   00000090   0xD0DF             BEQ.N    ??emberAfColorControlClusterServerTickCallback_8
   \   00000092   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000096   0x79A9             LDRB     R1,[R5, #+6]
   \   00000098   0x4288             CMP      R0,R1
   \   0000009A   0xBF0C             ITE      EQ 
   \   0000009C   0x2000             MOVEQ    R0,#+0
   \   0000009E   0x2001             MOVNE    R0,#+1
   \   000000A0   0xE7D6             B.N      ??emberAfColorControlClusterServerTickCallback_7
   \                     ??emberAfColorControlClusterServerTickCallback_5:
   \   000000A2   0x2F00             CMP      R7,#+0
   \   000000A4   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000A8   0xBF14             ITE      NE 
   \   000000AA   0x1C40             ADDNE    R0,R0,#+1
   \   000000AC   0x1E40             SUBEQ    R0,R0,#+1
   \   000000AE   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_25:
   \   000000B2   0xD105             BNE.N    ??emberAfColorControlClusterServerTickCallback_10
   \   000000B4   0x2F00             CMP      R7,#+0
   \   000000B6   0xBF14             ITE      NE 
   \   000000B8   0x20FE             MOVNE    R0,#+254
   \   000000BA   0x2000             MOVEQ    R0,#+0
   \   000000BC   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \                     ??emberAfColorControlClusterServerTickCallback_10:
   \   000000C0   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000C4   0x4620             MOV      R0,R4
   \   000000C6   0x.... 0x....      BL       colorControlSetSaturation
   \   000000CA   0x7868             LDRB     R0,[R5, #+1]
   \   000000CC   0x2804             CMP      R0,#+4
   \   000000CE   0xD0C0             BEQ.N    ??emberAfColorControlClusterServerTickCallback_8
   \   000000D0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D4   0x79E9             LDRB     R1,[R5, #+7]
   \   000000D6   0x4288             CMP      R0,R1
   \   000000D8   0xD103             BNE.N    ??emberAfColorControlClusterServerTickCallback_11
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xBF18             IT       NE 
   \   000000DE   0x28FE             CMPNE    R0,#+254
   \   000000E0   0xD101             BNE.N    ??emberAfColorControlClusterServerTickCallback_12
   \                     ??emberAfColorControlClusterServerTickCallback_11:
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0xE7B4             B.N      ??emberAfColorControlClusterServerTickCallback_7
   \                     ??emberAfColorControlClusterServerTickCallback_12:
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xE7B2             B.N      ??emberAfColorControlClusterServerTickCallback_7
   \                     ??emberAfColorControlClusterServerTickCallback_6:
   \   000000EA   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: unknown color co...">`
   \   000000EE   0x2080             MOVS     R0,#+128
   \   000000F0   0x.... 0x....      BL       emberAfPrintln
   \   000000F4   0xBDF1             POP      {R0,R4-R7,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2080             MOVS     R0,#+128
   \   00000002   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000004   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000004   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000008   0x28FF             CMP      R0,#+255
   \   0000000A   0x4770             BX       LR
    169          
    170          // Clear remaining time
    171          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    172          static void colorControlClearRemainingTime(int8u endpoint)
    173          {
    174            int16u data = 0xFFFF;
    175            EmberAfStatus status = emberAfWriteServerAttribute(endpoint,
    176                                                               ZCL_COLOR_CONTROL_CLUSTER_ID,
    177                                                               ZCL_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE_ID,
    178                                                               (int8u *)&data,
    179                                                               ZCL_INT16U_ATTRIBUTE_TYPE);
    180            if (status != EMBER_ZCL_STATUS_SUCCESS) 
    181            {
    182              emberAfColorControlClusterPrintln("ERR: writing remaining time %x", status);
    183              return;
    184            }
    185          }
    186          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    187          
    188          // Sets the Hue attribute value

   \                                 In section .text, align 2, keep-with-next
    189          static void colorControlSetHue(int8u endpoint, int8u hue)
    190          {
   \                     colorControlSetHue:
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    191            EmberAfStatus status = emberAfWriteServerAttribute(endpoint,
    192                                                               ZCL_COLOR_CONTROL_CLUSTER_ID,
    193                                                               ZCL_COLOR_CONTROL_CURRENT_HUE_ATTRIBUTE_ID,
    194                                                               (int8u *)&hue,
    195                                                               ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000004   0x2120             MOVS     R1,#+32
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0xAB02             ADD      R3,SP,#+8
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF44F 0x7140      MOV      R1,#+768
   \   00000010   0x.... 0x....      BL       emberAfWriteServerAttribute
    196            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000014   0xB120             CBZ.N    R0,??colorControlSetHue_0
    197            {
    198              emberAfColorControlClusterPrintln("ERR: writing current hue %x", status); 
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: writing current ...">`
   \   0000001C   0x2080             MOVS     R0,#+128
   \   0000001E   0xE004             B.N      ??colorControlSetHue_1
    199              emberAfColorControlClusterFlush();
    200              return;
    201            }
    202            emberAfDebugPrintln("hue=%x", hue);
   \                     ??colorControlSetHue_0:
   \   00000020   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "hue=%x">`
   \   00000028   0x2002             MOVS     R0,#+2
   \                     ??colorControlSetHue_1:
   \   0000002A   0x....             B.N      ?Subroutine0
    203          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       emberAfPrintln
   \   00000004   0xBD07             POP      {R0-R2,PC}       ;; return
    204          
    205          // Sets the Saturation attribute value

   \                                 In section .text, align 2, keep-with-next
    206          static void colorControlSetSaturation(int8u endpoint, int8u saturation)
    207          {
   \                     colorControlSetSaturation:
   \   00000000   0xB502             PUSH     {R1,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    208            EmberAfStatus status = emberAfWriteServerAttribute(endpoint,
    209                                                               ZCL_COLOR_CONTROL_CLUSTER_ID,
    210                                                               ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    211                                                               (int8u *)&saturation,
    212                                                               ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000004   0x2120             MOVS     R1,#+32
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0xAB02             ADD      R3,SP,#+8
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0xF44F 0x7140      MOV      R1,#+768
   \   00000010   0x.... 0x....      BL       emberAfWriteServerAttribute
    213            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000014   0xB120             CBZ.N    R0,??colorControlSetSaturation_0
    214            {
    215              emberAfColorControlClusterPrintln("ERR: writing current saturation %x", status);
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: writing current ...">_1`
   \   0000001C   0x2080             MOVS     R0,#+128
   \   0000001E   0xE004             B.N      ??colorControlSetSaturation_1
    216              return;
    217            }
    218            emberAfDebugPrintln("saturation=%x", saturation); 
   \                     ??colorControlSetSaturation_0:
   \   00000020   0xF89D 0x2008      LDRB     R2,[SP, #+8]
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "saturation=%x">`
   \   00000028   0x2002             MOVS     R0,#+2
   \                     ??colorControlSetSaturation_1:
   \   0000002A                      REQUIRE ?Subroutine0
   \   0000002A                      ;; // Fall through to label ?Subroutine0
    219          }
    220          
    221          static void colorControlSetColorModeToZero(void)
    222          {
    223          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_MODE_ATTRIBUTE
    224            // Set the optional Color Mode attribute to zero as per the spec.  If an
    225            // error occurs, log it, but ignore it.
    226            int8u colorMode = 0;
    227            EmberAfStatus status = emberAfWriteServerAttribute(emberAfCurrentEndpoint(),
    228                                                               ZCL_COLOR_CONTROL_CLUSTER_ID, 
    229                                                               ZCL_COLOR_CONTROL_COLOR_MODE_ATTRIBUTE_ID, 
    230                                                               &colorMode,
    231                                                               ZCL_ENUM8_ATTRIBUTE_TYPE);
    232            if (status != EMBER_ZCL_STATUS_SUCCESS) 
    233            {
    234              emberAfColorControlClusterPrintln("ERR: writing color mode%x", status);
    235            }
    236            emberAfDebugPrintln("colorMode=%x", colorMode); emberAfColorControlClusterFlush();
    237          #else
    238            emberAfDebugPrintln("no color mode attribute"); emberAfColorControlClusterFlush();
    239          #endif //ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_COLOR_MODE_ATTRIBUTE
    240          }
    241          
    242          // Read CurrentHue attribute value.

   \                                 In section .text, align 2, keep-with-next
    243          static EmberAfStatus colorControlReadCurrentHue(int8u endpoint, int8u* hue)
    244          {
   \                     colorControlReadCurrentHue:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    245            EmberAfStatus status = emberAfReadServerAttribute(endpoint,
    246                                                              ZCL_COLOR_CONTROL_CLUSTER_ID,
    247                                                              ZCL_COLOR_CONTROL_CURRENT_HUE_ATTRIBUTE_ID,
    248                                                              hue,
    249                                                              sizeof(int8u));
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x9200             STR      R2,[SP, #+0]
   \   00000008   0x460B             MOV      R3,R1
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF44F 0x7140      MOV      R1,#+768
   \   00000010   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000014   0x0004             MOVS     R4,R0
    250            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000016   0xD004             BEQ.N    ??CrossCallReturnLabel_15
    251            {
    252              emberAfColorControlClusterPrintln("ERR: reading current hue %x", status);
   \   00000018   0x4622             MOV      R2,R4
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: reading current ...">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine9
    253            }
    254            return status;
   \                     ??CrossCallReturnLabel_15:
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    255          }
    256          
    257          // Read CurrentSaturation attribute value.

   \                                 In section .text, align 2, keep-with-next
    258          static EmberAfStatus colorControlReadCurrentSaturation(int8u endpoint,
    259                                                                 int8u* saturation)
    260          {
   \                     colorControlReadCurrentSaturation:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    261            EmberAfStatus status = emberAfReadServerAttribute(endpoint,
    262                                                              ZCL_COLOR_CONTROL_CLUSTER_ID,
    263                                                              ZCL_COLOR_CONTROL_CURRENT_SATURATION_ATTRIBUTE_ID,
    264                                                              saturation,
    265                                                              sizeof(int8u));
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x9200             STR      R2,[SP, #+0]
   \   00000008   0x460B             MOV      R3,R1
   \   0000000A   0xF44F 0x7140      MOV      R1,#+768
   \   0000000E   0x.... 0x....      BL       emberAfReadServerAttribute
   \   00000012   0x0004             MOVS     R4,R0
    266            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000014   0xD004             BEQ.N    ??CrossCallReturnLabel_14
    267            {
    268              emberAfColorControlClusterPrintln("ERR: reading current saturation %x", status);
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: reading current ...">_1`
   \   0000001C   0x.... 0x....      BL       ?Subroutine9
    269            }
    270            return status;
   \                     ??CrossCallReturnLabel_14:
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    271          }
    272          
    273          /****************** COMMAND HANDLERS **********************/
    274          
    275          // Move hue to a given hue, taking transitionTime until completed.

   \                                 In section .text, align 2, keep-with-next
    276          boolean emberAfColorControlClusterMoveToHueCallback(int8u hue,
    277                                                              int8u direction,
    278                                                              int16u transitionTime)
    279          {
   \                     emberAfColorControlClusterMoveToHueCallback:
   \   00000000   0xE92D 0x46F0      PUSH     {R4-R7,R9,R10,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x468A             MOV      R10,R1
   \   0000000A   0x4691             MOV      R9,R2
    280            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \   0000000C   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_39:
   \   00000010   0x4605             MOV      R5,R0
    281            EmberAfStatus status;
    282            int8u currentHue, currentSaturation;
    283          
    284            emberAfColorControlClusterPrintln("ColorControl: MoveToHue (%x, %x, %2x)",
    285                                              hue,
    286                                              direction,
    287                                              transitionTime);
   \   00000012   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   00000016   0x4653             MOV      R3,R10
   \   00000018   0x4632             MOV      R2,R6
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: MoveToH...">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine10
    288          
    289            if (state == NULL) 
   \                     ??CrossCallReturnLabel_20:
   \   00000022   0xB90D             CBNZ.N   R5,??emberAfColorControlClusterMoveToHueCallback_0
    290            {
    291              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000024   0x2701             MOVS     R7,#+1
    292              goto send_default_response;
   \   00000026   0xE050             B.N      ??emberAfColorControlClusterMoveToHueCallback_1
    293            }
    294          
    295            // If the color specified is not achievable by the hardware, then the
    296            // color shall not be set and a ZCL default response command shall be
    297            // generated with status code equal to INVALID_VALUE.
    298            status = colorControlReadCurrentSaturation(emberAfCurrentEndpoint(), 
    299                                                       &currentSaturation);
   \                     ??emberAfColorControlClusterMoveToHueCallback_0:
   \   00000028   0xF10D 0x0105      ADD      R1,SP,#+5
   \   0000002C   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_22:
   \   00000030   0x0007             MOVS     R7,R0
    300            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000032   0xD14A             BNE.N    ??emberAfColorControlClusterMoveToHueCallback_1
    301            {
    302              goto send_default_response;
    303            }
    304            if(!emberAfPluginColorControlIsColorSupportedCallback(hue, currentSaturation)) 
   \   00000034   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       emberAfPluginColorControlIsColorSupportedCallback
   \   0000003E   0xB908             CBNZ.N   R0,??emberAfColorControlClusterMoveToHueCallback_2
    305            {
    306              status = EMBER_ZCL_STATUS_INVALID_VALUE;
   \   00000040   0x2787             MOVS     R7,#+135
    307              goto send_default_response;
   \   00000042   0xE042             B.N      ??emberAfColorControlClusterMoveToHueCallback_1
    308            }
    309          
    310            status = colorControlReadCurrentHue(emberAfCurrentEndpoint(), &currentHue);
   \                     ??emberAfColorControlClusterMoveToHueCallback_2:
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_24:
   \   0000004A   0x0007             MOVS     R7,R0
    311            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000004C   0xD13D             BNE.N    ??emberAfColorControlClusterMoveToHueCallback_1
    312            {
    313              goto send_default_response;
    314            }
    315          
    316            // Nothing to do, prevents divide-by-zero
    317            if ( hue == currentHue ) {
   \   0000004E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000052   0x4286             CMP      R6,R0
   \   00000054   0xD039             BEQ.N    ??emberAfColorControlClusterMoveToHueCallback_1
    318              status = EMBER_ZCL_STATUS_SUCCESS;
    319              goto send_default_response;
    320            }
    321          
    322            // As hue is effectively measured on a circle, the new hue may be moved to in
    323            // either direction.  The direction of hue change is given by the Direction
    324            // field. If Directionis "Shortest distance," the direction is taken that
    325            // involves the shortest path round the circle.  This case corresponds to
    326            // expected normal usage.  If Direction is "Longest distance," the direction
    327            // is taken that involves the longest path round the circle.  This case can be
    328            // used for "rainbow effects."  In both cases, if both distances are the same,
    329            // the Up direction shall be taken.
    330            switch (direction) 
   \   00000056   0xF1BA 0x0F00      CMP      R10,#+0
   \   0000005A   0xD007             BEQ.N    ??emberAfColorControlClusterMoveToHueCallback_3
   \   0000005C   0xF1BA 0x0F02      CMP      R10,#+2
   \   00000060   0xD022             BEQ.N    ??emberAfColorControlClusterMoveToHueCallback_4
   \   00000062   0xD31B             BCC.N    ??emberAfColorControlClusterMoveToHueCallback_5
   \   00000064   0xF1BA 0x0F03      CMP      R10,#+3
   \   00000068   0xD020             BEQ.N    ??emberAfColorControlClusterMoveToHueCallback_6
   \   0000006A   0xE021             B.N      ??emberAfColorControlClusterMoveToHueCallback_7
    331            {
    332              case EMBER_ZCL_HUE_DIRECTION_SHORTEST_DISTANCE:
    333                state->hueMoveDirection = ((int8u) (hue - currentHue) <= 127 ? TRUE : FALSE);
   \                     ??emberAfColorControlClusterMoveToHueCallback_3:
   \   0000006C   0x1A31             SUBS     R1,R6,R0
   \   0000006E   0xB2C9             UXTB     R1,R1
   \   00000070   0x2980             CMP      R1,#+128
   \   00000072   0x4180             SBCS     R0,R0,R0
   \                     ??emberAfColorControlClusterMoveToHueCallback_8:
   \   00000074   0x0FC0             LSRS     R0,R0,#+31
   \                     ??emberAfColorControlClusterMoveToHueCallback_9:
   \   00000076   0x70A8             STRB     R0,[R5, #+2]
    334                break;
    335                
    336              case EMBER_ZCL_HUE_DIRECTION_LONGEST_DISTANCE:
    337                state->hueMoveDirection = ((int8u) (hue - currentHue) >= 127 ? TRUE : FALSE);
    338                break;
    339                
    340              case EMBER_ZCL_HUE_DIRECTION_UP:
    341                state->hueMoveDirection = TRUE;
    342                break;
    343                
    344              case EMBER_ZCL_HUE_DIRECTION_DOWN:
    345                state->hueMoveDirection = FALSE;
    346                break;
    347                
    348              default:
    349                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    350                goto send_default_response;
    351            }
    352          
    353            state->commandId = ZCL_MOVE_TO_HUE_COMMAND_ID;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x7068             STRB     R0,[R5, #+1]
    354            state->elapsedTime = 0;
   \   0000007C   0x60E8             STR      R0,[R5, #+12]
    355            state->hueMoveToLevel = hue;
   \   0000007E   0x71AE             STRB     R6,[R5, #+6]
    356            state->transitionTime = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10; 
   \   00000080   0xEA4F 0x2089      LSL      R0,R9,#+10
   \   00000084   0x210A             MOVS     R1,#+10
   \   00000086   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000008A   0x6128             STR      R0,[R5, #+16]
    357            state->eventDuration = state->transitionTime / ((state->hueMoveDirection) ? 
    358                                                            (hue - currentHue) : 
    359                                                            (currentHue - hue));
   \   0000008C   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000090   0x78AA             LDRB     R2,[R5, #+2]
   \   00000092   0x2A00             CMP      R2,#+0
   \   00000094   0xBF14             ITE      NE 
   \   00000096   0x1A71             SUBNE    R1,R6,R1
   \   00000098   0x1B89             SUBEQ    R1,R1,R6
   \   0000009A   0xE00B             B.N      ??emberAfColorControlClusterMoveToHueCallback_10
   \                     ??emberAfColorControlClusterMoveToHueCallback_5:
   \   0000009C   0x1A31             SUBS     R1,R6,R0
   \   0000009E   0xB2C9             UXTB     R1,R1
   \   000000A0   0x297F             CMP      R1,#+127
   \   000000A2   0x4180             SBCS     R0,R0,R0
   \   000000A4   0x43C0             MVNS     R0,R0
   \   000000A6   0xE7E5             B.N      ??emberAfColorControlClusterMoveToHueCallback_8
   \                     ??emberAfColorControlClusterMoveToHueCallback_4:
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0xE7E4             B.N      ??emberAfColorControlClusterMoveToHueCallback_9
   \                     ??emberAfColorControlClusterMoveToHueCallback_6:
   \   000000AC   0x2000             MOVS     R0,#+0
   \   000000AE   0xE7E2             B.N      ??emberAfColorControlClusterMoveToHueCallback_9
   \                     ??emberAfColorControlClusterMoveToHueCallback_7:
   \   000000B0   0x2785             MOVS     R7,#+133
   \   000000B2   0xE00A             B.N      ??emberAfColorControlClusterMoveToHueCallback_1
   \                     ??emberAfColorControlClusterMoveToHueCallback_10:
   \   000000B4   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   000000B8   0x60A8             STR      R0,[R5, #+8]
    360            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    361            colorControlSetColorModeToZero();
   \   000000BA   0x.... 0x....      BL       ??Subroutine19_0
    362          
    363            // Schedule the next tick
    364            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    365                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    366                                          state->eventDuration)
    367                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_44:
   \   000000BE   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   000000C2   0xB100             CBZ.N    R0,??emberAfColorControlClusterMoveToHueCallback_11
    368              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   000000C4   0x27C1             MOVS     R7,#+193
    369            else
    370              status = EMBER_ZCL_STATUS_SUCCESS;
    371          
    372            state->active = TRUE;
   \                     ??emberAfColorControlClusterMoveToHueCallback_11:
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x7028             STRB     R0,[R5, #+0]
    373            goto send_default_response;
    374          
    375          send_default_response:
    376            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterMoveToHueCallback_1:
   \   000000CA   0x4638             MOV      R0,R7
   \   000000CC   0x....             B.N      ?Subroutine1
    377            return TRUE;
    378          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x4607             MOV      R7,R0
   \   00000002   0x460D             MOV      R5,R1
   \                     ??Subroutine7_0:
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable19_1
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A                      REQUIRE ??Subroutine18_0
   \   0000000A                      ;; // Fall through to label ??Subroutine18_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine18_0:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0x....             B.N      getColorControlState

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x68AA             LDR      R2,[R5, #+8]
   \                     ??Subroutine3_0:
   \   00000002   0xF44F 0x7140      MOV      R1,#+768
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x7940             LDRB     R0,[R0, #+5]
   \   0000000C   0x.... 0x....      B.W      emberAfScheduleServerTick

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xE8BD 0x86FE      POP      {R1-R7,R9,R10,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x6820             LDR      R0,[R4, #+0]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x....             B.N      colorControlReadCurrentHue

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x6820             LDR      R0,[R4, #+0]
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x....             B.N      colorControlReadCurrentSaturation

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x2080             MOVS     R0,#+128
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    379          
    380          // Move hue continuously at the given rate. If mode is stop, then stop.

   \                                 In section .text, align 2, keep-with-next
    381          boolean emberAfColorControlClusterMoveHueCallback(int8u moveMode, int8u rate)
    382          {
   \                     emberAfColorControlClusterMoveHueCallback:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine7
    383            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \                     ??CrossCallReturnLabel_41:
   \   00000006   0x4606             MOV      R6,R0
    384            EmberAfStatus status;
    385          
    386            emberAfColorControlClusterPrintln("ColorControl: MoveHue (%x, %x)",
    387                                              moveMode,
    388                                              rate);
   \   00000008   0x462B             MOV      R3,R5
   \   0000000A   0x463A             MOV      R2,R7
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: MoveHue...">`
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x.... 0x....      BL       emberAfPrintln
    389          
    390            if (state == NULL) 
   \   00000016   0xB90E             CBNZ.N   R6,??emberAfColorControlClusterMoveHueCallback_0
    391            {
    392              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000018   0x2001             MOVS     R0,#+1
    393              goto send_default_response;
   \   0000001A   0xE019             B.N      ??emberAfColorControlClusterMoveHueCallback_1
    394            }
    395          
    396            // If the rate is set to 0, then the command shall have no effect
    397            // and a ZCL default response command shall be generated with status 
    398            // code equal to INVALID_VALUE.
    399          
    400            if (rate == 0) 
   \                     ??emberAfColorControlClusterMoveHueCallback_0:
   \   0000001C   0xB1BD             CBZ.N    R5,??emberAfColorControlClusterMoveHueCallback_2
    401            {
    402              status = EMBER_ZCL_STATUS_INVALID_FIELD;
    403              goto send_default_response;
    404            }
    405          
    406            state->active = TRUE;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x7030             STRB     R0,[R6, #+0]
    407          
    408            switch (moveMode) 
   \   00000022   0xB127             CBZ.N    R7,??emberAfColorControlClusterMoveHueCallback_3
   \   00000024   0x2F01             CMP      R7,#+1
   \   00000026   0xD006             BEQ.N    ??emberAfColorControlClusterMoveHueCallback_4
   \   00000028   0x2F03             CMP      R7,#+3
   \   0000002A   0xD00E             BEQ.N    ??emberAfColorControlClusterMoveHueCallback_5
   \   0000002C   0xE00F             B.N      ??emberAfColorControlClusterMoveHueCallback_2
    409            {
    410              case EMBER_ZCL_HUE_MOVE_MODE_STOP:
    411                state->active = FALSE;
   \                     ??emberAfColorControlClusterMoveHueCallback_3:
   \   0000002E   0x.... 0x....      BL       ?Subroutine5
    412                emberAfDeactivateServerTick(emberAfCurrentEndpoint(),
    413                                            ZCL_COLOR_CONTROL_CLUSTER_ID);
    414          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    415                colorControlClearRemainingTime(emberAfCurrentEndpoint());
    416          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    417                status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_7:
   \   00000032   0x2000             MOVS     R0,#+0
    418                goto send_default_response;
   \   00000034   0xE00C             B.N      ??emberAfColorControlClusterMoveHueCallback_1
    419            
    420              case EMBER_ZCL_HUE_MOVE_MODE_UP:
    421                state->hueMoveDirection = TRUE;
   \                     ??emberAfColorControlClusterMoveHueCallback_4:
   \   00000036   0x70B0             STRB     R0,[R6, #+2]
    422                break;
    423                
    424              case EMBER_ZCL_HUE_MOVE_MODE_DOWN:
    425                state->hueMoveDirection = FALSE;
    426                break;
    427                
    428              default:
    429                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    430                goto send_default_response;
    431            }
    432          
    433            state->commandId = ZCL_MOVE_HUE_COMMAND_ID;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       ?Subroutine4
    434            if (state->active) 
    435            {
    436              state->eventDuration = MILLISECOND_TICKS_PER_SECOND / rate;
    437            }
    438          
    439            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    440            colorControlSetColorModeToZero();
    441          
    442            //schedule the next tick
    443            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    444                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    445                                          state->eventDuration)
    446                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_5:
   \   0000003E   0x68B2             LDR      R2,[R6, #+8]
   \   00000040   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_1:
   \   00000044   0xB120             CBZ.N    R0,??emberAfColorControlClusterMoveHueCallback_1
    447              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   00000046   0x20C1             MOVS     R0,#+193
   \   00000048   0xE002             B.N      ??emberAfColorControlClusterMoveHueCallback_1
   \                     ??emberAfColorControlClusterMoveHueCallback_5:
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xE7F3             B.N      ??emberAfColorControlClusterMoveHueCallback_4
   \                     ??emberAfColorControlClusterMoveHueCallback_2:
   \   0000004E   0x2085             MOVS     R0,#+133
    448            else
    449              status = EMBER_ZCL_STATUS_SUCCESS;
    450          
    451            goto send_default_response;
    452          
    453          send_default_response:
    454            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterMoveHueCallback_1:
   \   00000050   0x....             B.N      ?Subroutine2
    455          
    456            return TRUE;
    457          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xBDF2             POP      {R1,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x7030             STRB     R0,[R6, #+0]
   \   00000004   0xF44F 0x7140      MOV      R1,#+768
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x7940             LDRB     R0,[R0, #+5]
   \   0000000E   0x.... 0x....      B.W      emberAfDeactivateServerTick

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x7070             STRB     R0,[R6, #+1]
   \   00000002   0x7830             LDRB     R0,[R6, #+0]
   \   00000004   0xB120             CBZ.N    R0,??Subroutine4_0
   \   00000006   0xF44F 0x6080      MOV      R0,#+1024
   \   0000000A   0xFBB0 0xF0F5      UDIV     R0,R0,R5
   \   0000000E   0x60B0             STR      R0,[R6, #+8]
   \                     ??Subroutine4_0:
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "no color mode attribute">`
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0x.... 0x....      B.W      emberAfPrintln
    458          
    459          // Step hue by one step, taking time as specified.

   \                                 In section .text, align 2, keep-with-next
    460          boolean emberAfColorControlClusterStepHueCallback(int8u stepMode,
    461                                                            int8u stepSize,
    462                                                            int8u transitionTime)
    463          {
   \                     emberAfColorControlClusterStepHueCallback:
   \   00000000   0xE92D 0x46F0      PUSH     {R4-R7,R9,R10,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x.... 0x....      BL       ?Subroutine17
    464            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \                     ??CrossCallReturnLabel_33:
   \   0000000C   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_37:
   \   00000010   0x4607             MOV      R7,R0
    465            EmberAfStatus status;
    466            int8u currentHue, currentSaturation;
    467          
    468            emberAfColorControlClusterPrintln("ColorControl: StepHue (%x, %x, %x)",
    469                                              stepMode,
    470                                              stepSize,
    471                                              transitionTime);
   \   00000012   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000016   0x4623             MOV      R3,R4
   \   00000018   0x464A             MOV      R2,R9
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: StepHue...">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine10
    472          
    473            if (state == NULL) 
   \                     ??CrossCallReturnLabel_19:
   \   00000022   0xB90F             CBNZ.N   R7,??emberAfColorControlClusterStepHueCallback_0
    474            {
    475              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000024   0x2501             MOVS     R5,#+1
    476              goto send_default_response;
   \   00000026   0xE040             B.N      ??emberAfColorControlClusterStepHueCallback_1
    477            }
    478          
    479            status = colorControlReadCurrentHue(emberAfCurrentEndpoint(), &currentHue);
   \                     ??emberAfColorControlClusterStepHueCallback_0:
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_29:
   \   0000002E   0x0005             MOVS     R5,R0
    480            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000030   0xD13B             BNE.N    ??emberAfColorControlClusterStepHueCallback_1
    481            {
    482              goto send_default_response;
    483            }
    484          
    485            // Add or subtract the step size to/from the current hue to get the final hue.
    486            // However, the range for hues is 0x00 to 0xFE, so if we land on 0xFF or if we
    487            // roll past it, we have to add or subtract one to the final hue, effectively
    488            // skipping over the invalid 0xFF.
    489            switch (stepMode) {
   \   00000032   0xF1B9 0x0F01      CMP      R9,#+1
   \   00000036   0xD003             BEQ.N    ??emberAfColorControlClusterStepHueCallback_2
   \   00000038   0xF1B9 0x0F03      CMP      R9,#+3
   \   0000003C   0xD01F             BEQ.N    ??emberAfColorControlClusterStepHueCallback_3
   \   0000003E   0xE02B             B.N      ??emberAfColorControlClusterStepHueCallback_4
    490              case EMBER_ZCL_HUE_STEP_MODE_UP:
    491                state->hueMoveToLevel = currentHue + stepSize;
   \                     ??emberAfColorControlClusterStepHueCallback_2:
   \   00000040   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000044   0x1820             ADDS     R0,R4,R0
   \   00000046   0x71B8             STRB     R0,[R7, #+6]
    492                if (stepSize == 0xFF - currentHue) 
   \   00000048   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004C   0xF1C1 0x01FF      RSB      R1,R1,#+255
   \   00000050   0x428C             CMP      R4,R1
   \   00000052   0xBF04             ITT      EQ 
   \   00000054   0x1C40             ADDEQ    R0,R0,#+1
   \   00000056   0x71B8             STRBEQ   R0,[R7, #+6]
    493                {
    494                  state->hueMoveToLevel++;
    495                }
    496                state->hueMoveDirection = TRUE;
   \   00000058   0x2001             MOVS     R0,#+1
   \                     ??emberAfColorControlClusterStepHueCallback_5:
   \   0000005A   0x70B8             STRB     R0,[R7, #+2]
    497                break;
    498                
    499              case EMBER_ZCL_HUE_STEP_MODE_DOWN:
    500                state->hueMoveToLevel = currentHue - stepSize;
    501                if (stepSize == currentHue - 1) 
    502                {
    503                  state->hueMoveToLevel--;
    504                }
    505                state->hueMoveDirection = FALSE;
    506                break;
    507                
    508              default:
    509                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    510                goto send_default_response;
    511            }
    512          
    513            // If the color specified is not achievable by the hardware, then the
    514            // color shall not be set and a ZCL default response command shall be
    515            // generated with status code equal to INVALID_VALUE.
    516            status = colorControlReadCurrentSaturation(emberAfCurrentEndpoint(), 
    517                                                       &currentSaturation);
   \   0000005C   0xF10D 0x0105      ADD      R1,SP,#+5
   \   00000060   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_32:
   \   00000064   0x0005             MOVS     R5,R0
    518            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000066   0xD120             BNE.N    ??emberAfColorControlClusterStepHueCallback_1
    519            {
    520              goto send_default_response;
    521            }
    522          
    523            if(!emberAfPluginColorControlIsColorSupportedCallback(state->hueMoveToLevel, 
    524                                                                  currentSaturation)
    525               || stepSize == 0 ) 
   \   00000068   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000006C   0x79B8             LDRB     R0,[R7, #+6]
   \   0000006E   0x.... 0x....      BL       emberAfPluginColorControlIsColorSupportedCallback
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xBF18             IT       NE 
   \   00000076   0x2C00             CMPNE    R4,#+0
   \   00000078   0xD110             BNE.N    ??emberAfColorControlClusterStepHueCallback_6
    526            {
    527              status = EMBER_ZCL_STATUS_INVALID_VALUE;
   \   0000007A   0x2587             MOVS     R5,#+135
    528              goto send_default_response;
   \   0000007C   0xE015             B.N      ??emberAfColorControlClusterStepHueCallback_1
    529            }
   \                     ??emberAfColorControlClusterStepHueCallback_3:
   \   0000007E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000082   0x1B00             SUBS     R0,R0,R4
   \   00000084   0x71B8             STRB     R0,[R7, #+6]
   \   00000086   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000008A   0x1E49             SUBS     R1,R1,#+1
   \   0000008C   0x428C             CMP      R4,R1
   \   0000008E   0xBF04             ITT      EQ 
   \   00000090   0x1E40             SUBEQ    R0,R0,#+1
   \   00000092   0x71B8             STRBEQ   R0,[R7, #+6]
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0xE7E0             B.N      ??emberAfColorControlClusterStepHueCallback_5
   \                     ??emberAfColorControlClusterStepHueCallback_4:
   \   00000098   0x2585             MOVS     R5,#+133
   \   0000009A   0xE006             B.N      ??emberAfColorControlClusterStepHueCallback_1
    530          
    531            state->commandId = ZCL_STEP_HUE_COMMAND_ID;
   \                     ??emberAfColorControlClusterStepHueCallback_6:
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x.... 0x....      BL       ?Subroutine11
    532            state->transitionTime = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10; 
    533            state->elapsedTime = 0;
    534            state->eventDuration = state->transitionTime / stepSize;
    535          
    536            state->active = TRUE;
    537          
    538            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    539            colorControlSetColorModeToZero();
    540          
    541            //schedule the next tick
    542            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    543                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    544                                          state->eventDuration)
    545                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_46:
   \   000000A2   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_9:
   \   000000A6   0xB100             CBZ.N    R0,??emberAfColorControlClusterStepHueCallback_1
    546              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   000000A8   0x25C1             MOVS     R5,#+193
    547            else
    548              status = EMBER_ZCL_STATUS_SUCCESS;
    549          
    550            goto send_default_response;
    551          
    552          send_default_response:
    553            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterStepHueCallback_1:
   \   000000AA   0x4628             MOV      R0,R5
   \   000000AC                      REQUIRE ?Subroutine1
   \   000000AC                      ;; // Fall through to label ?Subroutine1
    554          
    555            return TRUE;
    556          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \                     ??Subroutine16_0:
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x....             B.N      colorControlReadCurrentSaturation

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \                     ??Subroutine15_0:
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x....             B.N      colorControlReadCurrentHue

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x460C             MOV      R4,R1
   \   00000002   0x4692             MOV      R10,R2
   \   00000004   0x....             LDR.N    R6,??DataTable19_1
   \   00000006   0x6830             LDR      R0,[R6, #+0]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x68BA             LDR      R2,[R7, #+8]
   \   00000002   0xF44F 0x7140      MOV      R1,#+768
   \   00000006   0x6830             LDR      R0,[R6, #+0]
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x7940             LDRB     R0,[R0, #+5]
   \   0000000C   0x.... 0x....      B.W      emberAfScheduleServerTick

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x7078             STRB     R0,[R7, #+1]
   \   00000002   0xEA4F 0x208A      LSL      R0,R10,#+10
   \   00000006   0x210A             MOVS     R1,#+10
   \   00000008   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000000C   0x6138             STR      R0,[R7, #+16]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x60F8             STR      R0,[R7, #+12]
   \   00000012   0x6938             LDR      R0,[R7, #+16]
   \   00000014   0xFBB0 0xF0F4      UDIV     R0,R0,R4
   \   00000018   0x60B8             STR      R0,[R7, #+8]
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x7038             STRB     R0,[R7, #+0]
   \   0000001E                      REQUIRE ??Subroutine19_0
   \   0000001E                      ;; // Fall through to label ??Subroutine19_0
    557          
    558          // Move saturation to a given saturation, taking transitionTime until completed.

   \                                 In section .text, align 2, keep-with-next
    559          boolean emberAfColorControlClusterMoveToSaturationCallback(int8u saturation,
    560                                                                     int16u transitionTime)
    561          {
   \                     emberAfColorControlClusterMoveToSaturationCallback:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x4606             MOV      R6,R0
   \   00000006   0x460F             MOV      R7,R1
    562            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \   00000008   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_38:
   \   0000000C   0x4605             MOV      R5,R0
    563            EmberAfStatus status;
    564            int8u currentHue, currentSaturation;
    565          
    566            emberAfColorControlClusterPrintln("ColorControl: MoveToSaturation (%x, %2x)",
    567                                              saturation,
    568                                              transitionTime);
   \   0000000E   0x463B             MOV      R3,R7
   \   00000010   0x4632             MOV      R2,R6
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: MoveToS...">`
   \   00000016   0x2080             MOVS     R0,#+128
   \   00000018   0x.... 0x....      BL       emberAfPrintln
    569          
    570            if (state == NULL) 
   \   0000001C   0xB90D             CBNZ.N   R5,??emberAfColorControlClusterMoveToSaturationCal_0
    571            {
    572              status = EMBER_ZCL_STATUS_FAILURE;
   \   0000001E   0x2701             MOVS     R7,#+1
    573              goto send_default_response;
   \   00000020   0xE032             B.N      ??emberAfColorControlClusterMoveToSaturationCal_1
    574            }
    575          
    576            // If the color specified is not achievable by the hardware, then the
    577            // color shall not be set and a ZCL default response command shall be
    578            // generated with status code equal to INVALID_VALUE.
    579            status = colorControlReadCurrentHue(emberAfCurrentEndpoint(), 
    580                                                &currentHue);
   \                     ??emberAfColorControlClusterMoveToSaturationCal_0:
   \   00000022   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000026   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_23:
   \   0000002A   0x0007             MOVS     R7,R0
    581            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000002C   0xD12C             BNE.N    ??emberAfColorControlClusterMoveToSaturationCal_1
    582            {
    583              goto send_default_response;
    584            }
    585            if (!emberAfPluginColorControlIsColorSupportedCallback(currentHue, saturation)) 
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000034   0x.... 0x....      BL       emberAfPluginColorControlIsColorSupportedCallback
   \   00000038   0xB908             CBNZ.N   R0,??emberAfColorControlClusterMoveToSaturationCal_2
    586            {
    587              status = EMBER_ZCL_STATUS_INVALID_VALUE;
   \   0000003A   0x2787             MOVS     R7,#+135
    588              goto send_default_response;
   \   0000003C   0xE024             B.N      ??emberAfColorControlClusterMoveToSaturationCal_1
    589            }
    590          
    591            status = colorControlReadCurrentSaturation(emberAfCurrentEndpoint(),
    592                                                       &currentSaturation);
   \                     ??emberAfColorControlClusterMoveToSaturationCal_2:
   \   0000003E   0xA900             ADD      R1,SP,#+0
   \   00000040   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_21:
   \   00000044   0x0007             MOVS     R7,R0
    593            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000046   0xD11F             BNE.N    ??emberAfColorControlClusterMoveToSaturationCal_1
    594            {
    595              goto send_default_response;
    596            }
    597          
    598            // Nothing to do, prevent divide-by-zero
    599            if (saturation == currentSaturation) 
   \   00000048   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004C   0x4286             CMP      R6,R0
   \   0000004E   0xD01B             BEQ.N    ??emberAfColorControlClusterMoveToSaturationCal_1
    600            {
    601              status = EMBER_ZCL_STATUS_SUCCESS;
    602              goto send_default_response;
    603            }
    604          
    605            state->commandId = ZCL_MOVE_TO_SATURATION_COMMAND_ID;
   \   00000050   0x2003             MOVS     R0,#+3
   \   00000052   0x7068             STRB     R0,[R5, #+1]
    606            state->elapsedTime = 0;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x60E8             STR      R0,[R5, #+12]
    607            state->saturationMoveToLevel = saturation;
   \   00000058   0x71EE             STRB     R6,[R5, #+7]
    608            state->satMoveDirection = 
    609              (saturation > currentSaturation ? TRUE : FALSE);
   \   0000005A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000005E   0x42B1             CMP      R1,R6
   \   00000060   0x4180             SBCS     R0,R0,R0
   \   00000062   0x0FC0             LSRS     R0,R0,#+31
   \   00000064   0x70E8             STRB     R0,[R5, #+3]
    610            state->eventDuration = state->transitionTime / ((state->satMoveDirection) ? 
    611                                                            (saturation - currentSaturation) : 
    612                                                            (currentSaturation - saturation));
   \   00000066   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000006A   0x78E9             LDRB     R1,[R5, #+3]
   \   0000006C   0x07C9             LSLS     R1,R1,#+31
   \   0000006E   0xBF4C             ITE      MI 
   \   00000070   0x1A30             SUBMI    R0,R6,R0
   \   00000072   0x1B80             SUBPL    R0,R0,R6
   \   00000074   0x6929             LDR      R1,[R5, #+16]
   \   00000076   0xFBB1 0xF0F0      UDIV     R0,R1,R0
   \   0000007A   0x60A8             STR      R0,[R5, #+8]
    613          
    614            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    615            colorControlSetColorModeToZero();
   \   0000007C   0x.... 0x....      BL       ??Subroutine19_0
    616          
    617            //schedule the next tick
    618            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    619                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    620                                          state->eventDuration)
    621                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_43:
   \   00000080   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00000084   0xB100             CBZ.N    R0,??emberAfColorControlClusterMoveToSaturationCal_1
    622              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   00000086   0x27C1             MOVS     R7,#+193
    623            else
    624              status = EMBER_ZCL_STATUS_SUCCESS;
    625          
    626            goto send_default_response;
    627          
    628          send_default_response:
    629            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterMoveToSaturationCal_1:
   \   00000088   0x4638             MOV      R0,R7
   \   0000008A   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
    630          
    631            return TRUE;
   \   0000008E   0x2001             MOVS     R0,#+1
   \   00000090   0xBDFE             POP      {R1-R7,PC}       ;; return
    632          }
    633          
    634          // Move sat continuously at the given rate. If mode is stop, then stop.

   \                                 In section .text, align 2, keep-with-next
    635          boolean emberAfColorControlClusterMoveSaturationCallback(int8u moveMode, int8u rate)
    636          {
   \                     emberAfColorControlClusterMoveSaturationCallback:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine7
    637            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \                     ??CrossCallReturnLabel_40:
   \   00000006   0x4606             MOV      R6,R0
    638            EmberAfStatus status;
    639          
    640            emberAfColorControlClusterPrintln("ColorControl: MoveSaturation (%x, %x)",
    641                                              moveMode,
    642                                              rate);
   \   00000008   0x462B             MOV      R3,R5
   \   0000000A   0x463A             MOV      R2,R7
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: MoveSat...">`
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x.... 0x....      BL       emberAfPrintln
    643          
    644            if (state == NULL) 
   \   00000016   0xB90E             CBNZ.N   R6,??emberAfColorControlClusterMoveSaturationCallb_0
    645            {
    646              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000018   0x2001             MOVS     R0,#+1
    647              goto send_default_response;
   \   0000001A   0xE019             B.N      ??emberAfColorControlClusterMoveSaturationCallb_1
    648            }
    649          
    650            // If the rate is set to 0, then the command shall have no effect
    651            // and a ZCL default response command shall be generated with status 
    652            // code equal to INVALID_VALUE.
    653          
    654            if (rate == 0) 
   \                     ??emberAfColorControlClusterMoveSaturationCallb_0:
   \   0000001C   0xB1BD             CBZ.N    R5,??emberAfColorControlClusterMoveSaturationCallb_2
    655            {
    656              status = EMBER_ZCL_STATUS_INVALID_FIELD;
    657              goto send_default_response;
    658            }
    659          
    660            state->active = TRUE;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x7030             STRB     R0,[R6, #+0]
    661          
    662            switch (moveMode) {
   \   00000022   0xB127             CBZ.N    R7,??emberAfColorControlClusterMoveSaturationCallb_3
   \   00000024   0x2F01             CMP      R7,#+1
   \   00000026   0xD006             BEQ.N    ??emberAfColorControlClusterMoveSaturationCallb_4
   \   00000028   0x2F03             CMP      R7,#+3
   \   0000002A   0xD00E             BEQ.N    ??emberAfColorControlClusterMoveSaturationCallb_5
   \   0000002C   0xE00F             B.N      ??emberAfColorControlClusterMoveSaturationCallb_2
    663              case EMBER_ZCL_SATURATION_MOVE_MODE_STOP:
    664                state->active = FALSE;
   \                     ??emberAfColorControlClusterMoveSaturationCallb_3:
   \   0000002E   0x.... 0x....      BL       ?Subroutine5
    665                emberAfDeactivateServerTick(emberAfCurrentEndpoint(),
    666                                            ZCL_COLOR_CONTROL_CLUSTER_ID);
    667          #ifdef ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    668                colorControlClearRemainingTime(emberAfCurrentEndpoint());
    669          #endif // ZCL_USING_COLOR_CONTROL_CLUSTER_COLOR_CONTROL_REMAINING_TIME_ATTRIBUTE
    670                status = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_6:
   \   00000032   0x2000             MOVS     R0,#+0
    671                goto send_default_response;
   \   00000034   0xE00C             B.N      ??emberAfColorControlClusterMoveSaturationCallb_1
    672                
    673              case EMBER_ZCL_SATURATION_MOVE_MODE_UP:
    674                state->satMoveDirection = TRUE;
   \                     ??emberAfColorControlClusterMoveSaturationCallb_4:
   \   00000036   0x70F0             STRB     R0,[R6, #+3]
    675                break;
    676                
    677              case EMBER_ZCL_SATURATION_MOVE_MODE_DOWN:
    678                state->satMoveDirection = FALSE;
    679                break;
    680                
    681              default:
    682                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    683                goto send_default_response;
    684            }
    685          
    686            state->commandId = ZCL_MOVE_SATURATION_COMMAND_ID;
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x.... 0x....      BL       ?Subroutine4
    687            if (state->active) 
    688            {
    689              state->eventDuration = MILLISECOND_TICKS_PER_SECOND / rate;
    690            }
    691          
    692            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    693            colorControlSetColorModeToZero();
    694          
    695            //schedule the next tick
    696            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    697                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    698                                          state->eventDuration)
    699                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_4:
   \   0000003E   0x68B2             LDR      R2,[R6, #+8]
   \   00000040   0x.... 0x....      BL       ??Subroutine3_0
   \                     ??CrossCallReturnLabel_0:
   \   00000044   0xB120             CBZ.N    R0,??emberAfColorControlClusterMoveSaturationCallb_1
    700              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   00000046   0x20C1             MOVS     R0,#+193
   \   00000048   0xE002             B.N      ??emberAfColorControlClusterMoveSaturationCallb_1
   \                     ??emberAfColorControlClusterMoveSaturationCallb_5:
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xE7F3             B.N      ??emberAfColorControlClusterMoveSaturationCallb_4
   \                     ??emberAfColorControlClusterMoveSaturationCallb_2:
   \   0000004E   0x2085             MOVS     R0,#+133
    701            else
    702              status = EMBER_ZCL_STATUS_SUCCESS;
    703            goto send_default_response;
    704          
    705          send_default_response:
    706            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterMoveSaturationCallb_1:
   \   00000050                      REQUIRE ?Subroutine2
   \   00000050                      ;; // Fall through to label ?Subroutine2
    707          
    708            return TRUE;
    709          }
    710          
    711          // Step sat by one step, taking time as specified.

   \                                 In section .text, align 2, keep-with-next
    712          boolean emberAfColorControlClusterStepSaturationCallback(int8u stepMode,
    713                                                                   int8u stepSize,
    714                                                                   int8u transitionTime)
    715          {
   \                     emberAfColorControlClusterStepSaturationCallback:
   \   00000000   0xE92D 0x45F0      PUSH     {R4-R8,R10,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x4680             MOV      R8,R0
   \   00000008   0x.... 0x....      BL       ?Subroutine17
    716            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \                     ??CrossCallReturnLabel_34:
   \   0000000C   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_36:
   \   00000010   0x4607             MOV      R7,R0
    717            EmberAfStatus status;
    718            int8u currentHue, currentSaturation;
    719          
    720            emberAfColorControlClusterPrintln("ColorControl: StepSaturation (%x, %x, %x)",
    721                                              stepMode,
    722                                              stepSize,
    723                                              transitionTime);
   \   00000012   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000016   0x4623             MOV      R3,R4
   \   00000018   0x4642             MOV      R2,R8
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: StepSat...">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine10
    724          
    725            if (state == NULL) 
   \                     ??CrossCallReturnLabel_18:
   \   00000022   0xB90F             CBNZ.N   R7,??emberAfColorControlClusterStepSaturationCallb_0
    726            {
    727              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000024   0x2501             MOVS     R5,#+1
    728              goto send_default_response;
   \   00000026   0xE03B             B.N      ??emberAfColorControlClusterStepSaturationCallb_1
    729            }
    730          
    731            status = colorControlReadCurrentSaturation(emberAfCurrentEndpoint(),
    732                                                       &currentSaturation);
   \                     ??emberAfColorControlClusterStepSaturationCallb_0:
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_31:
   \   0000002E   0x0005             MOVS     R5,R0
    733            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000030   0xD136             BNE.N    ??emberAfColorControlClusterStepSaturationCallb_1
    734            {
    735              goto send_default_response;
    736            }
    737          
    738            // Add or subtract the step size to/from the current saturation to get the
    739            // final saturation.  However, the range for saturations is 0x00 to 0xFE, so
    740            // don't increment or decrement past those bounds.
    741            switch (stepMode) {
   \   00000032   0xF1B8 0x0F01      CMP      R8,#+1
   \   00000036   0xD003             BEQ.N    ??emberAfColorControlClusterStepSaturationCallb_2
   \   00000038   0xF1B8 0x0F03      CMP      R8,#+3
   \   0000003C   0xD01E             BEQ.N    ??emberAfColorControlClusterStepSaturationCallb_3
   \   0000003E   0xE026             B.N      ??emberAfColorControlClusterStepSaturationCallb_4
    742              case EMBER_ZCL_SATURATION_STEP_MODE_UP:
    743                state->saturationMoveToLevel = (stepSize > 0xFE - currentSaturation
    744                                                ? 0xFE
    745                                                : currentSaturation + stepSize);
   \                     ??emberAfColorControlClusterStepSaturationCallb_2:
   \   00000040   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000044   0xF1C0 0x00FE      RSB      R0,R0,#+254
   \   00000048   0x42A0             CMP      R0,R4
   \   0000004A   0xBFB2             ITEE     LT 
   \   0000004C   0x20FE             MOVLT    R0,#+254
   \   0000004E   0xF89D 0x0004      LDRBGE   R0,[SP, #+4]
   \   00000052   0x1820             ADDGE    R0,R4,R0
   \   00000054   0x71F8             STRB     R0,[R7, #+7]
    746                state->satMoveDirection = TRUE;
   \   00000056   0x2001             MOVS     R0,#+1
   \                     ??emberAfColorControlClusterStepSaturationCallb_5:
   \   00000058   0x70F8             STRB     R0,[R7, #+3]
    747                break;
    748                
    749              case EMBER_ZCL_SATURATION_STEP_MODE_DOWN:
    750                state->saturationMoveToLevel = (stepSize > currentSaturation
    751                                                ? 0x00
    752                                                : currentSaturation - stepSize);
    753                state->satMoveDirection = FALSE;
    754                break;
    755                
    756              default:
    757                status = EMBER_ZCL_STATUS_INVALID_FIELD;
    758                goto send_default_response;
    759            }
    760          
    761            // If the color specified is not achievable by the hardware, then the
    762            // color shall not be set and a ZCL default response command shall be
    763            // generated with status code equal to INVALID_VALUE.
    764            status = colorControlReadCurrentHue(emberAfCurrentEndpoint(), 
    765                                                &currentHue);
   \   0000005A   0xF10D 0x0105      ADD      R1,SP,#+5
   \   0000005E   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_28:
   \   00000062   0x0005             MOVS     R5,R0
    766            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000064   0xD11C             BNE.N    ??emberAfColorControlClusterStepSaturationCallb_1
    767            {
    768              goto send_default_response;
    769            }
    770          
    771            if(!emberAfPluginColorControlIsColorSupportedCallback(currentHue, 
    772                                                                  state->saturationMoveToLevel)
    773               || stepSize == 0 ) 
   \   00000066   0x79F9             LDRB     R1,[R7, #+7]
   \   00000068   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000006C   0x.... 0x....      BL       emberAfPluginColorControlIsColorSupportedCallback
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xBF18             IT       NE 
   \   00000074   0x2C00             CMPNE    R4,#+0
   \   00000076   0xD10C             BNE.N    ??emberAfColorControlClusterStepSaturationCallb_6
    774            {
    775              status = EMBER_ZCL_STATUS_INVALID_VALUE;
   \   00000078   0x2587             MOVS     R5,#+135
    776              goto send_default_response;
   \   0000007A   0xE011             B.N      ??emberAfColorControlClusterStepSaturationCallb_1
    777            }
   \                     ??emberAfColorControlClusterStepSaturationCallb_3:
   \   0000007C   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000080   0x42A0             CMP      R0,R4
   \   00000082   0xBF34             ITE      CC 
   \   00000084   0x2000             MOVCC    R0,#+0
   \   00000086   0x1B00             SUBCS    R0,R0,R4
   \   00000088   0x71F8             STRB     R0,[R7, #+7]
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0xE7E4             B.N      ??emberAfColorControlClusterStepSaturationCallb_5
   \                     ??emberAfColorControlClusterStepSaturationCallb_4:
   \   0000008E   0x2585             MOVS     R5,#+133
   \   00000090   0xE006             B.N      ??emberAfColorControlClusterStepSaturationCallb_1
    778          
    779            state->commandId = ZCL_STEP_SATURATION_COMMAND_ID;
   \                     ??emberAfColorControlClusterStepSaturationCallb_6:
   \   00000092   0x2005             MOVS     R0,#+5
   \   00000094   0x.... 0x....      BL       ?Subroutine11
    780            state->transitionTime = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10;
    781            state->elapsedTime = 0;
    782            state->eventDuration = state->transitionTime / stepSize;
    783          
    784            state->active = TRUE;
    785          
    786            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    787            colorControlSetColorModeToZero();
    788          
    789            //schedule the next tick
    790            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    791                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    792                                          state->eventDuration)
    793                != EMBER_SUCCESS)
   \                     ??CrossCallReturnLabel_45:
   \   00000098   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_8:
   \   0000009C   0xB100             CBZ.N    R0,??emberAfColorControlClusterStepSaturationCallb_1
    794              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   0000009E   0x25C1             MOVS     R5,#+193
    795            else
    796              status = EMBER_ZCL_STATUS_SUCCESS;
    797          
    798            goto send_default_response;
    799          
    800          send_default_response:
    801            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterStepSaturationCallb_1:
   \   000000A0   0x4628             MOV      R0,R5
   \   000000A2   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
    802          
    803            return TRUE;
   \   000000A6   0x2001             MOVS     R0,#+1
   \   000000A8   0xE8BD 0x85FE      POP      {R1-R8,R10,PC}   ;; return
    804          }
    805          
    806          // Move hue and saturation to a given values, taking time as specified.

   \                                 In section .text, align 2, keep-with-next
    807          boolean emberAfColorControlClusterMoveToHueAndSaturationCallback(int8u hue,
    808                                                                           int8u saturation,
    809                                                                           int16u transitionTime)
    810          {
   \                     emberAfColorControlClusterMoveToHueAndSaturationCallback:
   \   00000000   0xE92D 0x45F0      PUSH     {R4-R8,R10,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4690             MOV      R8,R2
    811            ColorControlState *state = getColorControlState(emberAfCurrentEndpoint());
   \   0000000C   0x....             LDR.N    R7,??DataTable19_1
   \   0000000E   0x6838             LDR      R0,[R7, #+0]
   \   00000010   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_35:
   \   00000014   0x4606             MOV      R6,R0
    812            EmberAfStatus status;
    813            int8u currentSaturation, currentHue, hueDiff, satDiff;
    814          
    815            emberAfColorControlClusterPrintln("ColorControl: MoveToHueAndSaturation (%x, %x, %2x)",
    816                                              hue,
    817                                              saturation,
    818                                              transitionTime);
   \   00000016   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \   0000001A   0x462B             MOV      R3,R5
   \   0000001C   0x4622             MOV      R2,R4
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "ColorControl: MoveToH...">_1`
   \   00000022   0x.... 0x....      BL       ?Subroutine10
    819          
    820            if (state == NULL) 
   \                     ??CrossCallReturnLabel_17:
   \   00000026   0xB916             CBNZ.N   R6,??emberAfColorControlClusterMoveToHueAndSaturat_0
    821            {
    822              status = EMBER_ZCL_STATUS_FAILURE;
   \   00000028   0xF04F 0x0A01      MOV      R10,#+1
    823              goto send_default_response;
   \   0000002C   0xE06F             B.N      ??emberAfColorControlClusterMoveToHueAndSaturat_1
    824            }
    825          
    826            // If the color specified is not achievable by the hardware, then the
    827            // color shall not be set and a ZCL default response command shall be
    828            // generated with status code equal to INVALID_VALUE.
    829            if (!emberAfPluginColorControlIsColorSupportedCallback(hue, saturation)) {
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_0:
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       emberAfPluginColorControlIsColorSupportedCallback
   \   00000036   0xB910             CBNZ.N   R0,??emberAfColorControlClusterMoveToHueAndSaturat_2
    830              status = EMBER_ZCL_STATUS_INVALID_VALUE;
   \   00000038   0xF04F 0x0A87      MOV      R10,#+135
    831              goto send_default_response;
   \   0000003C   0xE067             B.N      ??emberAfColorControlClusterMoveToHueAndSaturat_1
    832            }
    833          
    834            status = colorControlReadCurrentSaturation(emberAfCurrentEndpoint(),
    835                                                       &currentSaturation);
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_2:
   \   0000003E   0xF10D 0x0105      ADD      R1,SP,#+5
   \   00000042   0x6838             LDR      R0,[R7, #+0]
   \   00000044   0x.... 0x....      BL       ??Subroutine16_0
   \                     ??CrossCallReturnLabel_30:
   \   00000048   0xEA5F 0x0A00      MOVS     R10,R0
    836            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000004C   0xD15F             BNE.N    ??emberAfColorControlClusterMoveToHueAndSaturat_1
    837            {
    838              goto send_default_response;
    839            }
    840          
    841            status = colorControlReadCurrentHue(emberAfCurrentEndpoint(), &currentHue);
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0x6838             LDR      R0,[R7, #+0]
   \   00000052   0x.... 0x....      BL       ??Subroutine15_0
   \                     ??CrossCallReturnLabel_27:
   \   00000056   0xEA5F 0x0A00      MOVS     R10,R0
    842            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   0000005A   0xD158             BNE.N    ??emberAfColorControlClusterMoveToHueAndSaturat_1
    843            {
    844              goto send_default_response;
    845            }
    846          
    847            state->commandId = ZCL_MOVE_TO_HUE_AND_SATURATION_COMMAND_ID;
   \   0000005C   0x2006             MOVS     R0,#+6
   \   0000005E   0x7070             STRB     R0,[R6, #+1]
    848            state->hueMoveToLevel = hue;
   \   00000060   0x71B4             STRB     R4,[R6, #+6]
    849            state->hueMoveDirection = (hue - currentHue <= 127 ? TRUE : FALSE);
   \   00000062   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000066   0x1A20             SUBS     R0,R4,R0
   \   00000068   0x2880             CMP      R0,#+128
   \   0000006A   0xBFB4             ITE      LT 
   \   0000006C   0x2001             MOVLT    R0,#+1
   \   0000006E   0x2000             MOVGE    R0,#+0
   \   00000070   0x70B0             STRB     R0,[R6, #+2]
    850            hueDiff = (state->hueMoveDirection ? hue - currentHue : currentHue - hue);
   \   00000072   0x78B0             LDRB     R0,[R6, #+2]
   \   00000074   0x07C0             LSLS     R0,R0,#+31
   \   00000076   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000007A   0xBF4C             ITE      MI 
   \   0000007C   0x1A20             SUBMI    R0,R4,R0
   \   0000007E   0x1B00             SUBPL    R0,R0,R4
   \   00000080   0xB2C0             UXTB     R0,R0
    851          
    852            state->saturationMoveToLevel = saturation;
   \   00000082   0x71F5             STRB     R5,[R6, #+7]
    853            state->satMoveDirection = (saturation - currentSaturation <= 127 ? TRUE : FALSE);
   \   00000084   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   00000088   0x1A69             SUBS     R1,R5,R1
   \   0000008A   0x2980             CMP      R1,#+128
   \   0000008C   0xBFB4             ITE      LT 
   \   0000008E   0x2101             MOVLT    R1,#+1
   \   00000090   0x2100             MOVGE    R1,#+0
   \   00000092   0x70F1             STRB     R1,[R6, #+3]
    854            satDiff = (state->satMoveDirection 
    855                       ? saturation - currentSaturation 
    856                       : currentSaturation - saturation);
   \   00000094   0x78F1             LDRB     R1,[R6, #+3]
   \   00000096   0x07C9             LSLS     R1,R1,#+31
   \   00000098   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000009C   0xBF4C             ITE      MI 
   \   0000009E   0x1A69             SUBMI    R1,R5,R1
   \   000000A0   0x1B49             SUBPL    R1,R1,R5
   \   000000A2   0xB2C9             UXTB     R1,R1
    857          
    858            if (hueDiff == 0) 
   \   000000A4   0xB920             CBNZ.N   R0,??emberAfColorControlClusterMoveToHueAndSaturat_3
    859            {
    860              return emberAfColorControlClusterMoveToSaturationCallback(saturation,
    861                                                                        transitionTime);
   \   000000A6   0x4641             MOV      R1,R8
   \   000000A8   0x4628             MOV      R0,R5
   \   000000AA   0x.... 0x....      BL       emberAfColorControlClusterMoveToSaturationCallback
   \   000000AE   0xE032             B.N      ??emberAfColorControlClusterMoveToHueAndSaturat_4
    862            } 
    863            else if (satDiff == 0) 
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_3:
   \   000000B0   0xB921             CBNZ.N   R1,??emberAfColorControlClusterMoveToHueAndSaturat_5
    864            {
    865              return emberAfColorControlClusterMoveToHueCallback(hue,
    866                                                                 EMBER_ZCL_HUE_DIRECTION_SHORTEST_DISTANCE,
    867                                                                 transitionTime);
   \   000000B2   0x4642             MOV      R2,R8
   \   000000B4   0x4620             MOV      R0,R4
   \   000000B6   0x.... 0x....      BL       emberAfColorControlClusterMoveToHueCallback
   \   000000BA   0xE02C             B.N      ??emberAfColorControlClusterMoveToHueAndSaturat_4
    868            }
    869          
    870            state->elapsedTime = 0;
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_5:
   \   000000BC   0x2200             MOVS     R2,#+0
   \   000000BE   0x60F2             STR      R2,[R6, #+12]
    871            state->acceleratedHue = hueDiff > satDiff;
   \   000000C0   0x4281             CMP      R1,R0
   \   000000C2   0xBFB8             IT       LT 
   \   000000C4   0x2201             MOVLT    R2,#+1
   \   000000C6   0x7132             STRB     R2,[R6, #+4]
    872            state->acceleratedMoveRate = (state->acceleratedHue
    873                                          ? hueDiff / satDiff
    874                                          : satDiff / hueDiff);
   \   000000C8   0x7932             LDRB     R2,[R6, #+4]
   \   000000CA   0x07D2             LSLS     R2,R2,#+31
   \   000000CC   0xBF4C             ITE      MI 
   \   000000CE   0xFB90 0xF2F1      SDIVMI   R2,R0,R1
   \   000000D2   0xFB91 0xF2F0      SDIVPL   R2,R1,R0
   \   000000D6   0x7172             STRB     R2,[R6, #+5]
    875          
    876            state->transitionTime = transitionTime * MILLISECOND_TICKS_PER_SECOND / 10; 
   \   000000D8   0xEA4F 0x2288      LSL      R2,R8,#+10
   \   000000DC   0x230A             MOVS     R3,#+10
   \   000000DE   0xFBB2 0xF2F3      UDIV     R2,R2,R3
   \   000000E2   0x6132             STR      R2,[R6, #+16]
    877            state->eventDuration = state->transitionTime / ((state->acceleratedHue) 
    878                                                            ? hueDiff
    879                                                            : satDiff);
   \   000000E4   0x7933             LDRB     R3,[R6, #+4]
   \   000000E6   0xB903             CBNZ.N   R3,??emberAfColorControlClusterMoveToHueAndSaturat_6
   \   000000E8   0x4608             MOV      R0,R1
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_6:
   \   000000EA   0xFBB2 0xF0F0      UDIV     R0,R2,R0
   \   000000EE   0x60B0             STR      R0,[R6, #+8]
    880          
    881            // Set the Color Mode attribute to zero as per the spec, ignoring any errors.
    882            colorControlSetColorModeToZero();
   \   000000F0   0x.... 0x....      BL       ??Subroutine19_0
    883          
    884            state->active = TRUE;
   \                     ??CrossCallReturnLabel_42:
   \   000000F4   0x2001             MOVS     R0,#+1
   \   000000F6   0x7030             STRB     R0,[R6, #+0]
    885          
    886            //schedule the next tick
    887            if (emberAfScheduleServerTick(emberAfCurrentEndpoint(),
    888                                          ZCL_COLOR_CONTROL_CLUSTER_ID,
    889                                          state->eventDuration)
    890                != EMBER_SUCCESS)
   \   000000F8   0x68B2             LDR      R2,[R6, #+8]
   \   000000FA   0xF44F 0x7140      MOV      R1,#+768
   \   000000FE   0x6838             LDR      R0,[R7, #+0]
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x7940             LDRB     R0,[R0, #+5]
   \   00000104   0x.... 0x....      BL       emberAfScheduleServerTick
   \   00000108   0xB108             CBZ.N    R0,??emberAfColorControlClusterMoveToHueAndSaturat_1
    891              status = EMBER_ZCL_STATUS_SOFTWARE_FAILURE;
   \   0000010A   0xF04F 0x0AC1      MOV      R10,#+193
    892            else
    893              status = EMBER_ZCL_STATUS_SUCCESS;
    894          
    895            goto send_default_response;
    896          
    897          send_default_response:
    898            emberAfSendImmediateDefaultResponse(status);
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_1:
   \   0000010E   0x4650             MOV      R0,R10
   \   00000110   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
    899          
    900            return TRUE;
   \   00000114   0x2001             MOVS     R0,#+1
   \                     ??emberAfColorControlClusterMoveToHueAndSaturat_4:
   \   00000116   0xB005             ADD      SP,SP,#+20
   \   00000118   0xE8BD 0x85F0      POP      {R4-R8,R10,PC}   ;; return
    901          }
    902          

   \                                 In section .text, align 2, keep-with-next
    903          static boolean colorControlHueAndSaturationHandler(int8u endpoint)
    904          {
   \                     colorControlHueAndSaturationHandler:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x4680             MOV      R8,R0
    905            EmberAfStatus status;
    906            ColorControlState *state = getColorControlState(endpoint);
   \   00000008   0x.... 0x....      BL       getColorControlState
   \   0000000C   0x4606             MOV      R6,R0
    907            int8u hue, sat, hueDiff, satDiff;
    908            boolean hueUp = state->hueMoveDirection;
   \   0000000E   0x78B4             LDRB     R4,[R6, #+2]
    909            boolean satUp = state->satMoveDirection;
   \   00000010   0x78F7             LDRB     R7,[R6, #+3]
    910            boolean proceed = TRUE;
   \   00000012   0x2501             MOVS     R5,#+1
    911          
    912            if (state == NULL) 
   \   00000014   0x2E00             CMP      R6,#+0
   \   00000016   0xD062             BEQ.N    ??colorControlHueAndSaturationHandler_0
    913            {
    914              return FALSE;
    915            }
    916          
    917            status = colorControlReadCurrentHue(endpoint, &hue);
   \   00000018   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000001C   0x4640             MOV      R0,R8
   \   0000001E   0x.... 0x....      BL       colorControlReadCurrentHue
    918            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000022   0xB118             CBZ.N    R0,??colorControlHueAndSaturationHandler_1
    919            {
    920              emberAfColorControlClusterPrintln("ERR: could not read current hue %x", status);
   \   00000024   0x4602             MOV      R2,R0
   \   00000026   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: could not read c...">`
   \   0000002A   0xE007             B.N      ??colorControlHueAndSaturationHandler_2
    921              return FALSE;
    922            }
    923            
    924            status = colorControlReadCurrentSaturation(endpoint, &sat);
   \                     ??colorControlHueAndSaturationHandler_1:
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       colorControlReadCurrentSaturation
    925            if (status != EMBER_ZCL_STATUS_SUCCESS) 
   \   00000034   0xB128             CBZ.N    R0,??colorControlHueAndSaturationHandler_3
    926            {
    927              emberAfColorControlClusterPrintln("ERR: could not read current saturation %x", status);
   \   00000036   0x4602             MOV      R2,R0
   \   00000038   0x.... 0x....      ADR.W    R1,`?<Constant "ERR: could not read c...">_1`
    928              return FALSE;
    929            }
   \                     ??colorControlHueAndSaturationHandler_2:
   \   0000003C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_13:
   \   00000040   0xE04D             B.N      ??colorControlHueAndSaturationHandler_0
    930          
    931            // Calculate the hue and saturation differentials
    932            hueDiff = (hue > state->hueMoveToLevel) 
    933              ? (0xFF - (hue - state->hueMoveToLevel))
    934              : (state->hueMoveToLevel - hue);
   \                     ??colorControlHueAndSaturationHandler_3:
   \   00000042   0x79B0             LDRB     R0,[R6, #+6]
   \   00000044   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xBF3A             ITTE     CC 
   \   0000004C   0xF1C1 0x01FF      RSBCC    R1,R1,#+255
   \   00000050   0x1840             ADDCC    R0,R0,R1
   \   00000052   0x1A40             SUBCS    R0,R0,R1
   \   00000054   0xB2C0             UXTB     R0,R0
    935            satDiff = (sat > state->saturationMoveToLevel) 
    936              ? (0xFF - (sat - state->saturationMoveToLevel))
    937              : (state->saturationMoveToLevel - sat);
   \   00000056   0x79F1             LDRB     R1,[R6, #+7]
   \   00000058   0xF89D 0x2000      LDRB     R2,[SP, #+0]
   \   0000005C   0x4291             CMP      R1,R2
   \   0000005E   0xBF3A             ITTE     CC 
   \   00000060   0xF1C2 0x02FF      RSBCC    R2,R2,#+255
   \   00000064   0x1889             ADDCC    R1,R1,R2
   \   00000066   0x1A89             SUBCS    R1,R1,R2
   \   00000068   0xB2C9             UXTB     R1,R1
    938          
    939            // See where we are relative to our expected correction threshold
    940            if (state->acceleratedHue) 
   \   0000006A   0x7932             LDRB     R2,[R6, #+4]
   \   0000006C   0x2A00             CMP      R2,#+0
   \   0000006E   0xD035             BEQ.N    ??colorControlHueAndSaturationHandler_4
    941            {
    942              if ( satDiff == 0 ) return FALSE;
   \   00000070   0x2900             CMP      R1,#+0
   \   00000072   0xD034             BEQ.N    ??colorControlHueAndSaturationHandler_0
    943              hueDiff = hueDiff / satDiff;
    944              if (hueDiff > state->acceleratedMoveRate) 
   \   00000074   0x7972             LDRB     R2,[R6, #+5]
   \   00000076   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000007A   0xB2C0             UXTB     R0,R0
   \   0000007C   0x4282             CMP      R2,R0
   \   0000007E   0xBF34             ITE      CC 
   \   00000080   0x1E50             SUBCC    R0,R2,#+1
   \   00000082   0x1C50             ADDCS    R0,R2,#+1
    945              {
    946                hueDiff = state->acceleratedMoveRate - 1;
    947              } 
    948              else 
    949              {
    950                hueDiff = state->acceleratedMoveRate + 1;
   \   00000084   0xB2C0             UXTB     R0,R0
    951              }
    952          
    953              sat = satUp ? sat + 1 : sat - 1;
   \   00000086   0x2F00             CMP      R7,#+0
   \   00000088   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000008C   0xBF14             ITE      NE 
   \   0000008E   0x1C49             ADDNE    R1,R1,#+1
   \   00000090   0x1E49             SUBEQ    R1,R1,#+1
   \   00000092   0xF88D 0x1000      STRB     R1,[SP, #+0]
    954              if (sat == 0xFF) 
   \   00000096   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000009A   0x29FF             CMP      R1,#+255
   \   0000009C   0xD105             BNE.N    ??colorControlHueAndSaturationHandler_5
    955              {
    956                sat = satUp ? 0x00 : 0xFE;
   \   0000009E   0x2F00             CMP      R7,#+0
   \   000000A0   0xBF14             ITE      NE 
   \   000000A2   0x2100             MOVNE    R1,#+0
   \   000000A4   0x21FE             MOVEQ    R1,#+254
   \   000000A6   0xF88D 0x1000      STRB     R1,[SP, #+0]
    957              }
    958              // Are we finished?
    959              if (sat == state->saturationMoveToLevel) 
   \                     ??colorControlHueAndSaturationHandler_5:
   \   000000AA   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000000AE   0x79F2             LDRB     R2,[R6, #+7]
   \   000000B0   0x4291             CMP      R1,R2
   \   000000B2   0xD103             BNE.N    ??colorControlHueAndSaturationHandler_6
    960              {
    961                hue = state->hueMoveToLevel;
   \   000000B4   0x79B0             LDRB     R0,[R6, #+6]
   \   000000B6   0xF88D 0x0001      STRB     R0,[SP, #+1]
    962                proceed = FALSE;
   \   000000BA   0xE032             B.N      ??colorControlHueAndSaturationHandler_7
    963                goto set_values;
    964              }
    965              hue = hueUp ? hue + hueDiff : hue - hueDiff;
   \                     ??colorControlHueAndSaturationHandler_6:
   \   000000BC   0x2C00             CMP      R4,#+0
   \   000000BE   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000C2   0xBF14             ITE      NE 
   \   000000C4   0x1840             ADDNE    R0,R0,R1
   \   000000C6   0x1A08             SUBEQ    R0,R1,R0
   \   000000C8   0x.... 0x....      BL       ?Subroutine8
    966              if (hue == 0xFF) 
   \                     ??CrossCallReturnLabel_11:
   \   000000CC   0xD13A             BNE.N    ??colorControlHueAndSaturationHandler_8
    967              {
    968                hue = hueUp ? 0x00 : 0xFE;
   \   000000CE   0x2C00             CMP      R4,#+0
   \   000000D0   0xBF14             ITE      NE 
   \   000000D2   0x2000             MOVNE    R0,#+0
   \   000000D4   0x20FE             MOVEQ    R0,#+254
   \   000000D6   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   000000DA   0xE033             B.N      ??colorControlHueAndSaturationHandler_8
    969              }
    970            } 
    971            else 
    972            {
    973              if ( hueDiff == 0 ) return FALSE;
   \                     ??colorControlHueAndSaturationHandler_4:
   \   000000DC   0xB908             CBNZ.N   R0,??colorControlHueAndSaturationHandler_9
   \                     ??colorControlHueAndSaturationHandler_0:
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0xE03B             B.N      ??colorControlHueAndSaturationHandler_10
    974              satDiff = satDiff / hueDiff;
    975              if (satDiff > state->acceleratedMoveRate) 
   \                     ??colorControlHueAndSaturationHandler_9:
   \   000000E2   0x7972             LDRB     R2,[R6, #+5]
   \   000000E4   0xFB91 0xF0F0      SDIV     R0,R1,R0
   \   000000E8   0xB2C0             UXTB     R0,R0
   \   000000EA   0x4282             CMP      R2,R0
   \   000000EC   0xBF34             ITE      CC 
   \   000000EE   0x1E51             SUBCC    R1,R2,#+1
   \   000000F0   0x1C51             ADDCS    R1,R2,#+1
    976              {
    977                satDiff = state->acceleratedMoveRate - 1;
    978              } 
    979              else 
    980              {
    981                satDiff = state->acceleratedMoveRate + 1;
   \   000000F2   0xB2C9             UXTB     R1,R1
    982              }
    983          
    984              hue = hueUp ? hue + 1 : hue - 1;
   \   000000F4   0x2C00             CMP      R4,#+0
   \   000000F6   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000000FA   0xBF14             ITE      NE 
   \   000000FC   0x1C40             ADDNE    R0,R0,#+1
   \   000000FE   0x1E40             SUBEQ    R0,R0,#+1
   \   00000100   0x.... 0x....      BL       ?Subroutine8
    985              if (hue == 0xFF) 
   \                     ??CrossCallReturnLabel_12:
   \   00000104   0xD105             BNE.N    ??colorControlHueAndSaturationHandler_11
    986              {
    987                hue = hueUp ? 0x00 : 0xFE;
   \   00000106   0x2C00             CMP      R4,#+0
   \   00000108   0xBF14             ITE      NE 
   \   0000010A   0x2000             MOVNE    R0,#+0
   \   0000010C   0x20FE             MOVEQ    R0,#+254
   \   0000010E   0xF88D 0x0001      STRB     R0,[SP, #+1]
    988              }
    989              // Are we finished?
    990              if (hue == state->hueMoveToLevel) 
   \                     ??colorControlHueAndSaturationHandler_11:
   \   00000112   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000116   0x79B2             LDRB     R2,[R6, #+6]
   \   00000118   0x4290             CMP      R0,R2
   \   0000011A   0xD104             BNE.N    ??colorControlHueAndSaturationHandler_12
    991              {
    992                sat = state->saturationMoveToLevel;
   \   0000011C   0x79F0             LDRB     R0,[R6, #+7]
   \   0000011E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    993                proceed = FALSE;
   \                     ??colorControlHueAndSaturationHandler_7:
   \   00000122   0x2500             MOVS     R5,#+0
    994                goto set_values;
   \   00000124   0xE00E             B.N      ??colorControlHueAndSaturationHandler_8
    995              }
    996              sat = satUp ? sat + satDiff : sat - satDiff;
   \                     ??colorControlHueAndSaturationHandler_12:
   \   00000126   0x2F00             CMP      R7,#+0
   \   00000128   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000012C   0xBF14             ITE      NE 
   \   0000012E   0x1808             ADDNE    R0,R1,R0
   \   00000130   0x1A40             SUBEQ    R0,R0,R1
   \   00000132   0x.... 0x....      BL       ?Subroutine14
    997              if (sat == 0xFF) 
   \                     ??CrossCallReturnLabel_26:
   \   00000136   0xD105             BNE.N    ??colorControlHueAndSaturationHandler_8
    998              {
    999                sat = satUp ? 0x00 : 0xFE;
   \   00000138   0x2F00             CMP      R7,#+0
   \   0000013A   0xBF14             ITE      NE 
   \   0000013C   0x2000             MOVNE    R0,#+0
   \   0000013E   0x20FE             MOVEQ    R0,#+254
   \   00000140   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1000              }
   1001            }
   1002          
   1003          set_values:
   1004            colorControlSetHue(endpoint, hue);
   \                     ??colorControlHueAndSaturationHandler_8:
   \   00000144   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000148   0x4640             MOV      R0,R8
   \   0000014A   0x.... 0x....      BL       colorControlSetHue
   1005            colorControlSetSaturation(endpoint, sat);
   \   0000014E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000152   0x4640             MOV      R0,R8
   \   00000154   0x.... 0x....      BL       colorControlSetSaturation
   1006            return proceed;
   \   00000158   0x4628             MOV      R0,R5
   \                     ??colorControlHueAndSaturationHandler_10:
   \   0000015A   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   1007          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   0x........         DC32     stateTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine19_0:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "no color mode attribute">`
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      B.W      emberAfPrintln

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: could not read c...">`:
   \   00000000   0x45 0x52          DC8 "ERR: could not read current hue %x"
   \              0x52 0x3A    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x68 0x75    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: could not read c...">_1`:
   \   00000000   0x45 0x52          DC8 "ERR: could not read current saturation %x"
   \              0x52 0x3A    
   \              0x20 0x63    
   \              0x6F 0x75    
   \              0x6C 0x64    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x20    
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x73 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: unknown color co...">`:
   \   00000000   0x45 0x52          DC8 "ERR: unknown color control command."
   \              0x52 0x3A    
   \              0x20 0x75    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x20 0x63    
   \              0x6F 0x6C    
   \              0x6F 0x72    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: writing current ...">`:
   \   00000000   0x45 0x52          DC8 "ERR: writing current hue %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x75 0x65    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "hue=%x">`:
   \   00000000   0x68 0x75          DC8 "hue=%x"
   \              0x65 0x3D    
   \              0x25 0x78    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: writing current ...">_1`:
   \   00000000   0x45 0x52          DC8 "ERR: writing current saturation %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "saturation=%x">`:
   \   00000000   0x73 0x61          DC8 "saturation=%x"
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x3D 0x25    
   \              0x78 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "no color mode attribute">`:
   \   00000000   0x6E 0x6F          DC8 "no color mode attribute"
   \              0x20 0x63    
   \              0x6F 0x6C    
   \              0x6F 0x72    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x61 0x74    
   \              0x74 0x72    
   \              0x69 0x62    
   \              0x75 0x74    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: reading current ...">`:
   \   00000000   0x45 0x52          DC8 "ERR: reading current hue %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x68    
   \              0x75 0x65    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERR: reading current ...">_1`:
   \   00000000   0x45 0x52          DC8 "ERR: reading current saturation %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: MoveToH...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: MoveToHue (%x, %x, %2x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x48 0x75    
   \              0x65 0x20    
   \              0x28 0x25    
   \              0x78 0x2C    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x25    
   \              0x32 0x78    
   \              0x29 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: MoveHue...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: MoveHue (%x, %x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x48 0x75    
   \              0x65 0x20    
   \              0x28 0x25    
   \              0x78 0x2C    
   \              0x20 0x25    
   \              0x78 0x29    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: StepHue...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: StepHue (%x, %x, %x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x53 0x74    
   \              0x65 0x70    
   \              0x48 0x75    
   \              0x65 0x20    
   \              0x28 0x25    
   \              0x78 0x2C    
   \              0x20 0x25    
   \              0x78 0x2C    
   \              0x20 0x25    
   \              0x78 0x29    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: MoveToS...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: MoveToSaturation (%x, %2x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x54 0x6F    
   \              0x53 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x25 0x32    
   \              0x78 0x29    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: MoveSat...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: MoveSaturation (%x, %x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x53 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x25 0x78    
   \              0x29 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: StepSat...">`:
   \   00000000   0x43 0x6F          DC8 "ColorControl: StepSaturation (%x, %x, %x)"
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x53 0x74    
   \              0x65 0x70    
   \              0x53 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x25 0x78    
   \              0x29 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ColorControl: MoveToH...">_1`:
   \   00000000   0x43 0x6F          DC8 43H, 6FH, 6CH, 6FH, 72H, 43H, 6FH, 6EH
   \              0x6C 0x6F    
   \              0x72 0x43    
   \              0x6F 0x6E    
   \   00000008   0x74 0x72          DC8 74H, 72H, 6FH, 6CH, 3AH, 20H, 4DH, 6FH
   \              0x6F 0x6C    
   \              0x3A 0x20    
   \              0x4D 0x6F    
   \   00000010   0x76 0x65          DC8 76H, 65H, 54H, 6FH, 48H, 75H, 65H, 41H
   \              0x54 0x6F    
   \              0x48 0x75    
   \              0x65 0x41    
   \   00000018   0x6E 0x64          DC8 6EH, 64H, 53H, 61H, 74H, 75H, 72H, 61H
   \              0x53 0x61    
   \              0x74 0x75    
   \              0x72 0x61    
   \   00000020   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 20H, 28H, 25H, 78H
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x25 0x78    
   \   00000028   0x2C 0x20          DC8 2CH, 20H, 25H, 78H, 2CH, 20H, 25H, 32H
   \              0x25 0x78    
   \              0x2C 0x20    
   \              0x25 0x32    
   \   00000030   0x78 0x29          DC8 78H, 29H, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  colorControlHueAndSaturationHandler
             32 -> colorControlReadCurrentHue
             32 -> colorControlReadCurrentSaturation
             32 -> colorControlSetHue
             32 -> colorControlSetSaturation
             32 -> emberAfPrintln
             32 -> getColorControlState
       16  colorControlReadCurrentHue
             16 -> emberAfPrintln
             16 -> emberAfReadServerAttribute
       16  colorControlReadCurrentSaturation
             16 -> emberAfPrintln
             16 -> emberAfReadServerAttribute
       16  colorControlSetHue
             16 -> emberAfPrintln
             16 -> emberAfWriteServerAttribute
       16  colorControlSetSaturation
             16 -> emberAfPrintln
             16 -> emberAfWriteServerAttribute
       24  emberAfColorControlClusterMoveHueCallback
             24 -> emberAfDeactivateServerTick
             24 -> emberAfPrintln
             24 -> emberAfScheduleServerTick
             24 -> emberAfSendImmediateDefaultResponse
             24 -> getColorControlState
       24  emberAfColorControlClusterMoveSaturationCallback
             24 -> emberAfDeactivateServerTick
             24 -> emberAfPrintln
             24 -> emberAfScheduleServerTick
             24 -> emberAfSendImmediateDefaultResponse
             24 -> getColorControlState
       48  emberAfColorControlClusterMoveToHueAndSaturationCallback
             48 -> colorControlReadCurrentHue
             48 -> colorControlReadCurrentSaturation
             48 -> emberAfColorControlClusterMoveToHueCallback
             48 -> emberAfColorControlClusterMoveToSaturationCallback
             48 -> emberAfPluginColorControlIsColorSupportedCallback
             48 -> emberAfPrintln
             48 -> emberAfScheduleServerTick
             48 -> emberAfSendImmediateDefaultResponse
             48 -> getColorControlState
       40  emberAfColorControlClusterMoveToHueCallback
             40 -> colorControlReadCurrentHue
             40 -> colorControlReadCurrentSaturation
             40 -> emberAfPluginColorControlIsColorSupportedCallback
             40 -> emberAfPrintln
             40 -> emberAfScheduleServerTick
             40 -> emberAfSendImmediateDefaultResponse
             40 -> getColorControlState
       32  emberAfColorControlClusterMoveToSaturationCallback
             32 -> colorControlReadCurrentHue
             32 -> colorControlReadCurrentSaturation
             32 -> emberAfPluginColorControlIsColorSupportedCallback
             32 -> emberAfPrintln
             32 -> emberAfScheduleServerTick
             32 -> emberAfSendImmediateDefaultResponse
             32 -> getColorControlState
        8  emberAfColorControlClusterServerInitCallback
              8 -> getColorControlState
       24  emberAfColorControlClusterServerTickCallback
             24 -> colorControlHueAndSaturationHandler
             24 -> colorControlReadCurrentHue
             24 -> colorControlReadCurrentSaturation
             24 -> colorControlSetHue
             24 -> colorControlSetSaturation
             24 -> emberAfPrintln
             24 -> emberAfScheduleServerTick
             24 -> getColorControlState
       40  emberAfColorControlClusterStepHueCallback
             40 -> colorControlReadCurrentHue
             40 -> colorControlReadCurrentSaturation
             40 -> emberAfPluginColorControlIsColorSupportedCallback
             40 -> emberAfPrintln
             40 -> emberAfScheduleServerTick
             40 -> emberAfSendImmediateDefaultResponse
             40 -> getColorControlState
       40  emberAfColorControlClusterStepSaturationCallback
             40 -> colorControlReadCurrentHue
             40 -> colorControlReadCurrentSaturation
             40 -> emberAfPluginColorControlIsColorSupportedCallback
             40 -> emberAfPrintln
             40 -> emberAfScheduleServerTick
             40 -> emberAfSendImmediateDefaultResponse
             40 -> getColorControlState
        8  getColorControlState
              8 -> emberAfFindClusterServerEndpointIndex


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "ColorControl: MoveHue...">
      40  ?<Constant "ColorControl: MoveSat...">
      40  ?<Constant "ColorControl: MoveToH...">
      52  ?<Constant "ColorControl: MoveToH...">_1
      44  ?<Constant "ColorControl: MoveToS...">
      36  ?<Constant "ColorControl: StepHue...">
      44  ?<Constant "ColorControl: StepSat...">
      36  ?<Constant "ERR: could not read c...">
      44  ?<Constant "ERR: could not read c...">_1
      28  ?<Constant "ERR: reading current ...">
      36  ?<Constant "ERR: reading current ...">_1
      36  ?<Constant "ERR: unknown color co...">
      28  ?<Constant "ERR: writing current ...">
      36  ?<Constant "ERR: writing current ...">_1
       8  ?<Constant "hue=%x">
      24  ?<Constant "no color mode attribute">
      16  ?<Constant "saturation=%x">
       4  ??DataTable19
       4  ??DataTable19_1
       6  ??Subroutine18_0
      10  ??Subroutine19_0
       6  ?Subroutine0
      10  ?Subroutine1
       6  ?Subroutine10
      30  ?Subroutine11
       8  ?Subroutine12
       8  ?Subroutine13
      12  ?Subroutine14
       8  ?Subroutine15
       8  ?Subroutine16
      10  ?Subroutine17
       8  ?Subroutine2
      16  ?Subroutine3
      26  ?Subroutine4
      18  ?Subroutine5
      16  ?Subroutine6
      10  ?Subroutine7
      12  ?Subroutine8
       6  ?Subroutine9
     350  colorControlHueAndSaturationHandler
      38  colorControlReadCurrentHue
      36  colorControlReadCurrentSaturation
      44  colorControlSetHue
      42  colorControlSetSaturation
      82  emberAfColorControlClusterMoveHueCallback
      80  emberAfColorControlClusterMoveSaturationCallback
     284  emberAfColorControlClusterMoveToHueAndSaturationCallback
     206  emberAfColorControlClusterMoveToHueCallback
     146  emberAfColorControlClusterMoveToSaturationCallback
      14  emberAfColorControlClusterServerInitCallback
     246  emberAfColorControlClusterServerTickCallback
     172  emberAfColorControlClusterStepHueCallback
     172  emberAfColorControlClusterStepSaturationCallback
      30  getColorControlState
      20  stateTable

 
    20 bytes in section .bss
 2 764 bytes in section .text
 
 2 764 bytes of CODE memory
    20 bytes of DATA memory

Errors: none
Warnings: none
