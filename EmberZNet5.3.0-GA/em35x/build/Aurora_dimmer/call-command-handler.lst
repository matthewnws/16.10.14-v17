###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\call-command-handler.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\call-command-handler.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"call-command-handler.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\call-command-handler.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\call-command-handler.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\call-command-handler.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This is a set of generated functions that parse the
      6          // the incomming message, and call appropriate command handler.
      7          
      8          
      9          
     10          #include PLATFORM_HEADER
     11          #ifdef EZSP_HOST
     12          // Includes needed for ember related functions for the EZSP host
     13          #include "stack/include/error.h"
     14          #include "stack/include/ember-types.h"
     15          #include "app/util/ezsp/ezsp-protocol.h"
     16          #include "app/util/ezsp/ezsp.h"
     17          #include "app/util/ezsp/ezsp-utils.h"
     18          #include "app/util/ezsp/serial-interface.h"
     19          #else
     20          // Includes needed for ember related functions for the EM250
     21          #include "stack/include/ember.h"
     22          #endif // EZSP_HOST
     23          
     24          #include "app/framework/util/util.h"
     25          #include "af-structs.h"
     26          #include "call-command-handler.h"
     27          #include "command-id.h"
     28          #include "callback.h"
     29          

   \                                 In section .text, align 2, keep-with-next
     30          static EmberAfStatus status(boolean wasHandled, boolean clusterExists, boolean mfgSpecific)
     31          {
     32            if (wasHandled) {
   \                     status: (+1)
   \   00000000   0xB108             CBZ.N    R0,??status_0
     33              return EMBER_ZCL_STATUS_SUCCESS;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x4770             BX       LR
     34            } else if (mfgSpecific) {
   \                     ??status_0: (+1)
   \   00000006   0xB10A             CBZ.N    R2,??status_1
     35              return EMBER_ZCL_STATUS_UNSUP_MANUF_CLUSTER_COMMAND;
   \   00000008   0x2083             MOVS     R0,#+131
   \   0000000A   0x4770             BX       LR
     36            } else if (clusterExists) {
     37              return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
     38            } else {
     39              return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??status_1: (+1)
   \   0000000C   0x2081             MOVS     R0,#+129
   \   0000000E   0x4770             BX       LR               ;; return
     40            }
     41          }
     42          
     43          // Main command parsing controller.

   \                                 In section .text, align 2, keep-with-next
     44          EmberAfStatus emberAfClusterSpecificCommandParse(EmberAfClusterCommand *cmd)
     45          {
   \                     emberAfClusterSpecificCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     46            if (cmd->direction == ZCL_DIRECTION_SERVER_TO_CLIENT
     47                && emberAfContainsClient(cmd->apsFrame->destinationEndpoint,
     48                                         cmd->apsFrame->clusterId)) {
   \   00000004   0x7D60             LDRB     R0,[R4, #+21]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD10D             BNE.N    ??emberAfClusterSpecificCommandParse_0
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x8841             LDRH     R1,[R0, #+2]
   \   0000000E   0x7940             LDRB     R0,[R0, #+5]
   \   00000010   0x.... 0x....      BL       emberAfContainsClient
   \   00000014   0xB138             CBZ.N    R0,??emberAfClusterSpecificCommandParse_0
     49              switch (cmd->apsFrame->clusterId) {
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0x8840             LDRH     R0,[R0, #+2]
   \   0000001A   0x2803             CMP      R0,#+3
   \   0000001C   0xD143             BNE.N    ??emberAfClusterSpecificCommandParse_1
     50              case ZCL_IDENTIFY_CLUSTER_ID:
     51                return emberAfIdentifyClusterClientCommandParse(cmd);
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x....             B.N      emberAfIdentifyClusterClientCommandParse
     52              }
     53            } else if (cmd->direction == ZCL_DIRECTION_CLIENT_TO_SERVER
     54                       && emberAfContainsServer(cmd->apsFrame->destinationEndpoint,
     55                                                cmd->apsFrame->clusterId)) {
   \                     ??emberAfClusterSpecificCommandParse_0: (+1)
   \   00000026   0x7D60             LDRB     R0,[R4, #+21]
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD13C             BNE.N    ??emberAfClusterSpecificCommandParse_1
   \   0000002C   0x6820             LDR      R0,[R4, #+0]
   \   0000002E   0x8841             LDRH     R1,[R0, #+2]
   \   00000030   0x7940             LDRB     R0,[R0, #+5]
   \   00000032   0x.... 0x....      BL       emberAfContainsServer
   \   00000036   0xB3B0             CBZ.N    R0,??emberAfClusterSpecificCommandParse_1
     56              switch (cmd->apsFrame->clusterId) {
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0x8840             LDRH     R0,[R0, #+2]
   \   0000003C   0x2803             CMP      R0,#+3
   \   0000003E   0xD012             BEQ.N    ??emberAfClusterSpecificCommandParse_2
   \   00000040   0x2804             CMP      R0,#+4
   \   00000042   0xD014             BEQ.N    ??emberAfClusterSpecificCommandParse_3
   \   00000044   0x2805             CMP      R0,#+5
   \   00000046   0xD016             BEQ.N    ??emberAfClusterSpecificCommandParse_4
   \   00000048   0x2806             CMP      R0,#+6
   \   0000004A   0xD018             BEQ.N    ??emberAfClusterSpecificCommandParse_5
   \   0000004C   0x2808             CMP      R0,#+8
   \   0000004E   0xD01A             BEQ.N    ??emberAfClusterSpecificCommandParse_6
   \   00000050   0xF5B0 0x7F40      CMP      R0,#+768
   \   00000054   0xD01B             BEQ.N    ??emberAfClusterSpecificCommandParse_7
   \   00000056   0xF5B0 0x6FC0      CMP      R0,#+1536
   \   0000005A   0xD01C             BEQ.N    ??emberAfClusterSpecificCommandParse_8
   \   0000005C   0xF240 0x7104      MOVW     R1,#+1796
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD01C             BEQ.N    ??emberAfClusterSpecificCommandParse_9
   \   00000064   0xE01F             B.N      ??emberAfClusterSpecificCommandParse_1
     57              case ZCL_IDENTIFY_CLUSTER_ID:
     58                return emberAfIdentifyClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_2: (+1)
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0xE8BD 0x4010      POP      {R4,LR}
   \   0000006C   0x....             B.N      emberAfIdentifyClusterServerCommandParse
     59              case ZCL_GROUPS_CLUSTER_ID:
     60                return emberAfGroupsClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_3: (+1)
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0xE8BD 0x4010      POP      {R4,LR}
   \   00000074   0x....             B.N      emberAfGroupsClusterServerCommandParse
     61              case ZCL_SCENES_CLUSTER_ID:
     62                return emberAfScenesClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_4: (+1)
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0xE8BD 0x4010      POP      {R4,LR}
   \   0000007C   0x....             B.N      emberAfScenesClusterServerCommandParse
     63              case ZCL_ON_OFF_CLUSTER_ID:
     64                return emberAfOnOffClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_5: (+1)
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0xE8BD 0x4010      POP      {R4,LR}
   \   00000084   0x....             B.N      emberAfOnOffClusterServerCommandParse
     65              case ZCL_LEVEL_CONTROL_CLUSTER_ID:
     66                return emberAfLevelControlClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_6: (+1)
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0xE8BD 0x4010      POP      {R4,LR}
   \   0000008C   0x....             B.N      emberAfLevelControlClusterServerCommandParse
     67              case ZCL_COLOR_CONTROL_CLUSTER_ID:
     68                return emberAfColorControlClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_7: (+1)
   \   0000008E   0x4620             MOV      R0,R4
   \   00000090   0xE8BD 0x4010      POP      {R4,LR}
   \   00000094   0x....             B.N      emberAfColorControlClusterServerCommandParse
     69              case ZCL_GENERIC_TUNNEL_CLUSTER_ID:
     70                return emberAfGenericTunnelClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_8: (+1)
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0xE8BD 0x4010      POP      {R4,LR}
   \   0000009C   0x....             B.N      emberAfGenericTunnelClusterServerCommandParse
     71              case ZCL_TUNNELING_CLUSTER_ID:
     72                return emberAfTunnelingClusterServerCommandParse(cmd);
   \                     ??emberAfClusterSpecificCommandParse_9: (+1)
   \   0000009E   0x4620             MOV      R0,R4
   \   000000A0   0xE8BD 0x4010      POP      {R4,LR}
   \   000000A4   0x....             B.N      emberAfTunnelingClusterServerCommandParse
     73              }
     74            }
     75            return status(FALSE, FALSE, cmd->mfgSpecific);
   \                     ??emberAfClusterSpecificCommandParse_1: (+1)
   \   000000A6   0x7BE2             LDRB     R2,[R4, #+15]
   \   000000A8   0xE8BD 0x4010      POP      {R4,LR}
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x....             B.N      status
     76          }
     77          
     78          // Cluster: Identify, client

   \                                 In section .text, align 2, keep-with-next
     79          EmberAfStatus emberAfIdentifyClusterClientCommandParse(EmberAfClusterCommand *cmd)
     80          {
   \                     emberAfIdentifyClusterClientCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
     81            boolean wasHandled = FALSE;
     82            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0xBF04             ITT      EQ 
   \   00000008   0x7CE1             LDRBEQ   R1,[R4, #+19]
   \   0000000A   0x2900             CMPEQ    R1,#+0
     83              switch (cmd->commandId) {
   \   0000000C   0xD108             BNE.N    ??emberAfIdentifyClusterClientCommandParse_0
     84              case ZCL_IDENTIFY_QUERY_RESPONSE_COMMAND_ID:
     85                {
     86                  int16u payloadOffset = cmd->payloadStartIndex;
   \   0000000E   0x.... 0x....      BL       ?Subroutine3
     87                  int16u timeout;  // Ver.: always
     88                  // Command is fixed length: 2
     89                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000012   0xDA01             BGE.N    ??emberAfIdentifyClusterClientCommandParse_1
   \   00000014   0x2080             MOVS     R0,#+128
   \   00000016   0xBD10             POP      {R4,PC}
     90                  timeout = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfIdentifyClusterClientCommandParse_1: (+1)
   \   00000018   0x.... 0x....      BL       ?Subroutine9
     91                  wasHandled = emberAfIdentifyClusterIdentifyQueryResponseCallback(timeout);
   \                     ??CrossCallReturnLabel_48: (+1)
   \   0000001C   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyQueryResponseCallback
     92                  break;
     93                }
     94              }
     95            }
     96            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterClientCommandParse_0: (+1)
   \   00000020   0x....             B.N      ?Subroutine0
     97          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x7BE2             LDRB     R2,[R4, #+15]
   \   00000002   0xE8BD 0x4010      POP      {R4,LR}
   \                     ??Subroutine0_0: (+1)
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x....             B.N      status

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x7D21             LDRB     R1,[R4, #+20]
   \   00000002   0x89A2             LDRH     R2,[R4, #+12]
   \   00000004   0x1C88             ADDS     R0,R1,#+2
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0x4770             BX       LR
     98          
     99          // Cluster: Identify, server

   \                                 In section .text, align 2, keep-with-next
    100          EmberAfStatus emberAfIdentifyClusterServerCommandParse(EmberAfClusterCommand *cmd)
    101          {
   \                     emberAfIdentifyClusterServerCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    102            boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
    103            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0xB979             CBNZ.N   R1,??emberAfIdentifyClusterServerCommandParse_0
    104              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB121             CBZ.N    R1,??emberAfIdentifyClusterServerCommandParse_1
   \   0000000E   0x2901             CMP      R1,#+1
   \   00000010   0xBF08             IT       EQ 
    105              case ZCL_IDENTIFY_COMMAND_ID:
    106                {
    107                  int16u payloadOffset = cmd->payloadStartIndex;
    108                  int16u identifyTime;  // Ver.: always
    109                  // Command is fixed length: 2
    110                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
    111                  identifyTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    112                  wasHandled = emberAfIdentifyClusterIdentifyCallback(identifyTime);
    113                  break;
    114                }
    115              case ZCL_IDENTIFY_QUERY_COMMAND_ID:
    116                {
    117                  // Command is fixed length: 0
    118                  wasHandled = emberAfIdentifyClusterIdentifyQueryCallback();
   \   00000012   0x.... 0x....      BLEQ     emberAfIdentifyClusterIdentifyQueryCallback
   \   00000016   0xE008             B.N      ??emberAfIdentifyClusterServerCommandParse_0
   \                     ??emberAfIdentifyClusterServerCommandParse_1: (+1)
   \   00000018   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000001C   0xDA01             BGE.N    ??emberAfIdentifyClusterServerCommandParse_2
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0xBD10             POP      {R4,PC}
   \                     ??emberAfIdentifyClusterServerCommandParse_2: (+1)
   \   00000022   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_47: (+1)
   \   00000026   0x.... 0x....      BL       emberAfIdentifyClusterIdentifyCallback
    119                  break;
    120                }
    121              }
    122            }
    123            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfIdentifyClusterServerCommandParse_0: (+1)
   \   0000002A                      REQUIRE ?Subroutine0
   \   0000002A                      ;; // Fall through to label ?Subroutine0
    124          }
    125          
    126          // Cluster: Groups, server

   \                                 In section .text, align 4, keep-with-next
    127          EmberAfStatus emberAfGroupsClusterServerCommandParse(EmberAfClusterCommand *cmd)
    128          {
   \                     emberAfGroupsClusterServerCommandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    129            boolean wasHandled = FALSE;
    130            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0xD14A             BNE.N    ??emberAfGroupsClusterServerCommandParse_1
    131              switch (cmd->commandId) {
   \   00000008   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000A   0x2905             CMP      R1,#+5
   \   0000000C   0xD847             BHI.N    ??emberAfGroupsClusterServerCommandParse_1
   \   0000000E   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfGroupsClusterServerCommandParse_0:
   \   00000012   0x03 0x14          DC8      0x3,0x14,0x1C,0x29
   \              0x1C 0x29    
   \   00000016   0x31 0x34          DC8      0x31,0x34
    132              case ZCL_ADD_GROUP_COMMAND_ID:
    133                {
    134                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_2: (+1)
   \   00000018   0x.... 0x....      BL       ?Subroutine14
    135                  int16u groupId;  // Ver.: always
    136                  int8u* groupName;  // Ver.: always
    137                  // Command is not a fixed length
    138                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_58: (+1)
   \   0000001C   0xDB37             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    139                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000001E   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000022   0x.... 0x....      BL       ?Subroutine12
    140                  payloadOffset += 2;
    141                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_55: (+1)
   \   00000026   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_18: (+1)
   \   0000002A   0xDB30             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    142                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000002C   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_51: (+1)
   \   00000030   0x4601             MOV      R1,R0
    143                  wasHandled = emberAfGroupsClusterAddGroupCallback(groupId,
    144                                                                    groupName);
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       emberAfGroupsClusterAddGroupCallback
    145                  break;
   \   00000038   0xE031             B.N      ??emberAfGroupsClusterServerCommandParse_1
    146                }
    147              case ZCL_VIEW_GROUP_COMMAND_ID:
    148                {
    149                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_4: (+1)
   \   0000003A   0x.... 0x....      BL       ?Subroutine3
    150                  int16u groupId;  // Ver.: always
    151                  // Command is fixed length: 2
    152                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_13: (+1)
   \   0000003E   0xDB26             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    153                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000040   0x.... 0x....      BL       ?Subroutine9
    154                  wasHandled = emberAfGroupsClusterViewGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_46: (+1)
   \   00000044   0x.... 0x....      BL       emberAfGroupsClusterViewGroupCallback
    155                  break;
   \   00000048   0xE029             B.N      ??emberAfGroupsClusterServerCommandParse_1
    156                }
    157              case ZCL_GET_GROUP_MEMBERSHIP_COMMAND_ID:
    158                {
    159                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_5: (+1)
   \   0000004A   0x7D20             LDRB     R0,[R4, #+20]
    160                  int8u groupCount;  // Ver.: always
    161                  int8u* groupList;  // Ver.: always
    162                  // Command is fixed length: 1
    163                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000004C   0x89A1             LDRH     R1,[R4, #+12]
   \   0000004E   0x1C42             ADDS     R2,R0,#+1
   \   00000050   0x4291             CMP      R1,R2
   \   00000052   0xDB1C             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    164                  groupCount = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    165                  payloadOffset += 1;
    166                  groupList = cmd->buffer + payloadOffset;
    167                  wasHandled = emberAfGroupsClusterGetGroupMembershipCallback(groupCount,
    168                                                                              groupList);
   \   00000054   0x68A2             LDR      R2,[R4, #+8]
   \   00000056   0x1C41             ADDS     R1,R0,#+1
   \   00000058   0xB289             UXTH     R1,R1
   \   0000005A   0x5C80             LDRB     R0,[R0, R2]
   \   0000005C   0x1889             ADDS     R1,R1,R2
   \   0000005E   0x.... 0x....      BL       emberAfGroupsClusterGetGroupMembershipCallback
    169                  break;
   \   00000062   0xE01C             B.N      ??emberAfGroupsClusterServerCommandParse_1
    170                }
    171              case ZCL_REMOVE_GROUP_COMMAND_ID:
    172                {
    173                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_6: (+1)
   \   00000064   0x.... 0x....      BL       ?Subroutine3
    174                  int16u groupId;  // Ver.: always
    175                  // Command is fixed length: 2
    176                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_14: (+1)
   \   00000068   0xDB11             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    177                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000006A   0x.... 0x....      BL       ?Subroutine9
    178                  wasHandled = emberAfGroupsClusterRemoveGroupCallback(groupId);
   \                     ??CrossCallReturnLabel_45: (+1)
   \   0000006E   0x.... 0x....      BL       emberAfGroupsClusterRemoveGroupCallback
    179                  break;
   \   00000072   0xE014             B.N      ??emberAfGroupsClusterServerCommandParse_1
    180                }
    181              case ZCL_REMOVE_ALL_GROUPS_COMMAND_ID:
    182                {
    183                  // Command is fixed length: 0
    184                  wasHandled = emberAfGroupsClusterRemoveAllGroupsCallback();
   \                     ??emberAfGroupsClusterServerCommandParse_7: (+1)
   \   00000074   0x.... 0x....      BL       emberAfGroupsClusterRemoveAllGroupsCallback
    185                  break;
   \   00000078   0xE011             B.N      ??emberAfGroupsClusterServerCommandParse_1
    186                }
    187              case ZCL_ADD_GROUP_IF_IDENTIFYING_COMMAND_ID:
    188                {
    189                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfGroupsClusterServerCommandParse_8: (+1)
   \   0000007A   0x.... 0x....      BL       ?Subroutine14
    190                  int16u groupId;  // Ver.: always
    191                  int8u* groupName;  // Ver.: always
    192                  // Command is not a fixed length
    193                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_59: (+1)
   \   0000007E   0xDB06             BLT.N    ??emberAfGroupsClusterServerCommandParse_3
    194                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000080   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_38: (+1)
   \   00000084   0x.... 0x....      BL       ?Subroutine12
    195                  payloadOffset += 2;
    196                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_54: (+1)
   \   00000088   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000008C   0xDA01             BGE.N    ??emberAfGroupsClusterServerCommandParse_9
   \                     ??emberAfGroupsClusterServerCommandParse_3: (+1)
   \   0000008E   0x2080             MOVS     R0,#+128
   \   00000090   0xBD70             POP      {R4-R6,PC}
    197                  groupName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGroupsClusterServerCommandParse_9: (+1)
   \   00000092   0x.... 0x....      BL       ?Subroutine10
    198                  wasHandled = emberAfGroupsClusterAddGroupIfIdentifyingCallback(groupId,
    199                                                                                 groupName);
   \                     ??CrossCallReturnLabel_50: (+1)
   \   00000096   0x4601             MOV      R1,R0
   \   00000098   0x4630             MOV      R0,R6
   \   0000009A   0x.... 0x....      BL       emberAfGroupsClusterAddGroupIfIdentifyingCallback
    200                  break;
    201                }
    202              }
    203            }
    204            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfGroupsClusterServerCommandParse_1: (+1)
   \   0000009E   0x7BE2             LDRB     R2,[R4, #+15]
   \   000000A0   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000A4   0x....             B.N      ??Subroutine0_0
    205          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12: (+1)
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x1CAD             ADDS     R5,R5,#+2
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xB2AD             UXTH     R5,R5
   \   00000008   0x1828             ADDS     R0,R5,R0
   \   0000000A   0x.... 0x....      B.W      emberAfStringLength

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x.... 0x....      B.W      emberAfGetString

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x89A2             LDRH     R2,[R4, #+12]
   \   00000002   0x1940             ADDS     R0,R0,R5
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14: (+1)
   \   00000000   0x7D25             LDRB     R5,[R4, #+20]
   \   00000002   0x89A2             LDRH     R2,[R4, #+12]
   \   00000004   0x1CA8             ADDS     R0,R5,#+2
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0x4770             BX       LR
    206          
    207          // Cluster: Scenes, server

   \                                 In section .text, align 4, keep-with-next
    208          EmberAfStatus emberAfScenesClusterServerCommandParse(EmberAfClusterCommand *cmd)
    209          {
   \                     emberAfScenesClusterServerCommandParse: (+1)
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    210            boolean wasHandled = FALSE;
    211            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000008   0xD143             BNE.N    ??emberAfScenesClusterServerCommandParse_1
    212              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0x2906             CMP      R1,#+6
   \   0000000E   0xD840             BHI.N    ??emberAfScenesClusterServerCommandParse_1
   \   00000010   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfScenesClusterServerCommandParse_0:
   \   00000014   0x04 0x40          DC8      0x4,0x40,0x4A,0x54
   \              0x4A 0x54    
   \   00000018   0x5C 0x66          DC8      0x5C,0x66,0x70,0x0
   \              0x70 0x00    
    213              case ZCL_ADD_SCENE_COMMAND_ID:
    214                {
    215                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_2: (+1)
   \   0000001C   0x7D27             LDRB     R7,[R4, #+20]
    216                  int16u groupId;  // Ver.: always
    217                  int8u sceneId;  // Ver.: always
    218                  int16u transitionTime;  // Ver.: always
    219                  int8u* sceneName;  // Ver.: always
    220                  int8u* extensionFieldSets;  // Ver.: always
    221                  // Command is not a fixed length
    222                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000020   0x1CB8             ADDS     R0,R7,#+2
   \   00000022   0x4282             CMP      R2,R0
   \   00000024   0xDB69             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    223                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000026   0x68A0             LDR      R0,[R4, #+8]
   \   00000028   0x4639             MOV      R1,R7
   \   0000002A   0x.... 0x....      BL       emberAfGetInt16u
    224                  payloadOffset += 2;
   \   0000002E   0x1CBF             ADDS     R7,R7,#+2
   \   00000030   0x4605             MOV      R5,R0
   \   00000032   0xB2BF             UXTH     R7,R7
    225                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000034   0x89A2             LDRH     R2,[R4, #+12]
   \   00000036   0x1C78             ADDS     R0,R7,#+1
   \   00000038   0x4282             CMP      R2,R0
   \   0000003A   0xDB5E             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    226                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000003C   0x68A0             LDR      R0,[R4, #+8]
   \   0000003E   0x5C3E             LDRB     R6,[R7, R0]
    227                  payloadOffset += 1;
   \   00000040   0x1C7F             ADDS     R7,R7,#+1
   \   00000042   0xB2BF             UXTH     R7,R7
    228                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000044   0x1CBB             ADDS     R3,R7,#+2
   \   00000046   0x429A             CMP      R2,R3
   \   00000048   0xDB57             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    229                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000004A   0x4639             MOV      R1,R7
   \   0000004C   0x.... 0x....      BL       emberAfGetInt16u
   \   00000050   0x4680             MOV      R8,R0
    230                  payloadOffset += 2;
   \   00000052   0x1CBF             ADDS     R7,R7,#+2
    231                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000054   0x68A0             LDR      R0,[R4, #+8]
   \   00000056   0xB2BF             UXTH     R7,R7
   \   00000058   0x1838             ADDS     R0,R7,R0
   \   0000005A   0x.... 0x....      BL       emberAfStringLength
   \   0000005E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000060   0x19C0             ADDS     R0,R0,R7
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x4282             CMP      R2,R0
   \   00000066   0xDB48             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    232                  sceneName = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000068   0x68A0             LDR      R0,[R4, #+8]
   \   0000006A   0x4639             MOV      R1,R7
   \   0000006C   0x.... 0x....      BL       emberAfGetString
   \   00000070   0x4681             MOV      R9,R0
    233                  payloadOffset += emberAfStringLength(cmd->buffer + payloadOffset) + 1;
   \   00000072   0x68A0             LDR      R0,[R4, #+8]
   \   00000074   0x1838             ADDS     R0,R7,R0
   \   00000076   0x.... 0x....      BL       emberAfStringLength
    234                  extensionFieldSets = cmd->buffer + payloadOffset;
    235                  wasHandled = emberAfScenesClusterAddSceneCallback(groupId,
    236                                                                    sceneId,
    237                                                                    transitionTime,
    238                                                                    sceneName,
    239                                                                    extensionFieldSets);
   \   0000007A   0x19C0             ADDS     R0,R0,R7
   \   0000007C   0x68A1             LDR      R1,[R4, #+8]
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0xB280             UXTH     R0,R0
   \   00000082   0x1840             ADDS     R0,R0,R1
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0x464B             MOV      R3,R9
   \   00000088   0x4642             MOV      R2,R8
   \   0000008A   0x4631             MOV      R1,R6
   \   0000008C   0x4628             MOV      R0,R5
   \   0000008E   0x.... 0x....      BL       emberAfScenesClusterAddSceneCallback
    240                  break;
   \                     ??emberAfScenesClusterServerCommandParse_1: (+1)
   \   00000092   0xE038             B.N      ??emberAfScenesClusterServerCommandParse_4
    241                }
    242              case ZCL_VIEW_SCENE_COMMAND_ID:
    243                {
    244                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_5: (+1)
   \   00000094   0x.... 0x....      BL       ?Subroutine5
    245                  int16u groupId;  // Ver.: always
    246                  int8u sceneId;  // Ver.: always
    247                  // Command is fixed length: 3
    248                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000098   0xDB2F             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    249                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000009A   0x.... 0x....      BL       ?Subroutine7
    250                  payloadOffset += 2;
    251                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    252                  wasHandled = emberAfScenesClusterViewSceneCallback(groupId,
    253                                                                     sceneId);
   \                     ??CrossCallReturnLabel_37: (+1)
   \   0000009E   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_61: (+1)
   \   000000A2   0x.... 0x....      BL       emberAfScenesClusterViewSceneCallback
    254                  break;
   \   000000A6   0xE02E             B.N      ??emberAfScenesClusterServerCommandParse_4
    255                }
    256              case ZCL_REMOVE_SCENE_COMMAND_ID:
    257                {
    258                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_6: (+1)
   \   000000A8   0x.... 0x....      BL       ?Subroutine5
    259                  int16u groupId;  // Ver.: always
    260                  int8u sceneId;  // Ver.: always
    261                  // Command is fixed length: 3
    262                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_22: (+1)
   \   000000AC   0xDB25             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    263                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000AE   0x.... 0x....      BL       ?Subroutine7
    264                  payloadOffset += 2;
    265                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    266                  wasHandled = emberAfScenesClusterRemoveSceneCallback(groupId,
    267                                                                       sceneId);
   \                     ??CrossCallReturnLabel_36: (+1)
   \   000000B2   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_62: (+1)
   \   000000B6   0x.... 0x....      BL       emberAfScenesClusterRemoveSceneCallback
    268                  break;
   \   000000BA   0xE024             B.N      ??emberAfScenesClusterServerCommandParse_4
    269                }
    270              case ZCL_REMOVE_ALL_SCENES_COMMAND_ID:
    271                {
    272                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_7: (+1)
   \   000000BC   0x.... 0x....      BL       ?Subroutine3
    273                  int16u groupId;  // Ver.: always
    274                  // Command is fixed length: 2
    275                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_15: (+1)
   \   000000C0   0xDB1B             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    276                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000C2   0x.... 0x....      BL       ?Subroutine9
    277                  wasHandled = emberAfScenesClusterRemoveAllScenesCallback(groupId);
   \                     ??CrossCallReturnLabel_44: (+1)
   \   000000C6   0x.... 0x....      BL       emberAfScenesClusterRemoveAllScenesCallback
    278                  break;
   \   000000CA   0xE01C             B.N      ??emberAfScenesClusterServerCommandParse_4
    279                }
    280              case ZCL_STORE_SCENE_COMMAND_ID:
    281                {
    282                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_8: (+1)
   \   000000CC   0x.... 0x....      BL       ?Subroutine5
    283                  int16u groupId;  // Ver.: always
    284                  int8u sceneId;  // Ver.: always
    285                  // Command is fixed length: 3
    286                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_23: (+1)
   \   000000D0   0xDB13             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    287                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000D2   0x.... 0x....      BL       ?Subroutine7
    288                  payloadOffset += 2;
    289                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    290                  wasHandled = emberAfScenesClusterStoreSceneCallback(groupId,
    291                                                                      sceneId);
   \                     ??CrossCallReturnLabel_35: (+1)
   \   000000D6   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_63: (+1)
   \   000000DA   0x.... 0x....      BL       emberAfScenesClusterStoreSceneCallback
    292                  break;
   \   000000DE   0xE012             B.N      ??emberAfScenesClusterServerCommandParse_4
    293                }
    294              case ZCL_RECALL_SCENE_COMMAND_ID:
    295                {
    296                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_9: (+1)
   \   000000E0   0x.... 0x....      BL       ?Subroutine5
    297                  int16u groupId;  // Ver.: always
    298                  int8u sceneId;  // Ver.: always
    299                  // Command is fixed length: 3
    300                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_24: (+1)
   \   000000E4   0xDB09             BLT.N    ??emberAfScenesClusterServerCommandParse_3
    301                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   000000E6   0x.... 0x....      BL       ?Subroutine7
    302                  payloadOffset += 2;
    303                  sceneId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    304                  wasHandled = emberAfScenesClusterRecallSceneCallback(groupId,
    305                                                                       sceneId);
   \                     ??CrossCallReturnLabel_34: (+1)
   \   000000EA   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_64: (+1)
   \   000000EE   0x.... 0x....      BL       emberAfScenesClusterRecallSceneCallback
    306                  break;
   \   000000F2   0xE008             B.N      ??emberAfScenesClusterServerCommandParse_4
    307                }
    308              case ZCL_GET_SCENE_MEMBERSHIP_COMMAND_ID:
    309                {
    310                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfScenesClusterServerCommandParse_10: (+1)
   \   000000F4   0x.... 0x....      BL       ?Subroutine3
    311                  int16u groupId;  // Ver.: always
    312                  // Command is fixed length: 2
    313                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_16: (+1)
   \   000000F8   0xDA01             BGE.N    ??emberAfScenesClusterServerCommandParse_11
   \                     ??emberAfScenesClusterServerCommandParse_3: (+1)
   \   000000FA   0x2080             MOVS     R0,#+128
   \   000000FC   0xE007             B.N      ??emberAfScenesClusterServerCommandParse_12
    314                  groupId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfScenesClusterServerCommandParse_11: (+1)
   \   000000FE   0x.... 0x....      BL       ?Subroutine9
    315                  wasHandled = emberAfScenesClusterGetSceneMembershipCallback(groupId);
   \                     ??CrossCallReturnLabel_43: (+1)
   \   00000102   0x.... 0x....      BL       emberAfScenesClusterGetSceneMembershipCallback
    316                  break;
    317                }
    318              }
    319            }
    320            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfScenesClusterServerCommandParse_4: (+1)
   \   00000106   0x7BE2             LDRB     R2,[R4, #+15]
   \   00000108   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000010C   0x....             B.N      ??Subroutine0_0
   \                     ??emberAfScenesClusterServerCommandParse_12: (+1)
   \   0000010E   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    321          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15: (+1)
   \   00000000   0x68A1             LDR      R1,[R4, #+8]
   \   00000002   0x1CAA             ADDS     R2,R5,#+2
   \   00000004   0xB292             UXTH     R2,R2
   \   00000006   0x5C51             LDRB     R1,[R2, R1]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x7D25             LDRB     R5,[R4, #+20]
   \   00000002   0x89A2             LDRH     R2,[R4, #+12]
   \   00000004   0x1CE8             ADDS     R0,R5,#+3
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0x4770             BX       LR
    322          
    323          // Cluster: On/off, server

   \                                 In section .text, align 2, keep-with-next
    324          EmberAfStatus emberAfOnOffClusterServerCommandParse(EmberAfClusterCommand *cmd)
    325          {
   \                     emberAfOnOffClusterServerCommandParse: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    326            boolean wasHandled = FALSE;
   \   00000004   0x2000             MOVS     R0,#+0
    327            if (!cmd->mfgSpecific) {
   \   00000006   0x7BE1             LDRB     R1,[R4, #+15]
   \   00000008   0xB969             CBNZ.N   R1,??emberAfOnOffClusterServerCommandParse_0
    328              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB119             CBZ.N    R1,??emberAfOnOffClusterServerCommandParse_1
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD007             BEQ.N    ??emberAfOnOffClusterServerCommandParse_2
   \   00000012   0xD303             BCC.N    ??emberAfOnOffClusterServerCommandParse_3
   \   00000014   0xE007             B.N      ??emberAfOnOffClusterServerCommandParse_0
    329              case ZCL_OFF_COMMAND_ID:
    330                {
    331                  // Command is fixed length: 0
    332                  wasHandled = emberAfOnOffClusterOffCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_1: (+1)
   \   00000016   0x.... 0x....      BL       emberAfOnOffClusterOffCallback
    333                  break;
   \   0000001A   0xE004             B.N      ??emberAfOnOffClusterServerCommandParse_0
    334                }
    335              case ZCL_ON_COMMAND_ID:
    336                {
    337                  // Command is fixed length: 0
    338                  wasHandled = emberAfOnOffClusterOnCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_3: (+1)
   \   0000001C   0x.... 0x....      BL       emberAfOnOffClusterOnCallback
    339                  break;
   \   00000020   0xE001             B.N      ??emberAfOnOffClusterServerCommandParse_0
    340                }
    341              case ZCL_TOGGLE_COMMAND_ID:
    342                {
    343                  // Command is fixed length: 0
    344                  wasHandled = emberAfOnOffClusterToggleCallback();
   \                     ??emberAfOnOffClusterServerCommandParse_2: (+1)
   \   00000022   0x.... 0x....      BL       emberAfOnOffClusterToggleCallback
    345                  break;
    346                }
    347              }
    348            }
    349            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfOnOffClusterServerCommandParse_0: (+1)
   \   00000026   0x....             B.N      ?Subroutine0
    350          }
    351          
    352          // Cluster: Level Control, server

   \                                 In section .text, align 4, keep-with-next
    353          EmberAfStatus emberAfLevelControlClusterServerCommandParse(EmberAfClusterCommand *cmd)
    354          {
   \                     emberAfLevelControlClusterServerCommandParse: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    355            boolean wasHandled = FALSE;
    356            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000006   0xD155             BNE.N    ??emberAfLevelControlClusterServerCommandParse_1
    357              switch (cmd->commandId) {
   \   00000008   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000A   0x2907             CMP      R1,#+7
   \   0000000C   0xD852             BHI.N    ??emberAfLevelControlClusterServerCommandParse_1
   \   0000000E   0xE8DF 0xF001      TBB      [PC, R1]
   \                     ??emberAfLevelControlClusterServerCommandParse_0:
   \   00000012   0x04 0x10          DC8      0x4,0x10,0x1A,0x27
   \              0x1A 0x27    
   \   00000016   0x2A 0x36          DC8      0x2A,0x36,0x40,0x4F
   \              0x40 0x4F    
    358              case ZCL_MOVE_TO_LEVEL_COMMAND_ID:
    359                {
    360                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_2: (+1)
   \   0000001A   0x7D21             LDRB     R1,[R4, #+20]
    361                  int8u level;  // Ver.: always
    362                  int16u transitionTime;  // Ver.: always
    363                  // Command is fixed length: 3
    364                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001C   0x89A2             LDRH     R2,[R4, #+12]
   \   0000001E   0x1CC8             ADDS     R0,R1,#+3
   \   00000020   0x4282             CMP      R2,R0
   \   00000022   0xDB3B             BLT.N    ??emberAfLevelControlClusterServerCommandParse_3
    365                  level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000024   0x.... 0x....      BL       ?Subroutine11
    366                  payloadOffset += 1;
    367                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    368                  wasHandled = emberAfLevelControlClusterMoveToLevelCallback(level,
    369                                                                             transitionTime);
   \                     ??CrossCallReturnLabel_53: (+1)
   \   00000028   0x4601             MOV      R1,R0
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       emberAfLevelControlClusterMoveToLevelCallback
    370                  break;
   \   00000030   0xE040             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    371                }
    372              case ZCL_MOVE_COMMAND_ID:
    373                {
    374                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_4: (+1)
   \   00000032   0x7D22             LDRB     R2,[R4, #+20]
    375                  int8u moveMode;  // Ver.: always
    376                  int8u rate;  // Ver.: always
    377                  // Command is fixed length: 2
    378                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000034   0x89A0             LDRH     R0,[R4, #+12]
   \   00000036   0x1C91             ADDS     R1,R2,#+2
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xDB2F             BLT.N    ??emberAfLevelControlClusterServerCommandParse_3
    379                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    380                  payloadOffset += 1;
    381                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    382                  wasHandled = emberAfLevelControlClusterMoveCallback(moveMode,
    383                                                                      rate);
   \   0000003C   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_56: (+1)
   \   00000040   0x.... 0x....      BL       emberAfLevelControlClusterMoveCallback
    384                  break;
   \   00000044   0xE036             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    385                }
    386              case ZCL_STEP_COMMAND_ID:
    387                {
    388                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_5: (+1)
   \   00000046   0x7D21             LDRB     R1,[R4, #+20]
    389                  int8u stepMode;  // Ver.: always
    390                  int8u stepSize;  // Ver.: always
    391                  int16u transitionTime;  // Ver.: always
    392                  // Command is fixed length: 4
    393                  if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000048   0x89A2             LDRH     R2,[R4, #+12]
   \   0000004A   0x1D08             ADDS     R0,R1,#+4
   \   0000004C   0x4282             CMP      R2,R0
   \   0000004E   0xDB25             BLT.N    ??emberAfLevelControlClusterServerCommandParse_3
    394                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000050   0x.... 0x....      BL       ?Subroutine8
    395                  payloadOffset += 1;
    396                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    397                  payloadOffset += 1;
    398                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    399                  wasHandled = emberAfLevelControlClusterStepCallback(stepMode,
    400                                                                      stepSize,
    401                                                                      transitionTime);
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000054   0x4602             MOV      R2,R0
   \   00000056   0x4631             MOV      R1,R6
   \   00000058   0x4628             MOV      R0,R5
   \   0000005A   0x.... 0x....      BL       emberAfLevelControlClusterStepCallback
    402                  break;
   \   0000005E   0xE029             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    403                }
    404              case ZCL_STOP_COMMAND_ID:
    405                {
    406                  // Command is fixed length: 0
    407                  wasHandled = emberAfLevelControlClusterStopCallback();
   \                     ??emberAfLevelControlClusterServerCommandParse_6: (+1)
   \   00000060   0x.... 0x....      BL       emberAfLevelControlClusterStopCallback
    408                  break;
   \   00000064   0xE026             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    409                }
    410              case ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID:
    411                {
    412                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_7: (+1)
   \   00000066   0x7D21             LDRB     R1,[R4, #+20]
    413                  int8u level;  // Ver.: always
    414                  int16u transitionTime;  // Ver.: always
    415                  // Command is fixed length: 3
    416                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000068   0x89A2             LDRH     R2,[R4, #+12]
   \   0000006A   0x1CC8             ADDS     R0,R1,#+3
   \   0000006C   0x4282             CMP      R2,R0
   \   0000006E   0xDB15             BLT.N    ??emberAfLevelControlClusterServerCommandParse_3
    417                  level = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000070   0x.... 0x....      BL       ?Subroutine11
    418                  payloadOffset += 1;
    419                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??CrossCallReturnLabel_52: (+1)
   \   00000074   0x4601             MOV      R1,R0
    420                  wasHandled = emberAfLevelControlClusterMoveToLevelWithOnOffCallback(level,
    421                                                                                      transitionTime);
   \   00000076   0x4628             MOV      R0,R5
   \   00000078   0x.... 0x....      BL       emberAfLevelControlClusterMoveToLevelWithOnOffCallback
    422                  break;
   \   0000007C   0xE01A             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    423                }
    424              case ZCL_MOVE_WITH_ON_OFF_COMMAND_ID:
    425                {
    426                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_8: (+1)
   \   0000007E   0x7D22             LDRB     R2,[R4, #+20]
    427                  int8u moveMode;  // Ver.: always
    428                  int8u rate;  // Ver.: always
    429                  // Command is fixed length: 2
    430                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000080   0x89A0             LDRH     R0,[R4, #+12]
   \   00000082   0x1C91             ADDS     R1,R2,#+2
   \   00000084   0x4288             CMP      R0,R1
   \   00000086   0xDB09             BLT.N    ??emberAfLevelControlClusterServerCommandParse_3
    431                  moveMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    432                  payloadOffset += 1;
    433                  rate = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    434                  wasHandled = emberAfLevelControlClusterMoveWithOnOffCallback(moveMode,
    435                                                                               rate);
   \   00000088   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_57: (+1)
   \   0000008C   0x.... 0x....      BL       emberAfLevelControlClusterMoveWithOnOffCallback
    436                  break;
   \   00000090   0xE010             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    437                }
    438              case ZCL_STEP_WITH_ON_OFF_COMMAND_ID:
    439                {
    440                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfLevelControlClusterServerCommandParse_9: (+1)
   \   00000092   0x7D21             LDRB     R1,[R4, #+20]
    441                  int8u stepMode;  // Ver.: always
    442                  int8u stepSize;  // Ver.: always
    443                  int16u transitionTime;  // Ver.: always
    444                  // Command is fixed length: 4
    445                  if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000094   0x89A2             LDRH     R2,[R4, #+12]
   \   00000096   0x1D08             ADDS     R0,R1,#+4
   \   00000098   0x4282             CMP      R2,R0
   \   0000009A   0xDA01             BGE.N    ??emberAfLevelControlClusterServerCommandParse_10
   \                     ??emberAfLevelControlClusterServerCommandParse_3: (+1)
   \   0000009C   0x2080             MOVS     R0,#+128
   \   0000009E   0xBD70             POP      {R4-R6,PC}
    446                  stepMode = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfLevelControlClusterServerCommandParse_10: (+1)
   \   000000A0   0x.... 0x....      BL       ?Subroutine8
    447                  payloadOffset += 1;
    448                  stepSize = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    449                  payloadOffset += 1;
    450                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    451                  wasHandled = emberAfLevelControlClusterStepWithOnOffCallback(stepMode,
    452                                                                               stepSize,
    453                                                                               transitionTime);
   \                     ??CrossCallReturnLabel_40: (+1)
   \   000000A4   0x4602             MOV      R2,R0
   \   000000A6   0x4631             MOV      R1,R6
   \   000000A8   0x4628             MOV      R0,R5
   \   000000AA   0x.... 0x....      BL       emberAfLevelControlClusterStepWithOnOffCallback
    454                  break;
   \   000000AE   0xE001             B.N      ??emberAfLevelControlClusterServerCommandParse_1
    455                }
    456              case ZCL_STOP_WITH_ON_OFF_COMMAND_ID:
    457                {
    458                  // Command is fixed length: 0
    459                  wasHandled = emberAfLevelControlClusterStopWithOnOffCallback();
   \                     ??emberAfLevelControlClusterServerCommandParse_11: (+1)
   \   000000B0   0x.... 0x....      BL       emberAfLevelControlClusterStopWithOnOffCallback
    460                  break;
    461                }
    462              }
    463            }
    464            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfLevelControlClusterServerCommandParse_1: (+1)
   \   000000B4   0x7BE2             LDRB     R2,[R4, #+15]
   \   000000B6   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   000000BA   0x....             B.N      ??Subroutine0_0
    465          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x1C51             ADDS     R1,R2,#+1
   \   00000004   0xB289             UXTH     R1,R1
   \   00000006   0x5C09             LDRB     R1,[R1, R0]
   \   00000008   0x5C10             LDRB     R0,[R2, R0]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x5C0D             LDRB     R5,[R1, R0]
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \   00000006   0xB289             UXTH     R1,R1
   \   00000008   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x5C0D             LDRB     R5,[R1, R0]
   \   00000004   0x1C49             ADDS     R1,R1,#+1
   \   00000006   0xB289             UXTH     R1,R1
   \   00000008   0x5C0E             LDRB     R6,[R1, R0]
   \   0000000A   0x1C49             ADDS     R1,R1,#+1
   \   0000000C   0xB289             UXTH     R1,R1
   \   0000000E   0x.... 0x....      B.W      emberAfGetInt16u
    466          
    467          // Cluster: Color Control, server

   \                                 In section .text, align 2, keep-with-next
    468          EmberAfStatus emberAfColorControlClusterServerCommandParse(EmberAfClusterCommand *cmd)
    469          {
   \                     emberAfColorControlClusterServerCommandParse: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    470            boolean wasHandled = FALSE;
    471            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000006   0xD14A             BNE.N    ??emberAfColorControlClusterServerCommandParse_0
    472              switch (cmd->commandId) {
   \   00000008   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000A   0x2907             CMP      R1,#+7
   \   0000000C   0xD006             BEQ.N    ??emberAfColorControlClusterServerCommandParse_1
   \   0000000E   0xD346             BCC.N    ??emberAfColorControlClusterServerCommandParse_0
   \   00000010   0x2909             CMP      R1,#+9
   \   00000012   0xD023             BEQ.N    ??emberAfColorControlClusterServerCommandParse_2
   \   00000014   0xD313             BCC.N    ??emberAfColorControlClusterServerCommandParse_3
   \   00000016   0x290A             CMP      R1,#+10
   \   00000018   0xD031             BEQ.N    ??emberAfColorControlClusterServerCommandParse_4
   \   0000001A   0xE040             B.N      ??emberAfColorControlClusterServerCommandParse_0
    473              case ZCL_MOVE_TO_COLOR_COMMAND_ID:
    474                {
    475                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_1: (+1)
   \   0000001C   0x7D25             LDRB     R5,[R4, #+20]
    476                  int16u colorX;  // Ver.: always
    477                  int16u colorY;  // Ver.: always
    478                  int16u transitionTime;  // Ver.: always
    479                  // Command is fixed length: 6
    480                  if (cmd->bufLen < payloadOffset + 6) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000020   0x1DA8             ADDS     R0,R5,#+6
   \   00000022   0x4282             CMP      R2,R0
   \   00000024   0xDB30             BLT.N    ??emberAfColorControlClusterServerCommandParse_5
    481                  colorX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000026   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_33: (+1)
   \   0000002A   0x.... 0x....      BL       ?Subroutine6
    482                  payloadOffset += 2;
    483                  colorY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??CrossCallReturnLabel_27: (+1)
   \   0000002E   0x.... 0x....      BL       ?Subroutine2
    484                  payloadOffset += 2;
    485                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    486                  wasHandled = emberAfColorControlClusterMoveToColorCallback(colorX,
    487                                                                             colorY,
    488                                                                             transitionTime);
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000032   0x4602             MOV      R2,R0
   \   00000034   0x4639             MOV      R1,R7
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       emberAfColorControlClusterMoveToColorCallback
    489                  break;
   \   0000003C   0xE02F             B.N      ??emberAfColorControlClusterServerCommandParse_0
    490                }
    491              case ZCL_MOVE_COLOR_COMMAND_ID:
    492                {
    493                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_3: (+1)
   \   0000003E   0x7D25             LDRB     R5,[R4, #+20]
    494                  int16s rateX;  // Ver.: always
    495                  int16s rateY;  // Ver.: always
    496                  // Command is fixed length: 4
    497                  if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000040   0x89A2             LDRH     R2,[R4, #+12]
   \   00000042   0x1D28             ADDS     R0,R5,#+4
   \   00000044   0x4282             CMP      R2,R0
   \   00000046   0xDB1F             BLT.N    ??emberAfColorControlClusterServerCommandParse_5
    498                  rateX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000048   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_32: (+1)
   \   0000004C   0x4606             MOV      R6,R0
    499                  payloadOffset += 2;
    500                  rateY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000004E   0x.... 0x....      BL       ??Subroutine2_0
    501                  wasHandled = emberAfColorControlClusterMoveColorCallback(rateX,
    502                                                                           rateY);
   \                     ??CrossCallReturnLabel_8: (+1)
   \   00000052   0xB201             SXTH     R1,R0
   \   00000054   0xB230             SXTH     R0,R6
   \   00000056   0x.... 0x....      BL       emberAfColorControlClusterMoveColorCallback
    503                  break;
   \   0000005A   0xE020             B.N      ??emberAfColorControlClusterServerCommandParse_0
    504                }
    505              case ZCL_STEP_COLOR_COMMAND_ID:
    506                {
    507                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_2: (+1)
   \   0000005C   0x7D25             LDRB     R5,[R4, #+20]
    508                  int16s stepX;  // Ver.: always
    509                  int16s stepY;  // Ver.: always
    510                  int16u transitionTime;  // Ver.: always
    511                  // Command is fixed length: 6
    512                  if (cmd->bufLen < payloadOffset + 6) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000005E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000060   0x1DA8             ADDS     R0,R5,#+6
   \   00000062   0x4282             CMP      R2,R0
   \   00000064   0xDB10             BLT.N    ??emberAfColorControlClusterServerCommandParse_5
    513                  stepX = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000066   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_31: (+1)
   \   0000006A   0x.... 0x....      BL       ?Subroutine6
    514                  payloadOffset += 2;
    515                  stepY = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??CrossCallReturnLabel_26: (+1)
   \   0000006E   0x.... 0x....      BL       ?Subroutine2
    516                  payloadOffset += 2;
    517                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
    518                  wasHandled = emberAfColorControlClusterStepColorCallback(stepX,
    519                                                                           stepY,
    520                                                                           transitionTime);
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000072   0x4602             MOV      R2,R0
   \   00000074   0xB239             SXTH     R1,R7
   \   00000076   0xB230             SXTH     R0,R6
   \   00000078   0x.... 0x....      BL       emberAfColorControlClusterStepColorCallback
    521                  break;
   \   0000007C   0xE00F             B.N      ??emberAfColorControlClusterServerCommandParse_0
    522                }
    523              case ZCL_MOVE_TO_COLOR_TEMPERATURE_COMMAND_ID:
    524                {
    525                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfColorControlClusterServerCommandParse_4: (+1)
   \   0000007E   0x7D25             LDRB     R5,[R4, #+20]
    526                  int16u colorTemperature;  // Ver.: always
    527                  int16u transitionTime;  // Ver.: always
    528                  // Command is fixed length: 4
    529                  if (cmd->bufLen < payloadOffset + 4) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000080   0x89A2             LDRH     R2,[R4, #+12]
   \   00000082   0x1D28             ADDS     R0,R5,#+4
   \   00000084   0x4282             CMP      R2,R0
   \   00000086   0xDA01             BGE.N    ??emberAfColorControlClusterServerCommandParse_6
   \                     ??emberAfColorControlClusterServerCommandParse_5: (+1)
   \   00000088   0x2080             MOVS     R0,#+128
   \   0000008A   0xBDF2             POP      {R1,R4-R7,PC}
    530                  colorTemperature = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfColorControlClusterServerCommandParse_6: (+1)
   \   0000008C   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_30: (+1)
   \   00000090   0x4606             MOV      R6,R0
    531                  payloadOffset += 2;
    532                  transitionTime = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000092   0x.... 0x....      BL       ??Subroutine2_0
    533                  wasHandled = emberAfColorControlClusterMoveToColorTemperatureCallback(colorTemperature,
    534                                                                                        transitionTime);
   \                     ??CrossCallReturnLabel_7: (+1)
   \   00000096   0x4601             MOV      R1,R0
   \   00000098   0x4630             MOV      R0,R6
   \   0000009A   0x.... 0x....      BL       emberAfColorControlClusterMoveToColorTemperatureCallback
    535                  break;
    536                }
    537              }
    538            }
    539            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfColorControlClusterServerCommandParse_0: (+1)
   \   0000009E   0x7BE2             LDRB     R2,[R4, #+15]
   \   000000A0   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   000000A4   0x....             B.N      ??Subroutine0_0
    540          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x1CAD             ADDS     R5,R5,#+2
   \   00000004   0x89A2             LDRH     R2,[R4, #+12]
   \   00000006   0x68A0             LDR      R0,[R4, #+8]
   \   00000008   0xB2A9             UXTH     R1,R5
   \   0000000A   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4607             MOV      R7,R0
   \                     ??Subroutine2_0: (+1)
   \   00000002   0x89A2             LDRH     R2,[R4, #+12]
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0x1CA9             ADDS     R1,R5,#+2
   \   00000008   0xB289             UXTH     R1,R1
   \   0000000A   0x.... 0x....      B.W      emberAfGetInt16u
    541          
    542          // Cluster: Generic Tunnel, server

   \                                 In section .text, align 2, keep-with-next
    543          EmberAfStatus emberAfGenericTunnelClusterServerCommandParse(EmberAfClusterCommand *cmd)
    544          {
   \                     emberAfGenericTunnelClusterServerCommandParse: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine1
    545            boolean wasHandled = FALSE;
    546            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000006   0xBF04             ITT      EQ 
   \   00000008   0x7CE1             LDRBEQ   R1,[R4, #+19]
   \   0000000A   0x2900             CMPEQ    R1,#+0
    547              switch (cmd->commandId) {
   \   0000000C   0xD10D             BNE.N    ??emberAfGenericTunnelClusterServerCommandParse_0
    548              case ZCL_MATCH_PROTOCOL_ADDRESS_COMMAND_ID:
    549                {
    550                  int16u payloadOffset = cmd->payloadStartIndex;
   \   0000000E   0x7D25             LDRB     R5,[R4, #+20]
    551                  int8u* protocolAddress;  // Ver.: always
    552                  // Command is not a fixed length
    553                  if (cmd->bufLen < payloadOffset + emberAfStringLength(cmd->buffer + payloadOffset) + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   00000010   0x68A0             LDR      R0,[R4, #+8]
   \   00000012   0x1828             ADDS     R0,R5,R0
   \   00000014   0x.... 0x....      BL       emberAfStringLength
   \   00000018   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_20: (+1)
   \   0000001C   0xDA01             BGE.N    ??emberAfGenericTunnelClusterServerCommandParse_1
   \   0000001E   0x2080             MOVS     R0,#+128
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}
    554                  protocolAddress = emberAfGetString(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfGenericTunnelClusterServerCommandParse_1: (+1)
   \   00000022   0x.... 0x....      BL       ?Subroutine10
    555                  wasHandled = emberAfGenericTunnelClusterMatchProtocolAddressCallback(protocolAddress);
   \                     ??CrossCallReturnLabel_49: (+1)
   \   00000026   0x.... 0x....      BL       emberAfGenericTunnelClusterMatchProtocolAddressCallback
    556                  break;
    557                }
    558              }
    559            }
    560            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfGenericTunnelClusterServerCommandParse_0: (+1)
   \   0000002A   0x7BE2             LDRB     R2,[R4, #+15]
   \   0000002C   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000030   0x....             B.N      ??Subroutine0_0
    561          }
    562          
    563          // Cluster: Tunneling, server

   \                                 In section .text, align 2, keep-with-next
    564          EmberAfStatus emberAfTunnelingClusterServerCommandParse(EmberAfClusterCommand *cmd)
    565          {
   \                     emberAfTunnelingClusterServerCommandParse: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine1
    566            boolean wasHandled = FALSE;
    567            if (!cmd->mfgSpecific) {
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000008   0xD150             BNE.N    ??emberAfTunnelingClusterServerCommandParse_0
    568              switch (cmd->commandId) {
   \   0000000A   0x7CE1             LDRB     R1,[R4, #+19]
   \   0000000C   0xB129             CBZ.N    R1,??emberAfTunnelingClusterServerCommandParse_1
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD035             BEQ.N    ??emberAfTunnelingClusterServerCommandParse_2
   \   00000012   0xD32C             BCC.N    ??emberAfTunnelingClusterServerCommandParse_3
   \   00000014   0x2903             CMP      R1,#+3
   \   00000016   0xD03E             BEQ.N    ??emberAfTunnelingClusterServerCommandParse_4
   \   00000018   0xE048             B.N      ??emberAfTunnelingClusterServerCommandParse_0
    569              case ZCL_REQUEST_TUNNEL_COMMAND_ID:
    570                {
    571                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfTunnelingClusterServerCommandParse_1: (+1)
   \   0000001A   0x7D26             LDRB     R6,[R4, #+20]
    572                  int8u protocolId;  // Ver.: always
    573                  int16u manufacturerCode;  // Ver.: always
    574                  int8u flowControlSupport;  // Ver.: always
    575                  int16u maximumIncomingTransferSize;  // Ver.: since se-1.1a-07-5356-17
    576                  // Command is not a fixed length
    577                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000001C   0x89A2             LDRH     R2,[R4, #+12]
   \   0000001E   0x1C70             ADDS     R0,R6,#+1
   \   00000020   0x4282             CMP      R2,R0
   \   00000022   0xDB3B             BLT.N    ??emberAfTunnelingClusterServerCommandParse_5
    578                  protocolId = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000024   0x68A0             LDR      R0,[R4, #+8]
   \   00000026   0x5C35             LDRB     R5,[R6, R0]
    579                  payloadOffset += 1;
   \   00000028   0x1C76             ADDS     R6,R6,#+1
   \   0000002A   0xB2B6             UXTH     R6,R6
    580                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000002C   0x1CB3             ADDS     R3,R6,#+2
   \   0000002E   0x429A             CMP      R2,R3
   \   00000030   0xDB34             BLT.N    ??emberAfTunnelingClusterServerCommandParse_5
    581                  manufacturerCode = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000032   0x4631             MOV      R1,R6
   \   00000034   0x.... 0x....      BL       emberAfGetInt16u
    582                  payloadOffset += 2;
   \   00000038   0x1CB6             ADDS     R6,R6,#+2
   \   0000003A   0x4680             MOV      R8,R0
   \   0000003C   0xB2B6             UXTH     R6,R6
    583                  if (cmd->bufLen < payloadOffset + 1) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \   0000003E   0x89A2             LDRH     R2,[R4, #+12]
   \   00000040   0x1C70             ADDS     R0,R6,#+1
   \   00000042   0x4282             CMP      R2,R0
   \   00000044   0xDB2A             BLT.N    ??emberAfTunnelingClusterServerCommandParse_5
    584                  flowControlSupport = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000046   0x68A0             LDR      R0,[R4, #+8]
   \   00000048   0x5C37             LDRB     R7,[R6, R0]
    585                  payloadOffset += 1;
   \   0000004A   0x1C76             ADDS     R6,R6,#+1
   \   0000004C   0xB2B6             UXTH     R6,R6
    586                  if ( ( cmd->bufLen < payloadOffset + 2)) {
   \   0000004E   0x1CB3             ADDS     R3,R6,#+2
   \   00000050   0x429A             CMP      R2,R3
   \   00000052   0xBFB8             IT       LT 
   \   00000054   0xF64F 0x73FF      MOVWLT   R3,#+65535
    587                    // Argument is not always present:
    588                    // - it is present only in versions higher than: se-1.1a-07-5356-17
    589                    maximumIncomingTransferSize = 0xFFFF;
   \   00000058   0xDB03             BLT.N    ??emberAfTunnelingClusterServerCommandParse_6
    590                  } else {
    591                    maximumIncomingTransferSize = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   0000005A   0x4631             MOV      R1,R6
   \   0000005C   0x.... 0x....      BL       emberAfGetInt16u
   \   00000060   0x4603             MOV      R3,R0
    592                  }
    593                  wasHandled = emberAfTunnelingClusterRequestTunnelCallback(protocolId,
    594                                                                            manufacturerCode,
    595                                                                            flowControlSupport,
    596                                                                            maximumIncomingTransferSize);
   \                     ??emberAfTunnelingClusterServerCommandParse_6: (+1)
   \   00000062   0x463A             MOV      R2,R7
   \   00000064   0x4641             MOV      R1,R8
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       emberAfTunnelingClusterRequestTunnelCallback
    597                  break;
   \   0000006C   0xE01E             B.N      ??emberAfTunnelingClusterServerCommandParse_0
    598                }
    599              case ZCL_CLOSE_TUNNEL_COMMAND_ID:
    600                {
    601                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfTunnelingClusterServerCommandParse_3: (+1)
   \   0000006E   0x.... 0x....      BL       ?Subroutine3
    602                  int16u tunnelId;  // Ver.: always
    603                  // Command is fixed length: 2
    604                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_17: (+1)
   \   00000072   0xDB13             BLT.N    ??emberAfTunnelingClusterServerCommandParse_5
    605                  tunnelId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000074   0x.... 0x....      BL       ?Subroutine9
    606                  wasHandled = emberAfTunnelingClusterCloseTunnelCallback(tunnelId);
   \                     ??CrossCallReturnLabel_42: (+1)
   \   00000078   0x.... 0x....      BL       emberAfTunnelingClusterCloseTunnelCallback
    607                  break;
   \   0000007C   0xE016             B.N      ??emberAfTunnelingClusterServerCommandParse_0
    608                }
    609              case ZCL_TRANSFER_DATA_CLIENT_TO_SERVER_COMMAND_ID:
    610                {
    611                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfTunnelingClusterServerCommandParse_2: (+1)
   \   0000007E   0x.... 0x....      BL       ?Subroutine14
    612                  int16u tunnelId;  // Ver.: always
    613                  int8u* data;  // Ver.: always
    614                  // Command is fixed length: 2
    615                  if (cmd->bufLen < payloadOffset + 2) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_60: (+1)
   \   00000082   0xDB0B             BLT.N    ??emberAfTunnelingClusterServerCommandParse_5
    616                  tunnelId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \   00000084   0x.... 0x....      BL       ?Subroutine7
    617                  payloadOffset += 2;
    618                  data = cmd->buffer + payloadOffset;
    619                  wasHandled = emberAfTunnelingClusterTransferDataClientToServerCallback(tunnelId,
    620                                                                                         data);
   \                     ??CrossCallReturnLabel_29: (+1)
   \   00000088   0x68A1             LDR      R1,[R4, #+8]
   \   0000008A   0x1CAA             ADDS     R2,R5,#+2
   \   0000008C   0xB292             UXTH     R2,R2
   \   0000008E   0x1851             ADDS     R1,R2,R1
   \   00000090   0x.... 0x....      BL       emberAfTunnelingClusterTransferDataClientToServerCallback
    621                  break;
   \   00000094   0xE00A             B.N      ??emberAfTunnelingClusterServerCommandParse_0
    622                }
    623              case ZCL_TRANSFER_DATA_ERROR_CLIENT_TO_SERVER_COMMAND_ID:
    624                {
    625                  int16u payloadOffset = cmd->payloadStartIndex;
   \                     ??emberAfTunnelingClusterServerCommandParse_4: (+1)
   \   00000096   0x.... 0x....      BL       ?Subroutine5
    626                  int16u tunnelId;  // Ver.: always
    627                  int8u transferDataStatus;  // Ver.: always
    628                  // Command is fixed length: 3
    629                  if (cmd->bufLen < payloadOffset + 3) return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000009A   0xDA01             BGE.N    ??emberAfTunnelingClusterServerCommandParse_7
   \                     ??emberAfTunnelingClusterServerCommandParse_5: (+1)
   \   0000009C   0x2080             MOVS     R0,#+128
   \   0000009E   0xE009             B.N      ??emberAfTunnelingClusterServerCommandParse_8
    630                  tunnelId = emberAfGetInt16u(cmd->buffer, payloadOffset, cmd->bufLen);
   \                     ??emberAfTunnelingClusterServerCommandParse_7: (+1)
   \   000000A0   0x.... 0x....      BL       ?Subroutine7
    631                  payloadOffset += 2;
    632                  transferDataStatus = emberAfGetInt8u(cmd->buffer, payloadOffset, cmd->bufLen);
    633                  wasHandled = emberAfTunnelingClusterTransferDataErrorClientToServerCallback(tunnelId,
    634                                                                                              transferDataStatus);
   \                     ??CrossCallReturnLabel_28: (+1)
   \   000000A4   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_65: (+1)
   \   000000A8   0x.... 0x....      BL       emberAfTunnelingClusterTransferDataErrorClientToServerCallback
    635                  break;
    636                }
    637              }
    638            }
    639            return status(wasHandled, TRUE, cmd->mfgSpecific);
   \                     ??emberAfTunnelingClusterServerCommandParse_0: (+1)
   \   000000AC   0x7BE2             LDRB     R2,[R4, #+15]
   \   000000AE   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000B2   0x....             B.N      ??Subroutine0_0
   \                     ??emberAfTunnelingClusterServerCommandParse_8: (+1)
   \   000000B4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    640          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   emberAfClusterSpecificCommandParse
         8   -> emberAfContainsClient
         8   -> emberAfContainsServer
         0   -> status
      24   emberAfColorControlClusterServerCommandParse
        24   -> emberAfColorControlClusterMoveColorCallback
        24   -> emberAfColorControlClusterMoveToColorCallback
        24   -> emberAfColorControlClusterMoveToColorTemperatureCallback
        24   -> emberAfColorControlClusterStepColorCallback
        24   -> emberAfGetInt16u
         0   -> status
      16   emberAfGenericTunnelClusterServerCommandParse
        16   -> emberAfGenericTunnelClusterMatchProtocolAddressCallback
        16   -> emberAfGetString
        16   -> emberAfStringLength
         0   -> status
      16   emberAfGroupsClusterServerCommandParse
        16   -> emberAfGetInt16u
        16   -> emberAfGetString
        16   -> emberAfGroupsClusterAddGroupCallback
        16   -> emberAfGroupsClusterAddGroupIfIdentifyingCallback
        16   -> emberAfGroupsClusterGetGroupMembershipCallback
        16   -> emberAfGroupsClusterRemoveAllGroupsCallback
        16   -> emberAfGroupsClusterRemoveGroupCallback
        16   -> emberAfGroupsClusterViewGroupCallback
        16   -> emberAfStringLength
         0   -> status
       8   emberAfIdentifyClusterClientCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyQueryResponseCallback
         0   -> status
       8   emberAfIdentifyClusterServerCommandParse
         8   -> emberAfGetInt16u
         8   -> emberAfIdentifyClusterIdentifyCallback
         8   -> emberAfIdentifyClusterIdentifyQueryCallback
         0   -> status
      16   emberAfLevelControlClusterServerCommandParse
        16   -> emberAfGetInt16u
        16   -> emberAfLevelControlClusterMoveCallback
        16   -> emberAfLevelControlClusterMoveToLevelCallback
        16   -> emberAfLevelControlClusterMoveToLevelWithOnOffCallback
        16   -> emberAfLevelControlClusterMoveWithOnOffCallback
        16   -> emberAfLevelControlClusterStepCallback
        16   -> emberAfLevelControlClusterStepWithOnOffCallback
        16   -> emberAfLevelControlClusterStopCallback
        16   -> emberAfLevelControlClusterStopWithOnOffCallback
         0   -> status
       8   emberAfOnOffClusterServerCommandParse
         8   -> emberAfOnOffClusterOffCallback
         8   -> emberAfOnOffClusterOnCallback
         8   -> emberAfOnOffClusterToggleCallback
         0   -> status
      32   emberAfScenesClusterServerCommandParse
        32   -> emberAfGetInt16u
        32   -> emberAfGetString
        32   -> emberAfScenesClusterAddSceneCallback
        32   -> emberAfScenesClusterGetSceneMembershipCallback
        32   -> emberAfScenesClusterRecallSceneCallback
        32   -> emberAfScenesClusterRemoveAllScenesCallback
        32   -> emberAfScenesClusterRemoveSceneCallback
        32   -> emberAfScenesClusterStoreSceneCallback
        32   -> emberAfScenesClusterViewSceneCallback
        32   -> emberAfStringLength
         0   -> status
      24   emberAfTunnelingClusterServerCommandParse
        24   -> emberAfGetInt16u
        24   -> emberAfTunnelingClusterCloseTunnelCallback
        24   -> emberAfTunnelingClusterRequestTunnelCallback
        24   -> emberAfTunnelingClusterTransferDataClientToServerCallback
        24   -> emberAfTunnelingClusterTransferDataErrorClientToServerCallback
         0   -> status
       0   status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?Subroutine0
      10  ?Subroutine1
       8  ?Subroutine10
      12  ?Subroutine11
      14  ?Subroutine12
      12  ?Subroutine13
      10  ?Subroutine14
      10  ?Subroutine15
      14  ?Subroutine2
      10  ?Subroutine3
      10  ?Subroutine4
      10  ?Subroutine5
      14  ?Subroutine6
       8  ?Subroutine7
      18  ?Subroutine8
       6  ?Subroutine9
     178  emberAfClusterSpecificCommandParse
     166  emberAfColorControlClusterServerCommandParse
      50  emberAfGenericTunnelClusterServerCommandParse
     166  emberAfGroupsClusterServerCommandParse
      34  emberAfIdentifyClusterClientCommandParse
      42  emberAfIdentifyClusterServerCommandParse
     188  emberAfLevelControlClusterServerCommandParse
      40  emberAfOnOffClusterServerCommandParse
     274  emberAfScenesClusterServerCommandParse
     184  emberAfTunnelingClusterServerCommandParse
      16  status

 
 1 514 bytes in section .text
 
 1 514 bytes of CODE memory

Errors: none
Warnings: none
