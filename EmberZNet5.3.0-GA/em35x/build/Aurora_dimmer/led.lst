###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:18
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\led.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\led.c" -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"led.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\led.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\led.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.09.23 Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\micro\cortexm3\led.c
      1          /** @file hal/micro/cortexm3/led.c
      2           *  @brief LED manipulation routines; stack and example APIs
      3           *
      4           * <!-- Author(s): Brooks Barrett -->
      5           * <!-- Copyright 2007 by Ember Corporation. All rights reserved.       *80*-->
      6           */
      7          
      8          #include PLATFORM_HEADER
      9          #if !defined(MINIMAL_HAL) && defined(BOARD_HEADER)
     10            // full hal needs the board header to get pulled in
     11            #include "hal/micro/micro.h"
     12            #include BOARD_HEADER
     13          #endif
     14          #include "hal/micro/led.h"
     15          
     16          #define GPIO_PxCLR_BASE (GPIO_PACLR_ADDR)
     17          #define GPIO_PxSET_BASE (GPIO_PASET_ADDR)
     18          #define GPIO_PxOUT_BASE (GPIO_PAOUT_ADDR)
     19          // Each port is offset from the previous port by the same amount
     20          #define GPIO_Px_OFFSET  (GPIO_PBCFGL_ADDR-GPIO_PACFGL_ADDR)
     21          

   \                                 In section .text, align 2, keep-with-next
     22          void halSetLed(HalBoardLed led)
     23          {
   \                     halSetLed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     24          #if (!defined(MINIMAL_HAL) && !defined(BOOTLOADER) && defined(RHO_GPIO))
     25            if(led == RHO_GPIO && halGetRadioHoldOff()) { // Avoid Radio HoldOff conflict
   \   00000004   0x2C06             CMP      R4,#+6
   \   00000006   0xD102             BNE.N    ??halSetLed_0
   \   00000008   0x.... 0x....      BL       halGetRadioHoldOff
   \   0000000C   0xB930             CBNZ.N   R0,??halSetLed_1
     26              return;
     27            }
     28          #endif
     29            if(led/8 < 3) {
   \                     ??halSetLed_0: (+1)
   \   0000000E   0x08E0             LSRS     R0,R4,#+3
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xDA03             BGE.N    ??halSetLed_1
     30              *((volatile int32u *)(GPIO_PxCLR_BASE+(GPIO_Px_OFFSET*(led/8)))) = BIT(led&7);
   \   00000014   0x.... 0x....      BL       ?Subroutine0
     31            }
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000018   0x....             LDR.N    R2,??DataTable2  ;; 0x4000b014
   \   0000001A   0x5050             STR      R0,[R2, R1]
     32          }
   \                     ??halSetLed_1: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xF004 0x0107      AND      R1,R4,#0x7
   \   00000006   0x4088             LSLS     R0,R0,R1
   \   00000008   0x08E1             LSRS     R1,R4,#+3
   \   0000000A   0x0289             LSLS     R1,R1,#+10
   \   0000000C   0x4770             BX       LR
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void halClearLed(HalBoardLed led)
     35          {
   \                     halClearLed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     36          #if (!defined(MINIMAL_HAL) && !defined(BOOTLOADER) && defined(RHO_GPIO))
     37            if(led == RHO_GPIO && halGetRadioHoldOff()) { // Avoid Radio HoldOff conflict
   \   00000004   0x2C06             CMP      R4,#+6
   \   00000006   0xD102             BNE.N    ??halClearLed_0
   \   00000008   0x.... 0x....      BL       halGetRadioHoldOff
   \   0000000C   0xB930             CBNZ.N   R0,??halClearLed_1
     38              return;
     39            }
     40          #endif
     41            if(led/8 < 3) {
   \                     ??halClearLed_0: (+1)
   \   0000000E   0x08E0             LSRS     R0,R4,#+3
   \   00000010   0x2803             CMP      R0,#+3
   \   00000012   0xDA03             BGE.N    ??halClearLed_1
     42              *((volatile int32u *)(GPIO_PxSET_BASE+(GPIO_Px_OFFSET*(led/8)))) = BIT(led&7);
   \   00000014   0x.... 0x....      BL       ?Subroutine0
     43            }
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000018   0x....             LDR.N    R2,??DataTable2_1  ;; 0x4000b010
   \   0000001A   0x5050             STR      R0,[R2, R1]
     44          }
   \                     ??halClearLed_1: (+1)
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
     45          

   \                                 In section .text, align 2, keep-with-next
     46          void halToggleLed(HalBoardLed led)
     47          {
   \                     halToggleLed: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     48          #if (!defined(MINIMAL_HAL) && !defined(BOOTLOADER) && defined(RHO_GPIO))
     49            if(led == RHO_GPIO && halGetRadioHoldOff()) { // Avoid Radio HoldOff conflict
   \   00000004   0x2C06             CMP      R4,#+6
   \   00000006   0xD102             BNE.N    ??halToggleLed_0
   \   00000008   0x.... 0x....      BL       halGetRadioHoldOff
   \   0000000C   0xB990             CBNZ.N   R0,??halToggleLed_1
     50              return;
     51            }
     52          #endif
     53            //to avoid contention with other code using the other pins for other
     54            //purposes, we disable interrupts since this is a read-modify-write
     55            ATOMIC(
     56              if(led/8 < 3) {
     57                *((volatile int32u *)(GPIO_PxOUT_BASE+(GPIO_Px_OFFSET*(led/8)))) ^= BIT(led&7);
     58              }
     59            )
   \                     ??halToggleLed_0: (+1)
   \   0000000E   0x.... 0x....      BL       _disableBasePri
   \   00000012   0x08E1             LSRS     R1,R4,#+3
   \   00000014   0x2903             CMP      R1,#+3
   \   00000016   0xDA09             BGE.N    ??halToggleLed_2
   \   00000018   0x....             LDR.N    R2,??DataTable2_2  ;; 0x4000b00c
   \   0000001A   0xEB02 0x2181      ADD      R1,R2,R1, LSL #+10
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x680A             LDR      R2,[R1, #+0]
   \   00000022   0xF004 0x0407      AND      R4,R4,#0x7
   \   00000026   0x40A3             LSLS     R3,R3,R4
   \   00000028   0x405A             EORS     R2,R3,R2
   \   0000002A   0x600A             STR      R2,[R1, #+0]
   \                     ??halToggleLed_2: (+1)
   \   0000002C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000030   0x.... 0x....      B.W      _writeBasePri
   \                     ??halToggleLed_1: (+1)
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
     60          }
     61          
     62          #ifndef MINIMAL_HAL

   \                                 In section .text, align 2, keep-with-next
     63          void halStackIndicateActivity(boolean turnOn)
     64          {
     65            if(turnOn) {
   \                     halStackIndicateActivity: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF1C             ITT      NE 
     66              halSetLed(BOARD_ACTIVITY_LED);
   \   00000004   0x20FF             MOVNE    R0,#+255
   \   00000006   0x.... 0x....      BNE.W    halSetLed
     67            } else {
     68              halClearLed(BOARD_ACTIVITY_LED);
   \   0000000A   0x20FF             MOVS     R0,#+255
   \   0000000C   0x....             B.N      halClearLed
     69            }
     70          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4000B014         DC32     0x4000b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4000B010         DC32     0x4000b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4000B00C         DC32     0x4000b00c
     71          #endif //MINIMAL_HAL

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   halClearLed
         8   -> halGetRadioHoldOff
       8   halSetLed
         8   -> halGetRadioHoldOff
       0   halStackIndicateActivity
         0   -> halClearLed
         0   -> halSetLed
       8   halToggleLed
         8   -> _disableBasePri
         8   -> halGetRadioHoldOff


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
      14  ?Subroutine0
      30  halClearLed
      30  halSetLed
      14  halStackIndicateActivity
      54  halToggleLed

 
 154 bytes in section .text
 
 154 bytes of CODE memory

Errors: none
Warnings: none
