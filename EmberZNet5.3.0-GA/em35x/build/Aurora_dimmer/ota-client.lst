###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     19/Feb/2015  10:52:23 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client\ota-client.c       #
#    Command line =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client\ota-client.c -D    #
#                    "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Auro #
#                    ra_dimmer_tokens.h\"" -D "ZA_GENERATED_HEADER=\"app/buil #
#                    der/Aurora_dimmer/Aurora_dimmer.h\"" -D APP_BTL -D       #
#                    "BOARD_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_ #
#                    board_1.h\"" -D "PLATFORM_HEADER=\"hal/micro/cortexm3/co #
#                    mpiler/iar.h\"" -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D   #
#                    CORTEXM3_EM357 -D PHY_EM3XX -D                           #
#                    "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\ #
#                    "" -D "CONFIGURATION_HEADER=\"app/framework/util/config. #
#                    h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/A #
#                    urora_dimmer/Aurora_dimmer_endpoint_config.h\"" -D       #
#                    "__SOURCEFILE__=\"ota-client.c\"" -lC                    #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --diag_suppress Pa050 -o      #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --debug --endian=little       #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client\ -I                #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\ -I                      #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\ -I             #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\i #
#                    nclude\ -I C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZN #
#                    et5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\ -I  #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\stack\ -I       #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\ -I         #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\..\ -Ohz    #
#                    --use_c++_inline                                         #
#    List file    =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ota-client.lst                 #
#    Object file  =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ota-client.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\em35x\app\framework\plugin\ota-client\ota-client.c
      1          // *****************************************************************************
      2          // * ota-client.c
      3          // *
      4          // * Zigbee Over-the-air bootload cluster for upgrading firmware and 
      5          // * downloading device specific file.
      6          // * 
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          #include "app/framework/include/af.h"
     11          #include "callback.h"
     12          #include "app/framework/util/util.h"
     13          #include "app/framework/util/common.h"
     14          #include "app/framework/plugin/ota-common/ota.h"
     15          
     16          #include "app/framework/util/af-main.h"
     17          
     18          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     19          #include "app/framework/plugin/ota-client/ota-client.h"
     20          #include "app/framework/plugin/ota-client-policy/ota-client-policy.h"
     21          #include "ota-client-signature-verify.h"
     22          #include "ota-client-page-request.h"
     23          #include "app/framework/plugin/partner-link-key-exchange/partner-link-key-exchange.h"
     24          
     25          #if defined(EZSP_HOST)
     26            // For emberIeeeAddressRequest()
     27            #include "app/util/zigbee-framework/zigbee-device-host.h"
     28          #else
     29            #include "stack/include/ember.h"
     30          #endif
     31          
     32          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_SET_IMAGE_STAMP) \
     33              && !defined(EZSP_HOST) \
     34              && defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_STAMP_ATTRIBUTE) \
     35              && !defined(XAP2B)
     36              
     37              #define USE_IMAGE_STAMP
     38              #include "hal/micro/cortexm3/memmap.h"
     39              #include "hal/micro/cortexm3/memmap-tables.h"
     40          #endif
     41          
     42          //------------------------------------------------------------------------------
     43          // Globals
     44          
     45          enum BootloadState
     46          {
     47            BOOTLOAD_STATE_NONE,
     48            BOOTLOAD_STATE_DELAY,
     49            BOOTLOAD_STATE_DISCOVER_SERVER,
     50            BOOTLOAD_STATE_GET_SERVER_EUI,
     51            BOOTLOAD_STATE_OBTAIN_LINK_KEY,
     52            BOOTLOAD_STATE_QUERY_NEXT_IMAGE,
     53            BOOTLOAD_STATE_DOWNLOAD,
     54            BOOTLOAD_STATE_VERIFY_IMAGE,
     55            BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE,
     56            BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE,
     57          };
     58          typedef int8u BootloadState;
     59          
     60          static PGM_P bootloadStateNames[] = {
     61            "None",
     62            "Random Delay before start",
     63            "Discovering OTA Server",
     64            "Get OTA Server EUI",
     65            "Obtain link key",
     66            "Querying Next Image",
     67            "Downloading Image",
     68            "Verifying Image",
     69            "Waiting for Upgrade message",
     70            "Countdown to Upgrade",
     71          };
     72          
     73          // This relates the bootload state above to the status that is externally
     74          // reported via the attribute.

   \                                 In section .text, align 4, keep-with-next
     75          static PGM int8u bootloadStateToExternalState[] = {
   \                     bootloadStateToExternalState:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x01 0x02    
   \              0x03 0x04    
   \              0x00 0x00    
     76            OTA_UPGRADE_STATUS_NORMAL,
     77            OTA_UPGRADE_STATUS_NORMAL,
     78            OTA_UPGRADE_STATUS_NORMAL,
     79            OTA_UPGRADE_STATUS_NORMAL,
     80            OTA_UPGRADE_STATUS_NORMAL,
     81            OTA_UPGRADE_STATUS_NORMAL,
     82            OTA_UPGRADE_STATUS_DOWNLOAD_IN_PROGRESS,
     83            OTA_UPGRADE_STATUS_DOWNLOAD_COMPLETE,
     84            OTA_UPGRADE_STATUS_WAIT,
     85            OTA_UPGRADE_STATUS_COUNTDOWN
     86          };
     87          
     88          #define UNDEFINED_ENDPOINT 0xFF
     89          
     90          static BootloadState currentBootloadState = BOOTLOAD_STATE_NONE;
     91          
     92          static int8u myEndpoint = UNDEFINED_ENDPOINT;
     93          static int8u serverEndpoint = UNDEFINED_ENDPOINT;
     94          static EmberNodeId serverNodeId = EMBER_UNKNOWN_NODE_ID;
     95          static int8u errors = 0;
     96          static int32u totalImageSize = 0;
     97          static EmberAfOtaImageId currentDownloadFile;
     98          static int16u hardwareVersion;
     99          
    100          #define WAIT_FOR_UPGRADE_MESSAGE 0xFFFFFFFF
    101          
    102          #define ZCL_COMMAND_ID_INDEX 2
    103          
    104          #define IMAGE_NOTIFY_NO_PAYLOAD              0
    105          #define IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE  1
    106          #define IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE      2
    107          #define IMAGE_NOTIFY_FULL_VERSION_TYPE       3
    108          #define IMAGE_NOTIFY_LAST_VALID_TYPE         IMAGE_NOTIFY_FULL_VERSION_TYPE       
    109          
    110          
    111          
    112          // These lengths correspond to the #defines above.

   \                                 In section .text, align 4, keep-with-next
    113          static PGM int8u imageNotifyPayloadLengths[] = {
   \                     imageNotifyPayloadLengths:
   \   00000000   0x05 0x07          DC8 5, 7, 9, 13
   \              0x09 0x0D    

   \                                 In section .data, align 4
   \                     currentBootloadState:
   \   00000000   0x00               DC8 0
   \   00000001   0xFF               DC8 255
   \   00000002   0xFF               DC8 255
   \   00000003   0x00               DC8 0
   \   00000004   0x00               DC8 0
   \   00000005   0x00               DC8 0
   \   00000006   0x00               DC8 0
   \   00000007   0x00               DC8 0
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0xFFFD             DC16 65533
   \   0000001A   0x00 0x00          DC8 0, 0
   \   0000001C   0x00 0x00          DC8 0, 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \   00000020   0x........         DC32 `?<Constant "None">`, `?<Constant "Random Delay before s...">`
   \              0x........   
   \   00000028   0x........         DC32 `?<Constant "Discovering OTA Server">`
   \   0000002C   0x........         DC32 `?<Constant "Get OTA Server EUI">`
   \   00000030   0x........         DC32 `?<Constant "Obtain link key">`
   \   00000034   0x........         DC32 `?<Constant "Querying Next Image">`
   \   00000038   0x........         DC32 `?<Constant "Downloading Image">`, `?<Constant "Verifying Image">`
   \              0x........   
   \   00000040   0x........         DC32 `?<Constant "Waiting for Upgrade m...">`
   \   00000044   0x........         DC32 `?<Constant "Countdown to Upgrade">`
   \   00000048   0x00000000         DC32 0
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    114            (EMBER_AF_ZCL_OVERHEAD + 2),  // Payload and Jitter only.
    115            (EMBER_AF_ZCL_OVERHEAD + 4),  // and MFG ID
    116            (EMBER_AF_ZCL_OVERHEAD + 6),  // and Image Type ID
    117            (EMBER_AF_ZCL_OVERHEAD + 10), // and Version
    118          };
    119          
    120          // Values per the spec.
    121          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH      (EMBER_AF_ZCL_OVERHEAD + 14)
    122          #define UPGRADE_END_RESPONSE_MIN_LENGTH              (EMBER_AF_ZCL_OVERHEAD + 16)
    123          #define QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH (EMBER_AF_ZCL_OVERHEAD + 13)
    124          
    125          static boolean waitingForResponse = FALSE;
    126          static int32u nextEventTimer;
    127          
    128          #define WAITING_FOR_MESSAGE      TRUE
    129          #define NO_MESSAGE_RESPONSE_WAIT FALSE
    130          
    131          // Maximum amount of data that the client is willing to accept in one packet
    132          // The server can always give us less data (sizing the response based on its
    133          // send parameters, eg. source routing).  But it can't give us more.
    134          // Since no 
    135          #define MAX_CLIENT_DATA_SIZE      63   // in bytes
    136          
    137          // We only support the Zigbbe Pro stack version.
    138          #define STACK_VERSION ZIGBEE_PRO_STACK_VERSION
    139          
    140          // Handy defines to make the code more readable.
    141          #define TIMEOUT_REACHED  TRUE
    142          #define START_NEW_TIMER  FALSE
    143          
    144          // queryNextImage() defines
    145          typedef enum {
    146            DELAY_BEFORE_SEND_QUERY = 0,
    147            SEND_QUERY_NOW = 1,
    148          } SendNextQueryState;
    149          
    150          // This defines how long to wait for a message response before considering it
    151          // an error.  It also defines how long a sleepy stays awake waiting for
    152          // a message.
    153          #define MESSAGE_TIMEOUT_MS 3000L
    154          
    155          #define IMAGE_BLOCK_ABORT_LENGTH                   (EMBER_AF_ZCL_OVERHEAD + 1)
    156          #define IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH    (EMBER_AF_ZCL_OVERHEAD + 14)
    157          
    158          // This is the length WITHOUT the Minimum Block Request Period
    159          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN  (EMBER_AF_ZCL_OVERHEAD + 8)
    160          
    161          #define IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH \
    162            (IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN + 2)
    163          
    164          // Maximum wait time that the client would wait to retrive data or to be
    165          // upgraded. If the server is not ready for the operation, it should tell the
    166          // client to wait (again).  But the client would only wait up to the value 
    167          // defined below.  Regarding upgrading, current OTA spec recommends that the
    168          // client should query the server every 60 mins even though it is told to wait 
    169          // longer.
    170          #define TIMEOUT_MAX_WAIT_TIME_MS   (60 * MINUTES_IN_MS)
    171          
    172          // If the server sent us an invalid delay time for the an image block
    173          // download, this is how long we will delay before getting the
    174          // next block.
    175          #define CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS (5 * MINUTES_IN_MS)
    176          
    177          // If the server sent us an invalid delay time for the upgrade end response,
    178          // we use this value for the next request.
    179          #define CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS (1 * HOURS_IN_MS)
    180          
    181          // When the server asks us to wait indefinitely to apply an upgrade,
    182          // we will ask them again in this much time.
    183          #define WAIT_FOR_UPGRADE_DELAY_MS (1 * HOURS_IN_MS)
    184          
    185          // How often a print is done indicating client download progress.
    186          // e.g. "Download 5% complete"
    187          #define DOWNLOAD_PERCENTAGE_UPDATE_RATE 5
    188          
    189          #define MESSAGE_TIMEOUT_BACKOFF_MS (2 * SECONDS_IN_MS)
    190          
    191          // Even when we are told to upgrade immediately, we want to insure there
    192          // is a chance for the APS retries and ZCL response to get back to their 
    193          // senders.
    194          #define IMMEDIATE_UPGRADE_DELAY_MS (3 * SECONDS_IN_MS)
    195          
    196          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_USE_PAGE_REQUEST)
    197            #define USE_PAGE_REQUEST_DEFAULT TRUE
    198          #else
    199            #define USE_PAGE_REQUEST_DEFAULT FALSE
    200          #endif
    201          
    202          // HA 1.2 feature
    203          static int16u minBlockRequestPeriod;
    204          
    205          // This is not a CONST because even if the client supports page request,
    206          // the server may not.  So we will dynamically turn off sending page requests
    207          // when it is enabled and the server doesn't support it.
    208          static boolean usePageRequest = USE_PAGE_REQUEST_DEFAULT;
    209          
    210          typedef enum {
    211            NO_CUSTOM_VERIFY,
    212            NEW_CUSTOM_VERIFY,
    213            CUSTOM_VERIFY_IN_PROGRESS,
    214          } CustomVerifyStatus;
    215          static boolean customVerifyStatus = NO_CUSTOM_VERIFY;
    216          
    217          // TODO: need to gate this when we're better equipped to do so
    218          // with the generated CLI
    219          //#if defined(EMBER_TEST)
    220          // If set to 100, will not stop download.

   \                                 In section .data, align 1
    221          int8u emAfOtaClientStopDownloadPercentage = 100;
   \                     emAfOtaClientStopDownloadPercentage:
   \   00000000   0x64               DC8 100
    222          //#endif
    223          
    224          // The spec says pick a random number up to 5 minutes.  We limit
    225          // ourselves to 4.25 minutes to make it easier to mask out the upper
    226          // bits and limit the number retrieved from halCommonGetRandom()
    227          #define MAXIMUM_RANDOM_DELAY_SECONDS_MASK 0x00FF  
    228          
    229          //------------------------------------------------------------------------------
    230          // Forward Declarations
    231          
    232          static void recordUpgradeStatus(BootloadState state);
    233          static void putImageInfoInMessage(void);
    234          static void startServerDiscovery(void);
    235          static void euiLookupErrorOccurred(void);
    236          static void euiLookup(void);
    237          static void queryNextImage(SendNextQueryState nextQuery,
    238                                     boolean queryErrorOccurred);
    239          static void continueImageDownload(void);
    240          static void continueImageVerification(EmberAfImageVerifyStatus status);
    241          static void askServerToRunUpgrade(boolean timeout);
    242          static void runUpgrade(void);
    243          static int32u updateCurrentOffset(int32u currentOffset);
    244          static void updateDownloadFileVersion(int32u version);
    245          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result);
    246          static void determineNextState(void);
    247          static EmberAfStatus imageNotifyParse(boolean broadcast, 
    248                                                int8u* buffer, 
    249                                                int8u index, 
    250                                                int8u length);
    251          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
    252                                                           int8u index, 
    253                                                           int8u length);
    254          static EmberAfStatus imageBlockResponseParse(int8u* buffer, 
    255                                                       int8u index, 
    256                                                       int8u length);
    257          static EmberAfStatus upgradeEndResponseParse(int8u status,
    258                                                       int8u* buffer, 
    259                                                       int8u length);
    260          static boolean calculateTimer(int32u currentTime, 
    261                                        int32u targetTime, 
    262                                        int32u* returnTime);
    263          
    264          //------------------------------------------------------------------------------
    265          
    266          static void updateCurrentImageAttributes(EmberAfOtaImageId* imageId)
    267          {
    268          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MANUFACTURER_ID_ATTRIBUTE)
    269            emberAfWriteAttribute(myEndpoint,
    270                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    271                                  ZCL_MANUFACTURER_ID_ATTRIBUTE_ID,
    272                                  CLUSTER_MASK_CLIENT,
    273                                  (int8u*)&(imageId->manufacturerId),
    274                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    275          #endif
    276          
    277          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_TYPE_ID_ATTRIBUTE)
    278            emberAfWriteAttribute(myEndpoint,
    279                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    280                                  ZCL_IMAGE_TYPE_ID_ATTRIBUTE_ID,
    281                                  CLUSTER_MASK_CLIENT,
    282                                  (int8u*)&(imageId->imageTypeId),
    283                                  ZCL_INT16U_ATTRIBUTE_TYPE);
    284          #endif
    285          
    286          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_FILE_VERSION_ATTRIBUTE)
    287            emberAfWriteAttribute(myEndpoint,
    288                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    289                                  ZCL_CURRENT_FILE_VERSION_ATTRIBUTE_ID,
    290                                  CLUSTER_MASK_CLIENT,
    291                                  (int8u*)&(imageId->firmwareVersion),
    292                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    293          #endif
    294          }
    295          
    296          static void updateMinBlockRequestPeriodAttribute(int16u value)
    297          {
    298            minBlockRequestPeriod = value;
    299          
    300          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
    301            {
    302              emberAfWriteAttribute(myEndpoint,
    303                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    304                                    ZCL_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE_ID, 
    305                                    CLUSTER_MASK_CLIENT,
    306                                    (int8u*)&minBlockRequestPeriod,
    307                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    308            }
    309          #endif
    310          }
    311          

   \                                 In section .text, align 2, keep-with-next
    312          void emberAfOtaBootloadClusterClientInitCallback(int8u endpoint)
    313          {
   \                     emberAfOtaBootloadClusterClientInitCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    314            if (myEndpoint != UNDEFINED_ENDPOINT) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000008   0x7861             LDRB     R1,[R4, #+1]
   \   0000000A   0x29FF             CMP      R1,#+255
   \   0000000C   0xD108             BNE.N    ??emberAfOtaBootloadClusterClientInitCallback_0
    315              // We have already been initialized
    316              return;
    317            }
    318            myEndpoint = endpoint;
   \   0000000E   0x7060             STRB     R0,[R4, #+1]
    319          
    320            emberAfOtaStorageInitCallback();
   \   00000010   0x.... 0x....      BL       emberAfOtaStorageInitCallback
    321          
    322          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE)
    323            {
    324              int16u currentZigbeeStackVersion = ZIGBEE_PRO_STACK_VERSION;
    325              emberAfWriteAttribute(myEndpoint,
    326                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    327                                    ZCL_CURRENT_ZIGBEE_STACK_VERSION_ATTRIBUTE_ID, 
    328                                    CLUSTER_MASK_CLIENT,
    329                                    (int8u*)&currentZigbeeStackVersion,
    330                                    ZCL_INT16U_ATTRIBUTE_TYPE);
    331            }
    332          #endif
    333          
    334            // Assume we can download as fast as we want until told otherwise by server.
    335            updateMinBlockRequestPeriodAttribute(0); // minBlockRequestPeriod.
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x83A0             STRH     R0,[R4, #+28]
    336          
    337          
    338          #if defined(USE_IMAGE_STAMP)
    339            {
    340              // Unfortunately the AAT data struct is declared const,
    341              // so we must copy out the image stamp to satisfy the compiler.
    342              int8u data[IMAGE_STAMP_SIZE];
    343              MEMCOPY(data, halAppAddressTable.imageStamp, IMAGE_STAMP_SIZE);
    344              emberAfWriteAttribute(myEndpoint,
    345                                    ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    346                                    ZCL_IMAGE_STAMP_ATTRIBUTE_ID,
    347                                    CLUSTER_MASK_CLIENT,
    348                                    data,
    349                                    ZCL_INT32U_ATTRIBUTE_TYPE);
    350            }
    351          #endif
    352          
    353            {
    354              EmberAfOtaImageId id;
    355              int16u hwVer;    
    356              emberAfOtaClientVersionInfoCallback(&id, 
    357                                                  &hwVer);
   \   00000018   0xA900             ADD      R1,SP,#+0
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    358              updateCurrentImageAttributes(&id);
    359            }
    360          }
   \                     ??emberAfOtaBootloadClusterClientInitCallback_0:
   \   00000020   0xB006             ADD      SP,SP,#+24
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    361          
    362          // Returns whether or not a timer has been set.  For timer = 0, will return FALSE

   \                                 In section .text, align 2, keep-with-next
    363          static boolean setTimer(int32u timeMs)
    364          {
   \                     setTimer:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
    365            int32u timer;
    366          
    367            // When waiting for page request replies I want to use the timer that is defined
    368            // in App. Builder and passed through to here since I am expecting multiple
    369            // messages coming back from the server.
    370            if (waitingForResponse
    371                && emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000008   0x7920             LDRB     R0,[R4, #+4]
   \   0000000A   0xB138             CBZ.N    R0,??setTimer_0
   \   0000000C   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD003             BEQ.N    ??setTimer_0
    372              timer = MESSAGE_TIMEOUT_MS;
   \   00000014   0xF640 0x36B8      MOVW     R6,#+3000
    373              nextEventTimer = timeMs;
   \   00000018   0x64E5             STR      R5,[R4, #+76]
   \   0000001A   0xE003             B.N      ??setTimer_1
    374            } else {
    375              timer = timeMs;
   \                     ??setTimer_0:
   \   0000001C   0x462E             MOV      R6,R5
    376              nextEventTimer = 0;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x64E0             STR      R0,[R4, #+76]
    377            }
    378          
    379            // A timer set at 0 means we are not counting down to some event.
    380            // We may still be in an active state of waiting, but are waiting
    381            // for an event to fire rather than a timer to expire.  For example, service
    382            // discovery will generate a callback when it is complete.  No need for
    383            // keeping track of time here as well.
    384            if (timer != 0) {
   \   00000022   0xB1A6             CBZ.N    R6,??setTimer_2
    385              //    otaPrintln("Setting timer: 0x%4X ms", timer);
    386              EmberAfEventPollControl pollControl = EMBER_AF_SHORT_POLL;
   \                     ??setTimer_1:
   \   00000024   0x2501             MOVS     R5,#+1
    387              EmberAfEventSleepControl sleepControl = EMBER_AF_OK_TO_SLEEP;
   \   00000026   0x2700             MOVS     R7,#+0
    388              if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2807             CMP      R0,#+7
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x2702             MOVEQ    R7,#+2
    389                sleepControl = EMBER_AF_STAY_AWAKE;
   \   00000030   0xD005             BEQ.N    ??setTimer_3
    390              } else if (!waitingForResponse
    391                         && (emAfGetCurrentPageRequestStatus() 
    392                             == EM_AF_NO_PAGE_REQUEST)) {
   \   00000032   0x7920             LDRB     R0,[R4, #+4]
   \   00000034   0xB918             CBNZ.N   R0,??setTimer_3
   \   00000036   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   0000003A   0xB900             CBNZ.N   R0,??setTimer_3
    393                pollControl = EMBER_AF_LONG_POLL;
   \   0000003C   0x2500             MOVS     R5,#+0
    394              }
    395              emberAfScheduleClientTickExtended(myEndpoint,
    396                                                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    397                                                timer,
    398                                                pollControl,
    399                                                sleepControl);
   \                     ??setTimer_3:
   \   0000003E   0x9700             STR      R7,[SP, #+0]
   \   00000040   0x462B             MOV      R3,R5
   \   00000042   0x4632             MOV      R2,R6
   \   00000044   0x2119             MOVS     R1,#+25
   \   00000046   0x7860             LDRB     R0,[R4, #+1]
   \   00000048   0x.... 0x....      BL       emberAfScheduleClientTickExtended
   \   0000004C   0x2001             MOVS     R0,#+1
   \                     ??setTimer_2:
   \   0000004E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    400            }
    401            return (timer != 0);
    402          }
    403          

   \                                 In section .text, align 2, keep-with-next
    404          void emberAfPluginOtaClientStackStatusCallback(EmberStatus status)
    405          {
    406          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_AUTO_START)
    407            int16u randomDelaySeconds;
    408            if (status != EMBER_NETWORK_UP
    409                || currentBootloadState != BOOTLOAD_STATE_NONE) {
    410              return;
    411            }
    412            randomDelaySeconds = (halCommonGetRandom()
    413                                  & MAXIMUM_RANDOM_DELAY_SECONDS_MASK);
    414            recordUpgradeStatus(BOOTLOAD_STATE_DELAY);
    415            otaPrintln("Delaying %d seconds before starting OTA client", randomDelaySeconds);
    416            setTimer(randomDelaySeconds << 10);  // multiply by 1024 to get approx ms.
    417          #endif
    418          }
   \                     emberAfPluginOtaClientStackStatusCallback:
   \   00000000   0x4770             BX       LR               ;; return
    419          

   \                                 In section .text, align 4, keep-with-next
    420          static void otaClientTick(void)
    421          {
   \                     otaClientTick:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    422            boolean errorOccurred = FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
    423            // Getting here means either we timed out our last operation,
    424            // or we need to kick off a periodic event.
    425          
    426            emAfPageRequestTimerExpired();
   \   00000004   0x.... 0x....      BL       emAfPageRequestTimerExpired
    427             
    428            if (waitingForResponse) {
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable123
   \   0000000C   0x7928             LDRB     R0,[R5, #+4]
   \   0000000E   0xB1A8             CBZ.N    R0,??otaClientTick_1
    429              otaPrintln("Timeout waiting for message.");
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "Timeout waiting for m...">`
   \   00000014   0x.... 0x....      BL       ?Subroutine2
    430              errorOccurred = TRUE;
   \                     ??CrossCallReturnLabel_38:
   \   00000018   0x2401             MOVS     R4,#+1
    431              errors++;
   \   0000001A   0x78E8             LDRB     R0,[R5, #+3]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x70E8             STRB     R0,[R5, #+3]
    432              waitingForResponse = FALSE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7128             STRB     R0,[R5, #+4]
    433                
    434              if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   00000024   0x7828             LDRB     R0,[R5, #+0]
   \   00000026   0x2806             CMP      R0,#+6
   \   00000028   0xD108             BNE.N    ??otaClientTick_1
    435                // Especially important if the download delay is 0, we want
    436                // to backoff a little and make sure we don't continue to
    437                // blast the server with requests.
    438                setTimer((nextEventTimer > MESSAGE_TIMEOUT_BACKOFF_MS)
    439                         ? nextEventTimer
    440                         : MESSAGE_TIMEOUT_BACKOFF_MS);
   \   0000002A   0x6CE8             LDR      R0,[R5, #+76]
   \   0000002C   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   00000030   0xBF98             IT       LS 
   \   00000032   0xF44F 0x60FA      MOVLS    R0,#+2000
   \   00000036   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000003A   0x....             B.N      setTimer
    441                return;
    442              }
    443            }
    444          
    445            switch (currentBootloadState) {
   \                     ??otaClientTick_1:
   \   0000003C   0x7828             LDRB     R0,[R5, #+0]
   \   0000003E   0x1E40             SUBS     R0,R0,#+1
   \   00000040   0x2808             CMP      R0,#+8
   \   00000042   0xD829             BHI.N    ??otaClientTick_2
   \   00000044   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??otaClientTick_0:
   \   00000048   0x05 0x08          DC8      0x5,0x8,0xB,0x28
   \              0x0B 0x28    
   \   0000004C   0x10 0x16          DC8      0x10,0x16,0x1A,0x1F
   \              0x1A 0x1F    
   \   00000050   0x24 0x00          DC8      0x24,0x0
    446            case BOOTLOAD_STATE_DELAY:
    447              emberAfOtaClientStartCallback();
   \                     ??otaClientTick_3:
   \   00000052   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000056   0x....             B.N      emberAfOtaClientStartCallback
    448              break;
    449            case BOOTLOAD_STATE_DISCOVER_SERVER:
    450              startServerDiscovery();
   \                     ??otaClientTick_4:
   \   00000058   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000005C   0x....             B.N      startServerDiscovery
    451              break;
    452            case BOOTLOAD_STATE_GET_SERVER_EUI:
    453              euiLookupErrorOccurred();
   \                     ??otaClientTick_5:
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x7128             STRB     R0,[R5, #+4]
   \   00000062   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000066   0x....             B.N      restartServerDiscoveryAfterDelay
    454              break;
    455            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    456              queryNextImage(SEND_QUERY_NOW, 
    457                             errorOccurred);
   \                     ??otaClientTick_6:
   \   00000068   0x4621             MOV      R1,R4
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   00000070   0x.... 0x....      B.W      queryNextImage
    458              break;
    459            case BOOTLOAD_STATE_DOWNLOAD:
    460              continueImageDownload();
   \                     ??otaClientTick_7:
   \   00000074   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000078   0x.... 0x....      B.W      continueImageDownload
    461              break;
    462            case BOOTLOAD_STATE_VERIFY_IMAGE:
    463              continueImageVerification(EMBER_AF_IMAGE_VERIFY_IN_PROGRESS);
   \                     ??otaClientTick_8:
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000082   0x.... 0x....      B.W      continueImageVerification
    464              break;
    465            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    466              askServerToRunUpgrade(TIMEOUT_REACHED);
   \                     ??otaClientTick_9:
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000008C   0x.... 0x....      B.W      askServerToRunUpgrade
    467              break;
    468            case BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE:
    469              runUpgrade();
   \                     ??otaClientTick_10:
   \   00000090   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000094   0x.... 0x....      B.W      runUpgrade
    470            default:
    471              // Do nothing.  Invalid state
    472              break;
    473            }
   \                     ??otaClientTick_2:
   \   00000098   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    474          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    475          

   \                                 In section .text, align 2, keep-with-next
    476          void emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback(boolean success)
    477          {
    478            if (!success) {
   \                     emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xBF04             ITT      EQ 
   \   00000004   0x2005             MOVEQ    R0,#+5
   \   00000006   0x.... 0x....      BEQ.W    downloadAndVerifyFinish
    479              downloadAndVerifyFinish(EMBER_AF_OTA_ERASE_FAILED);
    480          
    481            } else if (currentBootloadState == BOOTLOAD_STATE_DOWNLOAD) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable123
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2806             CMP      R0,#+6
   \   00000012   0xBF08             IT       EQ 
   \   00000014   0x.... 0x....      BEQ.W    otaClientTick
    482              // If an erase was triggered for some other reason besides preparing
    483              // to start a download, we don't want to trigger the OTA client state
    484              // machine.
    485              otaClientTick();
    486            }
    487          }
   \   00000018   0x4770             BX       LR               ;; return
    488          

   \                                 In section .text, align 2, keep-with-next
    489          void emberAfOtaBootloadClusterClientTickCallback(int8u endpoint)
    490          {
    491            // Since there is only one instance of the OTA bootload cluster allowed,
    492            // we don't care about the endpoint value.
    493            otaClientTick();
   \                     emberAfOtaBootloadClusterClientTickCallback:
   \   00000000   0x....             B.N      otaClientTick
    494          }
    495          

   \                                 In section .text, align 2, keep-with-next
    496          static void restartServerDiscoveryAfterDelay(void)
    497          {
   \                     restartServerDiscoveryAfterDelay:
   \   00000000   0xB580             PUSH     {R7,LR}
    498            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable123_1  ;; 0x927c0
   \   00000006   0x.... 0x....      BL       setTimer
    499            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xE8BD 0x4002      POP      {R1,LR}
   \   00000010   0x....             B.N      recordUpgradeStatus
    500          }
    501          
    502          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    503          static void otaClientPartnerLinkKeyCallback(boolean success)
    504          {
    505            if (success) {
    506              determineNextState();
    507              return;
    508            } 
    509          
    510            restartServerDiscoveryAfterDelay();
    511          }
    512          #endif
    513          
    514          static void getPartnerLinkKey(void)
    515          {
    516          #if defined(EMBER_AF_HAS_SECURITY_PROFILE_SE)
    517            EmberEUI64 serverEui64;
    518            int8u i;
    519            EmberAfAttributeType attributeType;
    520          
    521            if (!emberAfIsCurrentSecurityProfileSmartEnergy()
    522                || serverNodeId == EMBER_TRUST_CENTER_NODE_ID) {
    523              goto partnerLinkKeyDone;
    524            }
    525          
    526            emberAfReadClientAttribute(myEndpoint,
    527                                       ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    528                                       ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID,
    529                                       serverEui64,
    530                                       EUI64_SIZE);
    531          
    532            for (i = 0; i < emberAfGetKeyTableSize(); i++) {
    533              EmberKeyStruct keyStruct;
    534              if (EMBER_SUCCESS == emberGetKeyTableEntry(i, &keyStruct)
    535                  && EMBER_APPLICATION_LINK_KEY == keyStruct.type
    536                  && 0 == MEMCOMPARE(keyStruct.partnerEUI64, serverEui64, EUI64_SIZE)) {
    537                goto partnerLinkKeyDone;
    538              }
    539            }
    540          
    541            // Spec is not clear whether the actual key establishment endpoint 
    542            // needs to be used, so we just use 1.
    543            if (EMBER_SUCCESS
    544                == emberAfInitiatePartnerLinkKeyExchange(serverNodeId,
    545                                                         1,
    546                                                         otaClientPartnerLinkKeyCallback)) {
    547              return;
    548            }
    549            
    550            // If we fail to initiate partner link key, it could be because 
    551            // we don't have any link key spots or the server is no longer online.
    552            // We just retry the entire operation again.
    553            restartServerDiscoveryAfterDelay();
    554            return;
    555          
    556           partnerLinkKeyDone:
    557          #endif
    558          
    559            determineNextState();
    560            return;
    561          }
    562          

   \                                 In section .text, align 2, keep-with-next
    563          static int32u getCurrentOffset(void)
    564          {
   \                     getCurrentOffset:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    565            int32u offset;
    566            int8u dataType = ZCL_INT32U_ATTRIBUTE_TYPE;
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0xF88D 0x000C      STRB     R0,[SP, #+12]
    567            emberAfReadAttribute(myEndpoint, 
    568                                 ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    569                                 ZCL_FILE_OFFSET_ATTRIBUTE_ID,
    570                                 CLUSTER_MASK_CLIENT,
    571                                 (int8u*)&offset,
    572                                 4,
    573                                 &dataType);
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x9002             STR      R0,[SP, #+8]
   \   0000000E   0x2004             MOVS     R0,#+4
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0xA804             ADD      R0,SP,#+16
   \   00000014   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_57:
   \   00000018   0x.... 0x....      BL       emberAfReadAttribute
    574            return offset;
   \   0000001C   0x9804             LDR      R0,[SP, #+16]
   \   0000001E   0xB005             ADD      SP,SP,#+20
   \   00000020   0xBD00             POP      {PC}             ;; return
    575          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0x2380             MOVS     R3,#+128
   \   00000004   0x2201             MOVS     R2,#+1
   \   00000006   0x2119             MOVS     R1,#+25
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable123
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x4770             BX       LR
    576          

   \                                 In section .text, align 2, keep-with-next
    577          static int32u updateCurrentOffset(int32u currentOffset)
    578          {
   \                     updateCurrentOffset:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    579            emberAfWriteAttribute(myEndpoint,
    580                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    581                                  ZCL_FILE_OFFSET_ATTRIBUTE_ID, 
    582                                  CLUSTER_MASK_CLIENT,
    583                                  (int8u*)&currentOffset,
    584                                  ZCL_INT32U_ATTRIBUTE_TYPE);
   \   00000004   0x2023             MOVS     R0,#+35
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_58:
   \   0000000E   0x.... 0x....      BL       emberAfWriteAttribute
    585            return currentOffset;
   \   00000012   0x9802             LDR      R0,[SP, #+8]
   \   00000014   0xBD0E             POP      {R1-R3,PC}       ;; return
    586          }
    587          
    588          static void updateDownloadFileVersion(int32u version)
    589          {
    590          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_DOWNLOADED_FILE_VERSION_ATTRIBUTE)
    591            emberAfWriteAttribute(myEndpoint,
    592                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    593                                  ZCL_DOWNLOADED_FILE_VERSION_ATTRIBUTE_ID, 
    594                                  CLUSTER_MASK_CLIENT,
    595                                  (int8u*)(&version),
    596                                  ZCL_INT32U_ATTRIBUTE_TYPE);
    597          #endif
    598            currentDownloadFile.firmwareVersion = version;
    599          }
    600          
    601          // It is expected this is called when registration has successfully
    602          // completed.

   \                                 In section .text, align 2, keep-with-next
    603          void emberAfOtaClientStartCallback(void)
    604          {
    605            // If we are already delaying we allow jumping immediately
    606            // to discovery and skipping the delay.  This benefits the
    607            // CLI as well as applications that might expect behavior
    608            // as in previous releases where discovery started as soon
    609            // as this API is called.
    610            if (currentBootloadState == BOOTLOAD_STATE_NONE
    611                || currentBootloadState == BOOTLOAD_STATE_DELAY) {
   \                     emberAfOtaClientStartCallback:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable123
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xBF14             ITE      NE 
   \   0000000A   0x2801             CMPNE    R0,#+1
   \   0000000C   0x.... 0x....      BEQ.W    startServerDiscovery
    612              startServerDiscovery();
    613            }
    614          }
   \   00000010   0x4770             BX       LR               ;; return
    615          

   \                                 In section .text, align 2, keep-with-next
    616          void emAfOtaClientStop(void)
    617          {
   \                     emAfOtaClientStop:
   \   00000000   0xB580             PUSH     {R7,LR}
    618            downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       downloadAndVerifyFinish
    619            recordUpgradeStatus(BOOTLOAD_STATE_NONE);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       recordUpgradeStatus
    620            waitingForResponse = FALSE;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable123
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x7101             STRB     R1,[R0, #+4]
    621          
    622            emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   \   00000016   0x2119             MOVS     R1,#+25
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0xE8BD 0x4004      POP      {R2,LR}
   \   0000001E   0x.... 0x....      B.W      emberAfDeactivateClientTick
    623          }
    624          

   \                                 In section .text, align 2, keep-with-next
    625          void emAfOtaClientPrintState(void)
    626          {
   \                     emAfOtaClientPrintState:
   \   00000000   0xB510             PUSH     {R4,LR}
    627            otaPrintln(" State:   %p",
    628                       bootloadStateNames[currentBootloadState]);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \   0000000C   0x6A02             LDR      R2,[R0, #+32]
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant " State:   %p">`
   \   00000012   0x.... 0x....      BL       ?Subroutine1
    629            otaPrintln(" Waiting for response: %p",
    630                       (waitingForResponse ? "yes" : "no"));
   \                     ??CrossCallReturnLabel_23:
   \   00000016   0x7920             LDRB     R0,[R4, #+4]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xBF14             ITE      NE 
   \   0000001C   0x....             ADRNE.N  R2,??DataTable111  ;; "yes"
   \   0000001E   0x....             ADREQ.N  R2,??DataTable111_1  ;; 0x6E, 0x6F, 0x00, 0x00
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant " Waiting for response...">`
   \   00000024   0x.... 0x....      BL       ?Subroutine1
    631            if (waitingForResponse) {
   \                     ??CrossCallReturnLabel_22:
   \   00000028   0x7920             LDRB     R0,[R4, #+4]
   \   0000002A   0xB120             CBZ.N    R0,??CrossCallReturnLabel_21
    632              otaPrintln(" Next Event Timer: %d ms", nextEventTimer);
   \   0000002C   0x6CE2             LDR      R2,[R4, #+76]
   \   0000002E   0x.... 0x....      ADR.W    R1,`?<Constant " Next Event Timer: %d ms">`
   \   00000032   0x.... 0x....      BL       ?Subroutine1
    633            }
    634            otaPrintln(" Current Download Offset: 0x%4X (%d%%)", 
    635                       getCurrentOffset(),
    636                       emAfCalculatePercentage(getCurrentOffset(),
    637                                               totalImageSize));
   \                     ??CrossCallReturnLabel_21:
   \   00000036   0x.... 0x....      BL       getCurrentOffset
   \   0000003A   0x6CA1             LDR      R1,[R4, #+72]
   \   0000003C   0x.... 0x....      BL       emAfCalculatePercentage
   \   00000040   0x4604             MOV      R4,R0
   \   00000042   0x.... 0x....      BL       getCurrentOffset
   \   00000046   0x4623             MOV      R3,R4
   \   00000048   0x4602             MOV      R2,R0
   \   0000004A   0x.... 0x....      ADR.W    R1,`?<Constant " Current Download Off...">`
   \   0000004E   0x2040             MOVS     R0,#+64
   \   00000050   0xE8BD 0x4010      POP      {R4,LR}
   \   00000054   0x.... 0x....      B.W      emberAfPrintln
    638          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    639          

   \                                 In section .text, align 2, keep-with-next
    640          static void recordServerEuiAndGoToNextState(EmberEUI64 eui64)
    641          {
   \                     recordServerEuiAndGoToNextState:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    642            emberAfWriteAttribute(myEndpoint,
    643                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    644                                  ZCL_UPGRADE_SERVER_ID_ATTRIBUTE_ID, 
    645                                  CLUSTER_MASK_CLIENT,
    646                                  eui64,
    647                                  ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000008   0x21F0             MOVS     R1,#+240
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2380             MOVS     R3,#+128
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x2119             MOVS     R1,#+25
   \   00000014   0x7860             LDRB     R0,[R4, #+1]
   \   00000016   0x.... 0x....      BL       emberAfWriteAttribute
    648            otaPrintln("OTA Cluster: setting IEEE address of OTA cluster");
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "OTA Cluster: setting ...">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine2
    649            getPartnerLinkKey();;
   \                     ??CrossCallReturnLabel_37:
   \   00000022   0x.... 0x....      BL       determineDownloadFileStatus
   \   00000026   0x7020             STRB     R0,[R4, #+0]
   \   00000028   0x2805             CMP      R0,#+5
   \   0000002A   0xD024             BEQ.N    ??recordServerEuiAndGoToNextState_0
   \   0000002C   0xD32A             BCC.N    ??recordServerEuiAndGoToNextState_1
   \   0000002E   0x2807             CMP      R0,#+7
   \   00000030   0xD007             BEQ.N    ??recordServerEuiAndGoToNextState_2
   \   00000032   0xD30B             BCC.N    ??recordServerEuiAndGoToNextState_3
   \   00000034   0x2808             CMP      R0,#+8
   \   00000036   0xD125             BNE.N    ??recordServerEuiAndGoToNextState_1
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   0000003E   0x.... 0x....      B.W      askServerToRunUpgrade
   \                     ??recordServerEuiAndGoToNextState_2:
   \   00000042   0x2005             MOVS     R0,#+5
   \   00000044   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   00000048   0x.... 0x....      B.W      continueImageVerification
   \                     ??recordServerEuiAndGoToNextState_3:
   \   0000004C   0x.... 0x....      BL       emberAfOtaStorageDriverPrepareToResumeDownloadCallback
   \   00000050   0x4605             MOV      R5,R0
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x70E0             STRB     R0,[R4, #+3]
   \   00000056   0x2006             MOVS     R0,#+6
   \   00000058   0x.... 0x....      BL       recordUpgradeStatus
   \   0000005C   0x2D00             CMP      R5,#+0
   \   0000005E   0xBF04             ITT      EQ 
   \   00000060   0xE8BD 0x4037      POPEQ    {R0-R2,R4,R5,LR}
   \   00000064   0x.... 0x....      BEQ.W    continueImageDownload
   \   00000068   0x2D04             CMP      R5,#+4
   \   0000006A   0xD00B             BEQ.N    ??recordServerEuiAndGoToNextState_1
   \   0000006C   0x2004             MOVS     R0,#+4
   \   0000006E   0xE8BD 0x403E      POP      {R1-R5,LR}
   \   00000072   0x.... 0x....      B.W      downloadAndVerifyFinish
   \                     ??recordServerEuiAndGoToNextState_0:
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xB003             ADD      SP,SP,#+12
   \   0000007C   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000080   0x.... 0x....      B.W      queryNextImage
    650          }
   \                     ??recordServerEuiAndGoToNextState_1:
   \   00000084   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    651          

   \                                 In section .text, align 2, keep-with-next
    652          void emAfOtaClientServiceDiscoveryCallback(const EmberAfServiceDiscoveryResult *result)
    653          {
   \                     emAfOtaClientServiceDiscoveryCallback:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    654            // We only look at the first result.  How multiple OTA servers are handled
    655            // has not been spelled out by the spec yet.
    656            const EmberAfEndpointList* epList =
    657              (const EmberAfEndpointList*)result->responseData;
   \   00000002   0x6881             LDR      R1,[R0, #+8]
    658           
    659            waitingForResponse = FALSE;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x7122             STRB     R2,[R4, #+4]
    660          
    661            // Since the OTA cluster only uses broadcast discoveries for Match descriptor
    662            // and Unicast discoveries for the IEEE, we can differentiate the request
    663            // type based on the result.
    664          
    665            if (result->status == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_COMPLETE) {
   \   0000000C   0x7802             LDRB     R2,[R0, #+0]
   \   0000000E   0xB9DA             CBNZ.N   R2,??emAfOtaClientServiceDiscoveryCallback_0
    666              if (serverEndpoint == UNDEFINED_ENDPOINT) {
   \   00000010   0x78A0             LDRB     R0,[R4, #+2]
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xD00F             BEQ.N    ??emAfOtaClientServiceDiscoveryCallback_1
    667                // We did not find an OTA server yet, so wait a while before trying
    668                // again.  Hopefully one will appear on the network later.
    669                restartServerDiscoveryAfterDelay();
    670              } else {
    671                euiLookup();
   \   00000016   0x2003             MOVS     R0,#+3
   \   00000018   0x.... 0x....      BL       recordUpgradeStatus
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x8B20             LDRH     R0,[R4, #+24]
   \   00000020   0x.... 0x....      BL       emberLookupEui64ByNodeId
   \   00000024   0xB328             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_2
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable124
   \   0000002A   0x8B20             LDRH     R0,[R4, #+24]
   \   0000002C   0x.... 0x....      BL       emberAfFindIeeeAddress
   \   00000030   0xB120             CBZ.N    R0,??emAfOtaClientServiceDiscoveryCallback_3
   \                     ??emAfOtaClientServiceDiscoveryCallback_4:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x7120             STRB     R0,[R4, #+4]
   \                     ??emAfOtaClientServiceDiscoveryCallback_1:
   \   00000036   0x.... 0x....      BL       restartServerDiscoveryAfterDelay
   \   0000003A   0xBD13             POP      {R0,R1,R4,PC}
   \                     ??emAfOtaClientServiceDiscoveryCallback_3:
   \   0000003C   0x2003             MOVS     R0,#+3
   \   0000003E   0x.... 0x....      BL       recordUpgradeStatus
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x7120             STRB     R0,[R4, #+4]
   \   00000046   0xE014             B.N      ??emAfOtaClientServiceDiscoveryCallback_2
    672              }
    673              return;
    674            } else if (result->status
    675                       == EMBER_AF_BROADCAST_SERVICE_DISCOVERY_RESPONSE_RECEIVED) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_0:
   \   00000048   0x2A01             CMP      R2,#+1
   \   0000004A   0xD10B             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_5
    676              if (epList->count > 0) {
   \   0000004C   0x780A             LDRB     R2,[R1, #+0]
   \   0000004E   0xB19A             CBZ.N    R2,??emAfOtaClientServiceDiscoveryCallback_6
    677                serverEndpoint = epList->list[0];
   \   00000050   0x6849             LDR      R1,[R1, #+4]
   \   00000052   0x7809             LDRB     R1,[R1, #+0]
   \   00000054   0x70A1             STRB     R1,[R4, #+2]
    678                serverNodeId = result->matchAddress;
   \   00000056   0x8882             LDRH     R2,[R0, #+4]
   \   00000058   0x8322             STRH     R2,[R4, #+24]
    679                otaPrintln("Setting OTA Server to 0x%2X", serverNodeId);
   \   0000005A   0x.... 0x....      ADR.W    R1,`?<Constant "Setting OTA Server to...">`
   \   0000005E   0x.... 0x....      BL       ?Subroutine1
    680              }
    681          
    682            } else if (result->status
   \                     ??CrossCallReturnLabel_20:
   \   00000062   0xBD13             POP      {R0,R1,R4,PC}
    683                       == EMBER_AF_UNICAST_SERVICE_DISCOVERY_COMPLETE_WITH_RESPONSE) {
   \                     ??emAfOtaClientServiceDiscoveryCallback_5:
   \   00000064   0x2A03             CMP      R2,#+3
   \   00000066   0xD1E4             BNE.N    ??emAfOtaClientServiceDiscoveryCallback_4
    684              // Assumed IEEE address request
    685              EmberEUI64 eui64;
    686              MEMCOPY(eui64, result->responseData, EUI64_SIZE);
   \   00000068   0x2208             MOVS     R2,#+8
   \   0000006A   0x6881             LDR      R1,[R0, #+8]
   \   0000006C   0xA800             ADD      R0,SP,#+0
   \   0000006E   0x.... 0x....      BL       halCommonMemCopy
    687              recordServerEuiAndGoToNextState(eui64);
   \                     ??emAfOtaClientServiceDiscoveryCallback_2:
   \   00000072   0xA800             ADD      R0,SP,#+0
   \   00000074   0x.... 0x....      BL       recordServerEuiAndGoToNextState
   \                     ??emAfOtaClientServiceDiscoveryCallback_6:
   \   00000078   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    688          
    689            } else { // Assume Unicast timeout of IEEE address request
    690              euiLookupErrorOccurred();
    691            }
    692          }
    693          

   \                                 In section .text, align 2, keep-with-next
    694          static void startServerDiscovery(void)
    695          {
   \                     startServerDiscovery:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    696            EmberStatus status;
    697            EmberAfProfileId appProfile;
    698          
    699            recordUpgradeStatus(BOOTLOAD_STATE_DISCOVER_SERVER);
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
    700            serverEndpoint = UNDEFINED_ENDPOINT;
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable123
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x70A0             STRB     R0,[R4, #+2]
    701            
    702            // Figure out the right app profile ID based on the endpoint descriptor
    703            appProfile = emberAfProfileIdFromIndex( 
    704                           emberAfIndexFromEndpoint(myEndpoint) );
   \   00000012   0x7860             LDRB     R0,[R4, #+1]
   \   00000014   0x.... 0x....      BL       emberAfIndexFromEndpoint
    705          
    706            status = 
    707              emberAfFindDevicesByProfileAndCluster(
    708                EMBER_RX_ON_WHEN_IDLE_BROADCAST_ADDRESS,
    709                appProfile,
    710                ZCL_OTA_BOOTLOAD_CLUSTER_ID,
    711                EMBER_AF_SERVER_CLUSTER_DISCOVERY,
    712                emAfOtaClientServiceDiscoveryCallback);
    713          
    714            if (status != EMBER_SUCCESS) {
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable124
   \   0000001C   0x9100             STR      R1,[SP, #+0]
   \   0000001E   0x2301             MOVS     R3,#+1
   \   00000020   0x2219             MOVS     R2,#+25
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable126
   \   00000026   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   0000002A   0x8841             LDRH     R1,[R0, #+2]
   \   0000002C   0xF64F 0x70FD      MOVW     R0,#+65533
   \   00000030   0x.... 0x....      BL       emberAfFindDevicesByProfileAndCluster
   \   00000034   0xB128             CBZ.N    R0,??startServerDiscovery_0
    715              otaPrintln("Failed to initiate service discovery.");
   \   00000036   0x.... 0x....      ADR.W    R1,`?<Constant "Failed to initiate se...">`
   \   0000003A   0x.... 0x....      BL       ?Subroutine2
    716              waitingForResponse = FALSE;
   \                     ??CrossCallReturnLabel_36:
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xE000             B.N      ??startServerDiscovery_1
    717            } else {
    718              waitingForResponse = TRUE;
   \                     ??startServerDiscovery_0:
   \   00000042   0x2001             MOVS     R0,#+1
   \                     ??startServerDiscovery_1:
   \   00000044   0x7120             STRB     R0,[R4, #+4]
    719            }
    720          
    721            errors = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x70E0             STRB     R0,[R4, #+3]
    722            setTimer(EMBER_AF_OTA_SERVER_DISCOVERY_DELAY_MS);
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable123_1  ;; 0x927c0
   \   0000004E   0xE8BD 0x4016      POP      {R1,R2,R4,LR}
   \   00000052   0x....             B.N      setTimer
    723          }
    724          
    725          static void euiLookupErrorOccurred(void)
    726          {
    727            // The timer has expired and we don't know the server's EUI. 
    728            // We treat the server discovery + EUI lookup as a single operation
    729            // and if either fails we delay a long time to allow any potential network
    730            // issues to be resolved.
    731            waitingForResponse = FALSE;
    732            restartServerDiscoveryAfterDelay();
    733            return;
    734          }
    735          
    736          static void euiLookup(void)
    737          {
    738            EmberEUI64 eui64;
    739            EmberStatus status;
    740          
    741            recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    742            status = emberLookupEui64ByNodeId(serverNodeId, eui64);
    743          
    744            if (status != EMBER_SUCCESS) { 
    745              // New discovery of the Server's EUI
    746              status = emberAfFindIeeeAddress(serverNodeId,
    747                                              emAfOtaClientServiceDiscoveryCallback);
    748              if (status != EMBER_SUCCESS) {
    749                // Discovery was never initiated.
    750                euiLookupErrorOccurred();
    751                return;
    752              }
    753              recordUpgradeStatus(BOOTLOAD_STATE_GET_SERVER_EUI);
    754              waitingForResponse = TRUE;
    755          
    756            } // Else
    757              // We happen to know the server's EUI without discovery, keep going.
    758          
    759            recordServerEuiAndGoToNextState(eui64);
    760          }
    761          

   \                                 In section .text, align 2, keep-with-next
    762          static void putImageInfoInMessage(void)
    763          {
   \                     putImageInfoInMessage:
   \   00000000   0xB510             PUSH     {R4,LR}
    764            emberAfPutInt16uInResp(currentDownloadFile.manufacturerId);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable129
   \   00000006   0x8920             LDRH     R0,[R4, #+8]
   \   00000008   0x.... 0x....      BL       emberAfPutInt16uInResp
    765            emberAfPutInt16uInResp(currentDownloadFile.imageTypeId);
   \   0000000C   0x8960             LDRH     R0,[R4, #+10]
   \   0000000E   0x.... 0x....      BL       emberAfPutInt16uInResp
    766            emberAfPutInt32uInResp(currentDownloadFile.firmwareVersion);
   \   00000012   0x68E0             LDR      R0,[R4, #+12]
   \   00000014   0xE8BD 0x4010      POP      {R4,LR}
   \   00000018   0x.... 0x....      B.W      emberAfPutInt32uInResp
    767          }
    768          

   \                                 In section .text, align 2, keep-with-next
    769          static BootloadState determineDownloadFileStatus(void)
    770          {
   \                     determineDownloadFileStatus:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    771            int32u currentOffset;
    772            EmberAfOtaStorageStatus 
    773              status = emberAfOtaStorageCheckTempDataCallback(&currentOffset, 
    774                                                              &totalImageSize,
    775                                                              &currentDownloadFile);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable122
   \   00000008   0xF104 0x0208      ADD      R2,R4,#+8
   \   0000000C   0xF104 0x0148      ADD      R1,R4,#+72
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
    776          
    777            if (status == EMBER_AF_OTA_STORAGE_PARTIAL_FILE_FOUND) {
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD10D             BNE.N    ??determineDownloadFileStatus_0
    778              otaPrintFlush();
    779              otaPrintln("Partial file download found, continuing from offset 0x%4X",
    780                         currentOffset);
   \   0000001A   0x9A00             LDR      R2,[SP, #+0]
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "Partial file download...">`
   \   00000020   0x.... 0x....      BL       ?Subroutine1
    781              otaPrintFlush();
    782              updateCurrentOffset(currentOffset);
   \                     ??CrossCallReturnLabel_19:
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x.... 0x....      BL       updateCurrentOffset
    783              updateDownloadFileVersion(currentDownloadFile.firmwareVersion);
    784              emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
   \   0000002A   0x6CA1             LDR      R1,[R4, #+72]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
    785              return BOOTLOAD_STATE_DOWNLOAD;
   \   00000032   0x2006             MOVS     R0,#+6
   \   00000034   0xE01E             B.N      ??determineDownloadFileStatus_1
    786            } else if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   \                     ??determineDownloadFileStatus_0:
   \   00000036   0xB9C0             CBNZ.N   R0,??determineDownloadFileStatus_2
    787              EmberAfOtaImageId currentVersionInfo;
    788              otaPrintln("Found fully downloaded file in storage (version 0x%4X).", 
    789                         currentDownloadFile.firmwareVersion);
   \   00000038   0x68E2             LDR      R2,[R4, #+12]
   \   0000003A   0x.... 0x....      ADR.W    R1,`?<Constant "Found fully downloade...">`
   \   0000003E   0x.... 0x....      BL       ?Subroutine1
    790              emberAfOtaClientVersionInfoCallback(&currentVersionInfo, NULL);
   \                     ??CrossCallReturnLabel_18:
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xA801             ADD      R0,SP,#+4
   \   00000046   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
    791              if (currentVersionInfo.firmwareVersion != currentDownloadFile.firmwareVersion) {
   \   0000004A   0x68E2             LDR      R2,[R4, #+12]
   \   0000004C   0x9B02             LDR      R3,[SP, #+8]
   \   0000004E   0x4293             CMP      R3,R2
   \   00000050   0xD005             BEQ.N    ??determineDownloadFileStatus_3
    792                otaPrintln("Found file in storage with different version (0x%4X) than current version (0x%4X)",
    793                           currentDownloadFile.firmwareVersion,
    794                           currentVersionInfo.firmwareVersion);
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "Found file in storage...">`
   \   00000056   0x.... 0x....      BL       ?Subroutine3
    795                return BOOTLOAD_STATE_VERIFY_IMAGE;
   \                     ??CrossCallReturnLabel_49:
   \   0000005A   0x2007             MOVS     R0,#+7
   \   0000005C   0xE00A             B.N      ??determineDownloadFileStatus_1
    796              } else {
    797                otaPrintln("File in storage is same as current running version (0x%4X)",
    798                           currentVersionInfo.firmwareVersion);
   \                     ??determineDownloadFileStatus_3:
   \   0000005E   0x461A             MOV      R2,R3
   \   00000060   0x.... 0x....      ADR.W    R1,`?<Constant "File in storage is sa...">`
   \   00000064   0x.... 0x....      BL       ?Subroutine1
    799              }
    800            } else {
   \                     ??CrossCallReturnLabel_17:
   \   00000068   0xE003             B.N      ??CrossCallReturnLabel_35
    801              otaPrintln("No image found in storage.");    
   \                     ??determineDownloadFileStatus_2:
   \   0000006A   0x.... 0x....      ADR.W    R1,`?<Constant "No image found in sto...">`
   \   0000006E   0x.... 0x....      BL       ?Subroutine2
    802            }
    803          
    804            emberAfAppFlush();
    805          
    806            return BOOTLOAD_STATE_QUERY_NEXT_IMAGE;
   \                     ??CrossCallReturnLabel_35:
   \   00000072   0x2005             MOVS     R0,#+5
   \                     ??determineDownloadFileStatus_1:
   \   00000074   0xB006             ADD      SP,SP,#+24
   \   00000076   0xBD10             POP      {R4,PC}          ;; return
    807          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    808          
    809          static void determineNextState(void)
    810          {
    811            currentBootloadState = determineDownloadFileStatus();
    812          
    813            switch (currentBootloadState) {
    814            case BOOTLOAD_STATE_QUERY_NEXT_IMAGE:
    815              queryNextImage(SEND_QUERY_NOW,
    816                             FALSE);   // query error?
    817              break;
    818            case BOOTLOAD_STATE_DOWNLOAD: 
    819              {
    820                EmberAfOtaStorageStatus status = emberAfOtaStorageDriverPrepareToResumeDownloadCallback();
    821                errors = 0;
    822                recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
    823                if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
    824                  continueImageDownload();
    825                } else if (status != EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
    826                  downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
    827          
    828                } // For operation-in-progress we fall-through and wait for the callback 
    829                  // later.
    830              }
    831              break;
    832            case BOOTLOAD_STATE_VERIFY_IMAGE:
    833              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);
    834              break;
    835            case BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE:
    836              askServerToRunUpgrade(START_NEW_TIMER);
    837              break;
    838            default:
    839              // Do nothing.  No other states should reach here.
    840              break;
    841            }
    842          }
    843          

   \                                 In section .text, align 2, keep-with-next
    844          static void recordUpgradeStatus(BootloadState state)
    845          {
   \                     recordUpgradeStatus:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    846            int8u upgradeStatus = bootloadStateToExternalState[state];
   \   00000004   0x.... 0x....      ADR.W    R1,bootloadStateToExternalState
   \   00000008   0x5C41             LDRB     R1,[R0, R1]
   \   0000000A   0xF88D 0x1008      STRB     R1,[SP, #+8]
    847            if (currentBootloadState != state) {
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable123
   \   00000012   0x7829             LDRB     R1,[R5, #+0]
   \   00000014   0x42A1             CMP      R1,R4
   \   00000016   0xD006             BEQ.N    ??CrossCallReturnLabel_16
    848              emberAfCoreFlush();
    849              otaPrintln("Bootload state: %p", 
    850                         bootloadStateNames[state]);
   \   00000018   0xEB05 0x0080      ADD      R0,R5,R0, LSL #+2
   \   0000001C   0x6A02             LDR      R2,[R0, #+32]
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "Bootload state: %p">`
   \   00000022   0x.... 0x....      BL       ?Subroutine1
    851              emberAfCoreFlush();
    852            }
    853            currentBootloadState = state;
   \                     ??CrossCallReturnLabel_16:
   \   00000026   0x702C             STRB     R4,[R5, #+0]
    854          
    855            emberAfWriteAttribute(myEndpoint,
    856                                  ZCL_OTA_BOOTLOAD_CLUSTER_ID, 
    857                                  ZCL_IMAGE_UPGRADE_STATUS_ATTRIBUTE_ID, 
    858                                  CLUSTER_MASK_CLIENT,
    859                                  (int8u*)&upgradeStatus,
    860                                  ZCL_ENUM8_ATTRIBUTE_TYPE);
   \   00000028   0x2030             MOVS     R0,#+48
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x2380             MOVS     R3,#+128
   \   00000032   0x2206             MOVS     R2,#+6
   \   00000034   0x2119             MOVS     R1,#+25
   \   00000036   0x7868             LDRB     R0,[R5, #+1]
   \   00000038   0x.... 0x....      BL       emberAfWriteAttribute
    861          }
   \   0000003C   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    862          

   \                                 In section .text, align 4, keep-with-next
    863          static EmberAfStatus commandParse(boolean defaultResponse,
    864                                            EmberAfClusterCommand* message)
    865          {
   \                     commandParse:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
    866            int8u commandId = (message->buffer[(ZCL_COMMAND_ID_INDEX
    867                                                + (int8u)defaultResponse)]);
   \   00000004   0x68A1             LDR      R1,[R4, #+8]
   \   00000006   0x1841             ADDS     R1,R0,R1
   \   00000008   0x788A             LDRB     R2,[R1, #+2]
    868            int8u index = EMBER_AF_ZCL_OVERHEAD;
    869          
    870            if (commandId > EM_AF_OTA_MAX_COMMAND_ID) {
   \   0000000A   0x2A0A             CMP      R2,#+10
   \   0000000C   0xDB05             BLT.N    ??commandParse_1
    871              otaPrintln("Bad OTA command: 0x%X", commandId);
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "Bad OTA command: 0x%X">`
   \   00000012   0x.... 0x....      BL       ?Subroutine1
    872              return EMBER_ZCL_STATUS_INVALID_FIELD;
   \                     ??CrossCallReturnLabel_15:
   \   00000016   0x2085             MOVS     R0,#+133
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}
    873            }
    874          
    875            if (!defaultResponse && message->bufLen < emAfOtaMinMessageLengths[commandId]) {
   \                     ??commandParse_1:
   \   0000001A   0xB960             CBNZ.N   R0,??commandParse_2
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable129_1
   \   00000020   0x5C51             LDRB     R1,[R2, R1]
   \   00000022   0x89A3             LDRH     R3,[R4, #+12]
   \   00000024   0x428B             CMP      R3,R1
   \   00000026   0xD206             BCS.N    ??commandParse_2
    876              otaPrintln("OTA command 0x%X too short (len %d < min %d)",
    877                         commandId,
    878                         message->bufLen,
    879                         emAfOtaMinMessageLengths[commandId]);
   \   00000028   0x9100             STR      R1,[SP, #+0]
   \   0000002A   0x.... 0x....      ADR.W    R1,`?<Constant "OTA command 0x%X too ...">`
   \   0000002E   0x.... 0x....      BL       ?Subroutine4
    880              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??CrossCallReturnLabel_56:
   \   00000032   0x2080             MOVS     R0,#+128
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}
    881            }
    882          
    883            if (message->source != serverNodeId) {
   \                     ??commandParse_2:
   \   00000036   0x.... 0x....      LDR.W    R5,??DataTable122
   \   0000003A   0x8B2B             LDRH     R3,[R5, #+24]
   \   0000003C   0x88E1             LDRH     R1,[R4, #+6]
   \   0000003E   0x4299             CMP      R1,R3
   \   00000040   0xD006             BEQ.N    ??commandParse_3
    884              otaPrintln("OTA command from unrecognized server 0x%2X.  My OTA server: 0x%2X",
    885                         message->source,
    886                         serverNodeId);
   \   00000042   0x460A             MOV      R2,R1
   \   00000044   0x.... 0x....      ADR.W    R1,`?<Constant "OTA command from unre...">`
   \   00000048   0x.... 0x....      BL       ?Subroutine3
    887              return EMBER_ZCL_STATUS_NOT_AUTHORIZED;
   \                     ??CrossCallReturnLabel_48:
   \   0000004C   0x207E             MOVS     R0,#+126
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}
    888            }
    889          
    890            // While not all command validation has taken place at this point, we 
    891            // flag that we are not waiting for a response anymore.  We want to make sure
    892            // that our sleepy can go to sleep if it wants.  The likelihood of an
    893            // invalid command followed by a properly formatted one is extremely low.
    894            // Either the server knows the correct format or it doesn't.
    895            waitingForResponse = FALSE;
   \                     ??commandParse_3:
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x7129             STRB     R1,[R5, #+4]
    896          
    897            // NOTE:  In order to support Default Response, we list the CLIENT commands here
    898            // as well in case the server used that to respond.
    899            switch (commandId) {
   \   00000054   0x1CC3             ADDS     R3,R0,#+3
   \   00000056   0x782D             LDRB     R5,[R5, #+0]
   \   00000058   0x.... 0x....      ADR.W    R1,`?<Constant "Got unexpected %p.  I...">`
   \   0000005C   0x2A07             CMP      R2,#+7
   \   0000005E   0xD83E             BHI.N    ??commandParse_4
   \   00000060   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??commandParse_0:
   \   00000064   0x04 0x14          DC8      0x4,0x14,0x14,0x20
   \              0x14 0x20    
   \   00000068   0x20 0x20          DC8      0x20,0x20,0x2C,0x2C
   \              0x2C 0x2C    
    900            case ZCL_IMAGE_NOTIFY_COMMAND_ID: {
    901              boolean broadcast = (EMBER_INCOMING_UNICAST != message->type);
   \                     ??commandParse_5:
   \   0000006C   0x7920             LDRB     R0,[R4, #+4]
   \   0000006E   0xB100             CBZ.N    R0,??commandParse_6
   \   00000070   0x2001             MOVS     R0,#+1
    902              if (currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??commandParse_6:
   \   00000072   0x2D05             CMP      R5,#+5
   \   00000074   0xBF18             IT       NE 
   \   00000076   0x.... 0x....      ADRNE.W  R2,`?<Constant "Image notify">`
    903                otaPrintln("Got unexpected %p.  Ignored.",
    904                           "Image notify");
   \   0000007A   0xD123             BNE.N    ??commandParse_7
    905                return EMBER_ZCL_STATUS_FAILURE;
    906              }
    907              return imageNotifyParse(broadcast, message->buffer, index, message->bufLen);
   \   0000007C   0x89A3             LDRH     R3,[R4, #+12]
   \   0000007E   0xB2DB             UXTB     R3,R3
   \   00000080   0x2203             MOVS     R2,#+3
   \   00000082   0x68A1             LDR      R1,[R4, #+8]
   \   00000084   0xB001             ADD      SP,SP,#+4
   \   00000086   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   0000008A   0x....             B.N      imageNotifyParse
    908            }
    909            case ZCL_QUERY_NEXT_IMAGE_RESPONSE_COMMAND_ID: 
    910            case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
    911              if (currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??commandParse_8:
   \   0000008C   0x2D05             CMP      R5,#+5
   \   0000008E   0xBF18             IT       NE 
   \   00000090   0x.... 0x....      ADRNE.W  R2,`?<Constant "Query next image resp...">`
    912                otaPrintln("Got unexpected %p.  Ignored.",
    913                           "Query next image response");
   \   00000094   0xD116             BNE.N    ??commandParse_7
    914                return EMBER_ZCL_STATUS_FAILURE;
    915              }
    916              return queryNextImageResponseParse(message->buffer, 
    917                                                 index + defaultResponse,
    918                                                 message->bufLen);
   \   00000096   0x89A2             LDRH     R2,[R4, #+12]
   \   00000098   0xB2D2             UXTB     R2,R2
   \   0000009A   0xB2D9             UXTB     R1,R3
   \   0000009C   0x68A0             LDR      R0,[R4, #+8]
   \   0000009E   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   000000A2   0x....             B.N      queryNextImageResponseParse
    919            }
    920            case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
    921            case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
    922            case ZCL_IMAGE_BLOCK_RESPONSE_COMMAND_ID: {
    923              if (currentBootloadState != BOOTLOAD_STATE_DOWNLOAD) {
   \                     ??commandParse_9:
   \   000000A4   0x2D06             CMP      R5,#+6
   \   000000A6   0xBF18             IT       NE 
   \   000000A8   0x.... 0x....      ADRNE.W  R2,`?<Constant "Image block response">`
    924                otaPrintln("Got unexpected %p.  Ignored.",
    925                           "Image block response");
   \   000000AC   0xD10A             BNE.N    ??commandParse_7
    926                return EMBER_ZCL_STATUS_FAILURE;
    927              }
    928              return imageBlockResponseParse(message->buffer, 
    929                                             index + defaultResponse,
    930                                             message->bufLen);
   \   000000AE   0x89A2             LDRH     R2,[R4, #+12]
   \   000000B0   0xB2D2             UXTB     R2,R2
   \   000000B2   0xB2D9             UXTB     R1,R3
   \   000000B4   0x68A0             LDR      R0,[R4, #+8]
   \   000000B6   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   000000BA   0x....             B.N      imageBlockResponseParse
    931            }
    932            case ZCL_UPGRADE_END_RESPONSE_COMMAND_ID:
    933            case ZCL_UPGRADE_END_REQUEST_COMMAND_ID: {
    934              if (currentBootloadState != BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE) {
   \                     ??commandParse_10:
   \   000000BC   0x2D08             CMP      R5,#+8
   \   000000BE   0xD005             BEQ.N    ??commandParse_11
    935                otaPrintln("Got unexpected %p.  Ignored.",
    936                           "Upgrade end response");
   \   000000C0   0x.... 0x....      ADR.W    R2,`?<Constant "Upgrade end response">`
   \                     ??commandParse_7:
   \   000000C4   0x.... 0x....      BL       ?Subroutine1
    937                return EMBER_ZCL_STATUS_FAILURE;
   \                     ??CrossCallReturnLabel_14:
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0xBD32             POP      {R1,R4,R5,PC}
    938              }
    939              return upgradeEndResponseParse((defaultResponse
    940                                              ? message->buffer[index]
    941                                              : EMBER_ZCL_STATUS_SUCCESS),
    942                                             message->buffer, 
    943                                             message->bufLen);
   \                     ??commandParse_11:
   \   000000CC   0x68A1             LDR      R1,[R4, #+8]
   \   000000CE   0xB100             CBZ.N    R0,??commandParse_12
   \   000000D0   0x78C8             LDRB     R0,[R1, #+3]
   \                     ??commandParse_12:
   \   000000D2   0x89A2             LDRH     R2,[R4, #+12]
   \   000000D4   0xB2D2             UXTB     R2,R2
   \   000000D6   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   000000DA   0x.... 0x....      B.W      upgradeEndResponseParse
    944            }
    945            default:
    946              // Fall through. Already printed info about the bad command ID.
    947              break;
    948            }
    949            return EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   \                     ??commandParse_4:
   \   000000DE   0x2081             MOVS     R0,#+129
   \   000000E0   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    950          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    951          

   \                                 In section .text, align 2, keep-with-next
    952          boolean emberAfOtaClientIncomingMessageRawCallback(EmberAfClusterCommand* message)
    953          {
   \                     emberAfOtaClientIncomingMessageRawCallback:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    954            EmberAfStatus zclStatus = commandParse(FALSE,   // default response?
    955                                                   message); 
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       commandParse
   \   0000000C   0x0005             MOVS     R5,R0
    956            if (zclStatus) {
   \   0000000E   0xD00C             BEQ.N    ??emberAfOtaClientIncomingMessageRawCallback_0
    957              emberAfOtaBootloadClusterFlush();
    958              emberAfOtaBootloadClusterPrintln("%p: failed parsing OTA cmd 0x%x", 
    959                                               "Error",
    960                                               message->commandId);
   \   00000010   0x7CE3             LDRB     R3,[R4, #+19]
   \   00000012   0x.... 0x....      ADR.W    R2,`?<Constant "Error">`
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "%p: failed parsing OT...">`
   \   0000001A   0x.... 0x....      BL       ?Subroutine3
    961              if (message->type == EMBER_INCOMING_UNICAST) {
   \                     ??CrossCallReturnLabel_47:
   \   0000001E   0x7920             LDRB     R0,[R4, #+4]
   \   00000020   0xB120             CBZ.N    R0,??emberAfOtaClientIncomingMessageRawCallback_1
    962                // We don't want to respond to invalid broadcast messages with
    963                // a default response.
    964                return EMBER_ZCL_STATUS_SUCCESS;
    965              }
    966              emberAfSendDefaultResponse(message, zclStatus);
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       emberAfSendDefaultResponse
    967            }
    968          
    969            return TRUE;
   \                     ??emberAfOtaClientIncomingMessageRawCallback_0:
   \   0000002A   0x2001             MOVS     R0,#+1
   \                     ??emberAfOtaClientIncomingMessageRawCallback_1:
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    970          }
    971          

   \                                 In section .text, align 2, keep-with-next
    972          void emberAfOtaBootloadClusterClientDefaultResponseCallback(int8u endpoint, 
    973                                                                      int8u commandId, 
    974                                                                      EmberAfStatus status)
    975          {
   \                     emberAfOtaBootloadClusterClientDefaultResponseCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
    976            EmberAfClusterCommand* command = emberAfCurrentCommand();
   \   00000002   0x.... 0x....      LDR.W    R3,??DataTable129_2
   \   00000006   0x681C             LDR      R4,[R3, #+0]
    977          
    978            if (endpoint != myEndpoint) {
   \   00000008   0x.... 0x....      LDR.W    R3,??DataTable122
   \   0000000C   0x785B             LDRB     R3,[R3, #+1]
   \   0000000E   0x4298             CMP      R0,R3
   \   00000010   0xD10B             BNE.N    ??emberAfOtaBootloadClusterClientDefaultRespons_0
    979              return;
    980            }
    981            if (status == EMBER_ZCL_STATUS_SUCCESS) {
   \   00000012   0xB152             CBZ.N    R2,??emberAfOtaBootloadClusterClientDefaultRespons_0
    982              // The only default response we care about is non-success values.
    983              // That will mean the server failed processing for some reason,
    984              // or wants to abort.  Successful responses will send a non-default
    985              // response message.
    986              return;
    987            }
    988            otaPrintln("OTA Default response to command ID 0x%X, status 0x%X",
    989                       commandId,
    990                       status);
   \   00000014   0x4613             MOV      R3,R2
   \   00000016   0x460A             MOV      R2,R1
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "OTA Default response ...">`
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
    991          
    992            commandParse(TRUE, // default response?
    993                         command);
   \                     ??CrossCallReturnLabel_46:
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x....             B.N      commandParse
   \                     ??emberAfOtaBootloadClusterClientDefaultRespons_0:
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
    994          }
    995          
    996          // The buffer must point to the start of the image notify command,
    997          // not the start of the ZCL frame.  It is assumed that the length
    998          // of the buffer is minimum for image notify command.

   \                                 In section .text, align 2, keep-with-next
    999          static EmberAfStatus imageNotifyParse(boolean broadcast, 
   1000                                                int8u* buffer, 
   1001                                                int8u index, 
   1002                                                int8u length)
   1003          {
   \                     imageNotifyParse:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4699             MOV      R9,R3
   1004            int16u manufacturerId;
   1005            int16u imageTypeId;
   1006            EmberAfOtaImageId myId;
   1007            int8u payloadType = emberAfGetInt8u(buffer, index, length);
   \   0000000A   0x5D15             LDRB     R5,[R2, R4]
   1008            int8u queryJitter = emberAfGetInt8u(buffer, index + 1, length);
   \   0000000C   0x1911             ADDS     R1,R2,R4
   \   0000000E   0x784E             LDRB     R6,[R1, #+1]
   1009            index += 2;
   \   00000010   0x1C97             ADDS     R7,R2,#+2
   1010          
   1011            if (!broadcast) {
   \   00000012   0x.... 0x....      ADR.W    R8,`?<Constant "Image notify command">`
   \   00000016   0xB960             CBNZ.N   R0,??imageNotifyParse_0
   1012              // Spec says to always respond to unicasts regardless of the parameters.
   1013              otaPrintln("%p unicast, querying",
   1014                         "Image notify command");
   \   00000018   0x4642             MOV      R2,R8
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "%p unicast, querying">`
   \   0000001E   0x.... 0x....      BL       ?Subroutine1
   1015              goto sendQuery;
   1016            }
   1017          
   1018            emberAfOtaClientVersionInfoCallback(&myId, NULL);
   1019          
   1020            // We assume that if the message is broadcast then our ZCL
   1021            // code will NOT send the default response.
   1022              
   1023            if (payloadType > IMAGE_NOTIFY_LAST_VALID_TYPE) {
   1024              otaPrintln("%p %p payload type 0x%X", 
   1025                         "Invalid",
   1026                         "Image notify command",
   1027                         payloadType);
   1028              return EMBER_ZCL_STATUS_SUCCESS;
   1029            }
   1030            if (queryJitter < 1 || queryJitter > 100) {
   1031              otaPrintln("%p %p: out of range jitter %d", 
   1032                         "Invalid",
   1033                         "Image notify command",
   1034                         queryJitter);
   1035              return EMBER_ZCL_STATUS_SUCCESS;
   1036            }
   1037            if (length != imageNotifyPayloadLengths[payloadType]) {
   1038              otaPrintln("%p %p: payload length doesn't match type 0x%X (%d < %d)",
   1039                         "Invalid",
   1040                         "Image notify command",
   1041                         payloadType,
   1042                         length,
   1043                         imageNotifyPayloadLengths[payloadType]);
   1044              // Although this truly is an error, we don't send a response because it could
   1045              // be a broadcast.
   1046              return EMBER_ZCL_STATUS_SUCCESS;
   1047            }
   1048            
   1049            if (payloadType >= IMAGE_NOTIFY_MANUFACTURER_ONLY_TYPE) {
   1050              manufacturerId = emberAfGetInt16u(buffer, index, length);
   1051              index += 2;
   1052              if (manufacturerId != myId.manufacturerId) {
   1053                otaPrintln("%p %p due to non-matching manufacturer ID",
   1054                           "Ignoring",
   1055                           "Image notify command");
   1056                return EMBER_ZCL_STATUS_SUCCESS;
   1057              }
   1058            }
   1059          
   1060            if (payloadType >= IMAGE_NOTIFY_MFG_AND_IMAGE_TYPE) {
   1061              imageTypeId = emberAfGetInt16u(buffer, index, length);
   1062              index += 2;
   1063              if (imageTypeId != myId.imageTypeId) {
   1064                otaPrintln("%p %p due to non-matching image type ID",
   1065                           "Ignoring",
   1066                           "Image notify command");
   1067                return EMBER_ZCL_STATUS_SUCCESS;
   1068              }
   1069            }
   1070          
   1071            if (payloadType >= IMAGE_NOTIFY_FULL_VERSION_TYPE) {
   1072              // Could add some additional checking about the minimum allowed version
   1073              // number, but it can still be caught after the download.
   1074              int32u version = emberAfGetInt32u(buffer, index, length);
   1075              index += 4;
   1076              if (version == myId.firmwareVersion) {
   1077                // Spec. says that if the firmware version matches, we should ignore.
   1078                // A matching version number would be a re-install, which can only
   1079                // be done via image notify by a unicast.  The server can force
   1080                // a mass upgrade or downgrade by sending out a different version
   1081                // than what devices have.
   1082                otaPrintln("%p %p due to matching firmware version",
   1083                           "Ignoring",
   1084                           "Image notify command");
   1085                return EMBER_ZCL_STATUS_SUCCESS;
   1086              }
   1087            }
   1088          
   1089            // Check QueryJitter value.  For QueryJitter value less than a 'must response'
   1090            // value (value of 100), we need to introduce jitter in our reply by picking
   1091            // a random number between 1 and 100.  We only send reply if the value picked
   1092            // is less than or equal to the QueryJitter value.
   1093            if (queryJitter < 100) {
   1094              int8u random = (((int8u)halCommonGetRandom())%100) + 1;
   1095              if(random > queryJitter) {
   1096                otaPrintln("%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)",
   1097                           "Ignoring",
   1098                           "Image notify command",
   1099                           queryJitter, 
   1100                           random);
   1101                return EMBER_ZCL_STATUS_SUCCESS;
   1102              }
   1103            }
   1104          
   1105           sendQuery:
   1106            // By saying "timeout reached" we want to indicate that a new query should kick off
   1107            // immediately.
   1108            queryNextImage(SEND_QUERY_NOW,
   1109                           FALSE);  // query error occurred?
   \                     ??CrossCallReturnLabel_13:
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x.... 0x....      BL       queryNextImage
   1110            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageNotifyParse_1:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xB008             ADD      SP,SP,#+32
   \   0000002E   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   \                     ??imageNotifyParse_0:
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xA803             ADD      R0,SP,#+12
   \   00000036   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   \   0000003A   0x.... 0x....      ADR.W    R2,`?<Constant "Invalid">`
   \   0000003E   0x2D04             CMP      R5,#+4
   \   00000040   0xDB06             BLT.N    ??imageNotifyParse_2
   \   00000042   0x9500             STR      R5,[SP, #+0]
   \   00000044   0x4643             MOV      R3,R8
   \   00000046   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p payload type 0x%X">`
   \                     ??imageNotifyParse_3:
   \   0000004A   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_55:
   \   0000004E   0xE7EC             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_2:
   \   00000050   0x1E70             SUBS     R0,R6,#+1
   \   00000052   0x2864             CMP      R0,#+100
   \   00000054   0xD304             BCC.N    ??imageNotifyParse_4
   \   00000056   0x9600             STR      R6,[SP, #+0]
   \   00000058   0x4643             MOV      R3,R8
   \   0000005A   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p: out of range j...">`
   \   0000005E   0xE7F4             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_4:
   \   00000060   0x.... 0x....      ADR.W    R0,imageNotifyPayloadLengths
   \   00000064   0x5C28             LDRB     R0,[R5, R0]
   \   00000066   0x4581             CMP      R9,R0
   \   00000068   0xD007             BEQ.N    ??imageNotifyParse_5
   \   0000006A   0x9002             STR      R0,[SP, #+8]
   \   0000006C   0xF8CD 0x9004      STR      R9,[SP, #+4]
   \   00000070   0x9500             STR      R5,[SP, #+0]
   \   00000072   0x4643             MOV      R3,R8
   \   00000074   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p: payload length...">`
   \   00000078   0xE7E7             B.N      ??imageNotifyParse_3
   \                     ??imageNotifyParse_5:
   \   0000007A   0x.... 0x....      ADR.W    R10,`?<Constant "Ignoring">`
   \   0000007E   0x2D01             CMP      R5,#+1
   \   00000080   0xDB0D             BLT.N    ??imageNotifyParse_6
   \   00000082   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_66:
   \   00000086   0x1CBF             ADDS     R7,R7,#+2
   \   00000088   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD006             BEQ.N    ??imageNotifyParse_6
   \   00000090   0x4643             MOV      R3,R8
   \   00000092   0x4652             MOV      R2,R10
   \   00000094   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p due to non-matc...">`
   \                     ??imageNotifyParse_7:
   \   00000098   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_45:
   \   0000009C   0xE7C5             B.N      ??imageNotifyParse_1
   \                     ??imageNotifyParse_6:
   \   0000009E   0x2D02             CMP      R5,#+2
   \   000000A0   0xDB0B             BLT.N    ??imageNotifyParse_8
   \   000000A2   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_65:
   \   000000A6   0x1CBF             ADDS     R7,R7,#+2
   \   000000A8   0xF8BD 0x100E      LDRH     R1,[SP, #+14]
   \   000000AC   0x4288             CMP      R0,R1
   \   000000AE   0xD004             BEQ.N    ??imageNotifyParse_8
   \   000000B0   0x4643             MOV      R3,R8
   \   000000B2   0x4652             MOV      R2,R10
   \   000000B4   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p due to non-matc...">_1`
   \   000000B8   0xE7EE             B.N      ??imageNotifyParse_7
   \                     ??imageNotifyParse_8:
   \   000000BA   0x2D03             CMP      R5,#+3
   \   000000BC   0xDB0B             BLT.N    ??imageNotifyParse_9
   \   000000BE   0x464A             MOV      R2,R9
   \   000000C0   0xB2F9             UXTB     R1,R7
   \   000000C2   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_62:
   \   000000C6   0x9904             LDR      R1,[SP, #+16]
   \   000000C8   0x4288             CMP      R0,R1
   \   000000CA   0xD104             BNE.N    ??imageNotifyParse_9
   \   000000CC   0x4643             MOV      R3,R8
   \   000000CE   0x4652             MOV      R2,R10
   \   000000D0   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p due to matching...">`
   \   000000D4   0xE7E0             B.N      ??imageNotifyParse_7
   \                     ??imageNotifyParse_9:
   \   000000D6   0x2E64             CMP      R6,#+100
   \   000000D8   0xDAA3             BGE.N    ??CrossCallReturnLabel_13
   \   000000DA   0x.... 0x....      BL       halCommonGetRandom
   \   000000DE   0xB2C0             UXTB     R0,R0
   \   000000E0   0x2164             MOVS     R1,#+100
   \   000000E2   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000000E6   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0xB2C0             UXTB     R0,R0
   \   000000EE   0x4286             CMP      R6,R0
   \   000000F0   0xDA97             BGE.N    ??CrossCallReturnLabel_13
   \   000000F2   0x9001             STR      R0,[SP, #+4]
   \   000000F4   0x9600             STR      R6,[SP, #+0]
   \   000000F6   0x4643             MOV      R3,R8
   \   000000F8   0x4652             MOV      R2,R10
   \   000000FA   0x.... 0x....      ADR.W    R1,`?<Constant "%p %p, Rx\\'d Jitter (0...">`
   \   000000FE   0xE7A4             B.N      ??imageNotifyParse_3
   1111          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x464A             MOV      R2,R9
   \   00000002   0xB2FF             UXTB     R7,R7
   \   00000004   0x4639             MOV      R1,R7
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      B.W      emberAfGetInt16u

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x4639             MOV      R1,R7
   \                     ??Subroutine6_0:
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      emberAfGetInt32u
   1112          

   \                                 In section .text, align 2, keep-with-next
   1113          static void startDownload(int32u newVersion)
   1114          {
   \                     startDownload:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
   1115            EmberAfOtaStorageStatus status;
   1116            otaPrintln("Starting download, Version 0x%4X",
   1117                       newVersion);
   \   00000006   0x4622             MOV      R2,R4
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "Starting download, Ve...">`
   \   0000000C   0x.... 0x....      BL       ?Subroutine1
   1118            emAfPrintPercentageSetStartAndEnd(0, totalImageSize);
   \                     ??CrossCallReturnLabel_12:
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable122
   \   00000014   0x6CA9             LDR      R1,[R5, #+72]
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       emAfPrintPercentageSetStartAndEnd
   1119            updateDownloadFileVersion(newVersion);
   \   0000001C   0x60EC             STR      R4,[R5, #+12]
   1120            updateCurrentOffset(0);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       updateCurrentOffset
   1121            updateMinBlockRequestPeriodAttribute(0);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x83A8             STRH     R0,[R5, #+28]
   1122          
   1123            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   \   00000028   0x2006             MOVS     R0,#+6
   \   0000002A   0x.... 0x....      BL       recordUpgradeStatus
   1124          
   1125            errors = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x70E8             STRB     R0,[R5, #+3]
   1126          
   1127            status = emberAfOtaStorageClearTempDataCallback();
   \   00000032   0x.... 0x....      BL       emberAfOtaStorageClearTempDataCallback
   1128          
   1129            if (status == EMBER_AF_OTA_STORAGE_SUCCESS) {
   \   00000036   0xB9B0             CBNZ.N   R0,??startDownload_0
   1130          
   1131              // For the "OTA Storage Simple" plugin, there is only one image.
   1132              // A call to clear the temp data (above) will also wipe out a fully
   1133              // downloaded image.  So we don't actually have to call 
   1134              // emberAfOtaStorageDeleteImageCallback() as well.  We only worry
   1135              // about a result of EMBER_AF_OPERATION_IN_PROGRESS returned from the first
   1136              // delete.
   1137          
   1138              // For the "OTA POSIX Filesystem" plugin there may be multiple
   1139              // images, so we may have to delete the temp data AND another image
   1140              // on disk.  However we assume that delete operations are extremely
   1141              // fast and thus won't return EMBER_AF_OPERATION_IN_PROGRESS.
   1142          
   1143              EmberAfOtaImageId oldImageId = emberAfOtaStorageSearchCallback(currentDownloadFile.manufacturerId,
   1144                                                                             currentDownloadFile.imageTypeId,
   1145                                                                             (hardwareVersion == 0xFFFF
   1146                                                                              ? NULL
   1147                                                                              : &hardwareVersion));
   \   00000038   0x8B68             LDRH     R0,[R5, #+26]
   \   0000003A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xBF0C             ITE      EQ 
   \   00000042   0x2300             MOVEQ    R3,#+0
   \   00000044   0xF205 0x031A      ADDWNE   R3,R5,#+26
   \   00000048   0x896A             LDRH     R2,[R5, #+10]
   \   0000004A   0x8929             LDRH     R1,[R5, #+8]
   \   0000004C   0xA800             ADD      R0,SP,#+0
   \   0000004E   0x.... 0x....      BL       emberAfOtaStorageSearchCallback
   1148          
   1149              if (emberAfIsOtaImageIdValid(&oldImageId)) { 
   \   00000052   0xA800             ADD      R0,SP,#+0
   \   00000054   0x.... 0x....      BL       emberAfIsOtaImageIdValid
   \   00000058   0xB110             CBZ.N    R0,??startDownload_1
   1150                // Wipe out any existing file matching the same values as the one we 
   1151                // are going to download.
   1152          
   1153                emberAfOtaStorageDeleteImageCallback(&oldImageId);
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       emberAfOtaStorageDeleteImageCallback
   1154              }
   1155              continueImageDownload();
   \                     ??startDownload_1:
   \   00000060   0x.... 0x....      BL       continueImageDownload
   \   00000064   0xE00D             B.N      ??startDownload_2
   1156          
   1157            } else if (status == EMBER_AF_OTA_STORAGE_OPERATION_IN_PROGRESS) {
   \                     ??startDownload_0:
   \   00000066   0x2804             CMP      R0,#+4
   \   00000068   0xD104             BNE.N    ??startDownload_3
   1158              // Disable the timer since we are waiting for the erase event to complete
   1159              // and execute our callback, not the timer to expire.
   1160              emberAfDeactivateClientTick(myEndpoint, ZCL_OTA_BOOTLOAD_CLUSTER_ID);
   \   0000006A   0x2119             MOVS     R1,#+25
   \   0000006C   0x7868             LDRB     R0,[R5, #+1]
   \   0000006E   0x.... 0x....      BL       emberAfDeactivateClientTick
   \   00000072   0xE006             B.N      ??startDownload_2
   1161          
   1162            } else {
   1163              otaPrintln("Error: Failed to erase old temp data.");
   \                     ??startDownload_3:
   \   00000074   0x.... 0x....      ADR.W    R1,`?<Constant "Error: Failed to eras...">`
   \   00000078   0x.... 0x....      BL       ?Subroutine2
   1164              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \                     ??CrossCallReturnLabel_34:
   \   0000007C   0x2004             MOVS     R0,#+4
   \   0000007E   0x.... 0x....      BL       downloadAndVerifyFinish
   1165            }
   1166          }
   \                     ??startDownload_2:
   \   00000082   0xB005             ADD      SP,SP,#+20
   \   00000084   0xBD30             POP      {R4,R5,PC}       ;; return
   1167          
   1168          // We expect that the minimum length for this command has already been checked.

   \                                 In section .text, align 2, keep-with-next
   1169          static EmberAfStatus queryNextImageResponseParse(int8u* buffer, 
   1170                                                           int8u index, 
   1171                                                           int8u length)
   1172          {
   \                     queryNextImageResponseParse:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4605             MOV      R5,R0
   \   00000008   0x4690             MOV      R8,R2
   1173            int8u status;
   1174            EmberAfStatus zclStatus;
   1175            EmberAfOtaImageId imageId;
   1176            boolean isError = FALSE;
   \   0000000A   0x2700             MOVS     R7,#+0
   1177          
   1178            status = emberAfGetInt8u(buffer, index, length);
   \   0000000C   0x5D4B             LDRB     R3,[R1, R5]
   1179            index++;
   \   0000000E   0x1C4E             ADDS     R6,R1,#+1
   1180            
   1181            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   00000010   0x.... 0x....      ADR.W    R4,`?<Constant "Query next image resp...">`
   \   00000014   0xB16B             CBZ.N    R3,??queryNextImageResponseParse_0
   1182              otaPrintln("%p returned 0x%X.  No new image to download.", 
   1183                         "Query next image response",
   1184                         status);
   \   00000016   0x4622             MOV      R2,R4
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "%p returned 0x%X.  No...">`
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
   1185              zclStatus = EMBER_ZCL_STATUS_SUCCESS;
   \                     ??CrossCallReturnLabel_44:
   \   00000020   0x2400             MOVS     R4,#+0
   1186              goto queryNextImageResponseDone;
   1187            }
   1188            if (length < QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH) {
   1189              otaPrintln("%p too short (%d < %d)",
   1190                         "Query next image response",
   1191                         length,
   1192                         QUERY_NEXT_IMAGE_SUCCESS_RESPONSE_MIN_LENGTH);
   1193              zclStatus = EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1194              isError = TRUE;
   1195              goto queryNextImageResponseDone;
   1196            }
   1197            otaPrintln("%p: New image is available for download.",
   1198                       "Query next image response");
   1199            
   1200            index += emAfOtaParseImageIdFromMessage(&imageId,
   1201                                                    &(buffer[index]),
   1202                                                    length - index);
   1203            totalImageSize = emberAfGetInt32u(buffer, index, length);
   1204          
   1205            if (imageId.manufacturerId != currentDownloadFile.manufacturerId
   1206                || imageId.imageTypeId != currentDownloadFile.imageTypeId
   1207                || totalImageSize == 0) {
   1208              otaPrintln("%p is not using my image info.",
   1209                         "Query next image response");
   1210              isError = TRUE;
   1211              zclStatus = EMBER_ZCL_STATUS_INVALID_FIELD;
   1212              goto queryNextImageResponseDone;
   1213          
   1214            } else if (totalImageSize > emberAfOtaStorageDriverMaxDownloadSizeCallback()) {
   1215              otaPrintln("ERROR: Next Image is too big to store (0x%4X > 0x%4X)",
   1216                         totalImageSize,
   1217                         emberAfOtaStorageDriverMaxDownloadSizeCallback());
   1218              isError = TRUE;
   1219              zclStatus = EMBER_ZCL_STATUS_INSUFFICIENT_SPACE;
   1220              goto queryNextImageResponseDone;
   1221            } else {
   1222              startDownload(imageId.firmwareVersion);
   1223              return EMBER_ZCL_STATUS_SUCCESS;
   1224            }
   1225          
   1226           queryNextImageResponseDone:
   1227            queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1228                           isError);
   \                     ??queryNextImageResponseParse_1:
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       queryNextImage
   1229            return zclStatus;
   \   0000002A   0x4620             MOV      R0,R4
   \                     ??queryNextImageResponseParse_2:
   \   0000002C   0xB006             ADD      SP,SP,#+24
   \   0000002E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??queryNextImageResponseParse_0:
   \   00000032   0xF1B8 0x0F10      CMP      R8,#+16
   \   00000036   0xD20A             BCS.N    ??queryNextImageResponseParse_3
   \   00000038   0x2010             MOVS     R0,#+16
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0x4643             MOV      R3,R8
   \   0000003E   0x4622             MOV      R2,R4
   \   00000040   0x.... 0x....      ADR.W    R1,`?<Constant "%p too short (%d < %d)">`
   \   00000044   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_54:
   \   00000048   0x2480             MOVS     R4,#+128
   \   0000004A   0x2701             MOVS     R7,#+1
   \   0000004C   0xE7E9             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_3:
   \   0000004E   0x4622             MOV      R2,R4
   \   00000050   0x.... 0x....      ADR.W    R1,`?<Constant "%p: New image is avai...">`
   \   00000054   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_11:
   \   00000058   0xEBA8 0x0206      SUB      R2,R8,R6
   \   0000005C   0xB2D2             UXTB     R2,R2
   \   0000005E   0xB2F7             UXTB     R7,R6
   \   00000060   0x1979             ADDS     R1,R7,R5
   \   00000062   0xA801             ADD      R0,SP,#+4
   \   00000064   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   00000068   0x4642             MOV      R2,R8
   \   0000006A   0x19C1             ADDS     R1,R0,R7
   \   0000006C   0xB2C9             UXTB     R1,R1
   \   0000006E   0x4628             MOV      R0,R5
   \   00000070   0x.... 0x....      BL       emberAfGetInt32u
   \   00000074   0x.... 0x....      LDR.W    R5,??DataTable122
   \   00000078   0x64A8             STR      R0,[R5, #+72]
   \   0000007A   0xF8BD 0x1004      LDRH     R1,[SP, #+4]
   \   0000007E   0x892A             LDRH     R2,[R5, #+8]
   \   00000080   0x4291             CMP      R1,R2
   \   00000082   0xBF02             ITTT     EQ 
   \   00000084   0xF8BD 0x1006      LDRHEQ   R1,[SP, #+6]
   \   00000088   0x896A             LDRHEQ   R2,[R5, #+10]
   \   0000008A   0x4291             CMPEQ    R1,R2
   \   0000008C   0xD100             BNE.N    ??queryNextImageResponseParse_4
   \   0000008E   0xB938             CBNZ.N   R0,??queryNextImageResponseParse_5
   \                     ??queryNextImageResponseParse_4:
   \   00000090   0x4622             MOV      R2,R4
   \   00000092   0x.... 0x....      ADR.W    R1,`?<Constant "%p is not using my im...">`
   \   00000096   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_10:
   \   0000009A   0x2701             MOVS     R7,#+1
   \   0000009C   0x2485             MOVS     R4,#+133
   \   0000009E   0xE7C0             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_5:
   \   000000A0   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000A4   0x6CA9             LDR      R1,[R5, #+72]
   \   000000A6   0x4288             CMP      R0,R1
   \   000000A8   0xD20A             BCS.N    ??queryNextImageResponseParse_6
   \   000000AA   0x.... 0x....      BL       emberAfOtaStorageDriverMaxDownloadSizeCallback
   \   000000AE   0x4603             MOV      R3,R0
   \   000000B0   0x6CAA             LDR      R2,[R5, #+72]
   \   000000B2   0x.... 0x....      ADR.W    R1,`?<Constant "ERROR: Next Image is ...">`
   \   000000B6   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_43:
   \   000000BA   0x2701             MOVS     R7,#+1
   \   000000BC   0x2489             MOVS     R4,#+137
   \   000000BE   0xE7B0             B.N      ??queryNextImageResponseParse_1
   \                     ??queryNextImageResponseParse_6:
   \   000000C0   0x9802             LDR      R0,[SP, #+8]
   \   000000C2   0x.... 0x....      BL       startDownload
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0xE7B0             B.N      ??queryNextImageResponseParse_2
   1230          }
   1231          

   \                                 In section .text, align 2, keep-with-next
   1232          static void sendMessage(int8u cmdId, int8u upgradeEndStatus, int32u timer)
   1233          {
   \                     sendMessage:
   \   00000000   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4689             MOV      R9,R1
   \   00000008   0x4692             MOV      R10,R2
   1234            int8u fieldControl = 0;
   \   0000000A   0x2400             MOVS     R4,#+0
   1235            EmberAfProfileId appProfile;
   1236          
   1237            // Figure out the right app profile ID based on the endpoint descriptor
   1238            appProfile = emberAfProfileIdFromIndex(emberAfIndexFromEndpoint(myEndpoint));
   \   0000000C   0x....             LDR.N    R5,??DataTable122
   \   0000000E   0x7868             LDRB     R0,[R5, #+1]
   \   00000010   0x.... 0x....      BL       emberAfIndexFromEndpoint
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable126
   \   00000018   0xEB01 0x1000      ADD      R0,R1,R0, LSL #+4
   \   0000001C   0x8840             LDRH     R0,[R0, #+2]
   1239          
   1240            // Basic ZCL header information
   1241            appResponseLength = 0;
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable129_3
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x800A             STRH     R2,[R1, #+0]
   1242            emberAfResponseApsFrame.profileId = appProfile;
   \   00000026   0x.... 0x....      LDR.W    R6,??DataTable129_4
   \   0000002A   0x8030             STRH     R0,[R6, #+0]
   1243            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   \   0000002C   0x7868             LDRB     R0,[R5, #+1]
   \   0000002E   0x7130             STRB     R0,[R6, #+4]
   1244            emberAfPutInt8uInResp(ZCL_CLUSTER_SPECIFIC_COMMAND
   1245                                  | ZCL_FRAME_CONTROL_CLIENT_TO_SERVER);
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0x.... 0x....      BL       emberAfPutInt8uInResp
   1246            emberAfPutInt8uInResp(emberAfNextSequence());
   \   00000036   0x.... 0x....      BL       emberAfNextSequence
   \   0000003A   0x.... 0x....      BL       emberAfPutInt8uInResp
   1247            emberAfPutInt8uInResp(cmdId);
   \   0000003E   0x4638             MOV      R0,R7
   \   00000040   0x.... 0x....      BL       emberAfPutInt8uInResp
   1248            waitingForResponse = TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x7128             STRB     R0,[R5, #+4]
   1249          
   1250            switch(cmdId) {
   \   00000048   0x46B8             MOV      R8,R7
   \   0000004A   0x2F01             CMP      R7,#+1
   \   0000004C   0xD008             BEQ.N    ??sendMessage_0
   \   0000004E   0x2F03             CMP      R7,#+3
   \   00000050   0xBF18             IT       NE 
   \   00000052   0x2F04             CMPNE    R7,#+4
   \   00000054   0xD02E             BEQ.N    ??sendMessage_1
   \   00000056   0x2F06             CMP      R7,#+6
   \   00000058   0xD044             BEQ.N    ??sendMessage_2
   \   0000005A   0x2F08             CMP      R7,#+8
   \   0000005C   0xD051             BEQ.N    ??sendMessage_3
   \   0000005E   0xE05B             B.N      ??sendMessage_4
   1251              case ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID: {
   1252                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \                     ??sendMessage_0:
   \   00000060   0xF64F 0x77FF      MOVW     R7,#+65535
   \   00000064   0x8B68             LDRH     R0,[R5, #+26]
   \   00000066   0x42B8             CMP      R0,R7
   \   00000068   0xBF18             IT       NE 
   \   0000006A   0x2401             MOVNE    R4,#+1
   1253                  fieldControl |= OTA_HW_VERSION_BIT_MASK;
   1254                }
   1255                emberAfPutInt8uInResp(fieldControl);
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       emberAfPutInt8uInResp
   1256                putImageInfoInMessage();
   \   00000072   0x.... 0x....      BL       putImageInfoInMessage
   1257                if (hardwareVersion != EMBER_AF_INVALID_HARDWARE_VERSION) {
   \   00000076   0x8B68             LDRH     R0,[R5, #+26]
   \   00000078   0x42B8             CMP      R0,R7
   \   0000007A   0xD001             BEQ.N    ??sendMessage_5
   1258                  emberAfPutInt16uInResp(hardwareVersion);
   \                     ??sendMessage_6:
   \   0000007C   0x.... 0x....      BL       emberAfPutInt16uInResp
   1259                }
   1260              }
   1261              break;
   1262          
   1263              case ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID:
   1264              case ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID: 
   1265                emberAfPutInt8uInResp(fieldControl);
   1266                putImageInfoInMessage();
   1267                emberAfPutInt32uInResp(getCurrentOffset());
   1268                emberAfPutInt8uInResp(usePageRequest
   1269                                      ? EM_AF_PAGE_REQUEST_BLOCK_SIZE
   1270                                      : MAX_CLIENT_DATA_SIZE);
   1271          
   1272                if (cmdId == ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID) {
   1273                  emberAfPutInt16uInResp(EMBER_AF_PLUGIN_OTA_CLIENT_PAGE_REQUEST_SIZE);        
   1274                  emberAfPutInt16uInResp(EMBER_AF_OTA_CLIENT_PAGE_REQUEST_SPACING_MS);
   1275                } else {
   1276          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE)
   1277                  emberAfPutInt16uInResp(minBlockRequestPeriod);
   1278          #endif
   1279                }
   1280                break;
   1281          
   1282              case ZCL_UPGRADE_END_REQUEST_COMMAND_ID:
   1283                otaPrintln("Sending Upgrade End request.");
   1284                emberAfCoreFlush();
   1285                emberAfPutInt8uInResp(upgradeEndStatus);
   1286                putImageInfoInMessage();
   1287                if (upgradeEndStatus != 0) {
   1288                  waitingForResponse = FALSE;
   1289                }
   1290                break;
   1291          
   1292              case ZCL_QUERY_SPECIFIC_FILE_REQUEST_COMMAND_ID: {
   1293                EmberEUI64 myEui64;
   1294                emberAfGetEui64(myEui64);
   1295                emberAfPutBlockInResp(myEui64, EUI64_SIZE);
   1296                putImageInfoInMessage();
   1297                emberAfPutInt16uInResp(ZIGBEE_PRO_STACK_VERSION);
   1298                }
   1299                break;
   1300          
   1301              default:
   1302                otaPrintln("%p: invalid cmdId 0x%x", "Error", cmdId);
   1303                return;
   1304            } //end switch statement
   1305          
   1306            emberAfResponseApsFrame.clusterId = ZCL_OTA_BOOTLOAD_CLUSTER_ID;
   \                     ??sendMessage_5:
   \   00000080   0x2019             MOVS     R0,#+25
   \   00000082   0x8070             STRH     R0,[R6, #+2]
   1307            emberAfResponseApsFrame.sourceEndpoint = myEndpoint;
   \   00000084   0x7868             LDRB     R0,[R5, #+1]
   \   00000086   0x7130             STRB     R0,[R6, #+4]
   1308            emberAfResponseApsFrame.destinationEndpoint = serverEndpoint;
   \   00000088   0x78A8             LDRB     R0,[R5, #+2]
   \   0000008A   0x7170             STRB     R0,[R6, #+5]
   1309            emberAfResponseApsFrame.options |= EMBER_APS_OPTION_RETRY;
   \   0000008C   0x88F0             LDRH     R0,[R6, #+6]
   \   0000008E   0xF040 0x0040      ORR      R0,R0,#0x40
   \   00000092   0x80F0             STRH     R0,[R6, #+6]
   1310            {
   1311              EmberStatus status = emberAfSendCommandUnicast(EMBER_OUTGOING_DIRECT, serverNodeId);
   \   00000094   0x8B29             LDRH     R1,[R5, #+24]
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      BL       emberAfSendCommandUnicast
   \   0000009C   0x0003             MOVS     R3,R0
   1312              if (status != EMBER_SUCCESS) {
   \   0000009E   0xD004             BEQ.N    ??CrossCallReturnLabel_42
   1313                otaPrintln("Error:  Failed to send OTA command 0x%X, status: 0x%X", 
   1314                           cmdId, status);
   \   000000A0   0x4642             MOV      R2,R8
   \   000000A2   0x.... 0x....      ADR.W    R1,`?<Constant "Error:  Failed to sen...">`
   \   000000A6   0x.... 0x....      BL       ?Subroutine3
   1315              }
   1316            }
   1317            setTimer(timer);
   \                     ??CrossCallReturnLabel_42:
   \   000000AA   0x4650             MOV      R0,R10
   \   000000AC   0x.... 0x....      BL       setTimer
   1318          }
   \                     ??sendMessage_7:
   \   000000B0   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}  ;; return
   \                     ??sendMessage_1:
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000BA   0x.... 0x....      BL       putImageInfoInMessage
   \   000000BE   0x.... 0x....      BL       getCurrentOffset
   \   000000C2   0x.... 0x....      BL       emberAfPutInt32uInResp
   \   000000C6   0x7968             LDRB     R0,[R5, #+5]
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xBF14             ITE      NE 
   \   000000CC   0x2020             MOVNE    R0,#+32
   \   000000CE   0x203F             MOVEQ    R0,#+63
   \   000000D0   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000D4   0x2F04             CMP      R7,#+4
   \   000000D6   0xD1D3             BNE.N    ??sendMessage_5
   \   000000D8   0xF44F 0x6080      MOV      R0,#+1024
   \   000000DC   0x.... 0x....      BL       emberAfPutInt16uInResp
   \   000000E0   0x2032             MOVS     R0,#+50
   \   000000E2   0xE7CB             B.N      ??sendMessage_6
   \                     ??sendMessage_2:
   \   000000E4   0x.... 0x....      ADR.W    R1,`?<Constant "Sending Upgrade End r...">`
   \   000000E8   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_33:
   \   000000EC   0x4648             MOV      R0,R9
   \   000000EE   0x.... 0x....      BL       emberAfPutInt8uInResp
   \   000000F2   0x.... 0x....      BL       putImageInfoInMessage
   \   000000F6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000FA   0xD0C1             BEQ.N    ??sendMessage_5
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x7128             STRB     R0,[R5, #+4]
   \   00000100   0xE7BE             B.N      ??sendMessage_5
   \                     ??sendMessage_3:
   \   00000102   0xA800             ADD      R0,SP,#+0
   \   00000104   0x.... 0x....      BL       emberAfGetEui64
   \   00000108   0x2108             MOVS     R1,#+8
   \   0000010A   0xA800             ADD      R0,SP,#+0
   \   0000010C   0x.... 0x....      BL       emberAfPutBlockInResp
   \   00000110   0x.... 0x....      BL       putImageInfoInMessage
   \   00000114   0x2002             MOVS     R0,#+2
   \   00000116   0xE7B1             B.N      ??sendMessage_6
   \                     ??sendMessage_4:
   \   00000118   0x4643             MOV      R3,R8
   \   0000011A   0x.... 0x....      ADR.W    R2,`?<Constant "Error">`
   \   0000011E   0x.... 0x....      ADR.W    R1,`?<Constant "%p: invalid cmdId 0x%x">`
   \   00000122   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_41:
   \   00000126   0xE7C3             B.N      ??sendMessage_7
   1319          

   \                                 In section .text, align 2, keep-with-next
   1320          static void queryNextImage(SendNextQueryState sendQuery, 
   1321                                     boolean queryErrorOccurred)
   1322          {
   \                     queryNextImage:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1323            recordUpgradeStatus(BOOTLOAD_STATE_QUERY_NEXT_IMAGE);
   \   00000006   0x2005             MOVS     R0,#+5
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1324          
   1325            if (serverNodeId == EMBER_UNKNOWN_NODE_ID) {
   \   0000000C   0x....             LDR.N    R0,??DataTable122
   \   0000000E   0x8B01             LDRH     R1,[R0, #+24]
   \   00000010   0xF64F 0x72FD      MOVW     R2,#+65533
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD104             BNE.N    ??queryNextImage_0
   1326              otaPrintln("Server unknown, falling back to discovery.");
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "Server unknown, falli...">`
   \   0000001C   0x.... 0x....      BL       ?Subroutine2
   1327              restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_32:
   \   00000020   0xE00B             B.N      ??CrossCallReturnLabel_9
   1328              return;
   1329            }
   1330          
   1331            if (queryErrorOccurred) {
   \                     ??queryNextImage_0:
   \   00000022   0xB175             CBZ.N    R5,??queryNextImage_1
   1332              errors++;
   \   00000024   0x78C1             LDRB     R1,[R0, #+3]
   \   00000026   0x1C49             ADDS     R1,R1,#+1
   \   00000028   0x70C1             STRB     R1,[R0, #+3]
   1333              if (errors >= EMBER_AF_PLUGIN_OTA_CLIENT_QUERY_ERROR_THRESHOLD) {
   \   0000002A   0xB2C9             UXTB     R1,R1
   \   0000002C   0x290A             CMP      R1,#+10
   \   0000002E   0xD308             BCC.N    ??queryNextImage_1
   1334                otaPrintln("Maximum query errors hit (%d), starting search for new OTA server.\n",
   1335                           EMBER_AF_PLUGIN_OTA_CLIENT_QUERY_ERROR_THRESHOLD);
   \   00000030   0x220A             MOVS     R2,#+10
   \   00000032   0x.... 0x....      ADR.W    R1,`?<Constant "Maximum query errors ...">`
   \   00000036   0x.... 0x....      BL       ?Subroutine1
   1336                restartServerDiscoveryAfterDelay();
   \                     ??CrossCallReturnLabel_9:
   \   0000003A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000003E   0x.... 0x....      B.W      restartServerDiscoveryAfterDelay
   1337                return;
   1338              }
   1339            }
   1340          
   1341            if (sendQuery == SEND_QUERY_NOW) {
   \                     ??queryNextImage_1:
   \   00000042   0x.... 0x....      LDR.W    R6,??DataTable129_5  ;; 0x493e0
   \   00000046   0x2C01             CMP      R4,#+1
   \   00000048   0xD10D             BNE.N    ??queryNextImage_2
   1342              if (!queryErrorOccurred) {
   \   0000004A   0xB90D             CBNZ.N   R5,??queryNextImage_3
   1343                errors = 0;
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x70C1             STRB     R1,[R0, #+3]
   1344              }
   1345          
   1346              // Ask the client what image info to use in the query and
   1347              // subsequent download.
   1348              emberAfOtaClientVersionInfoCallback(&currentDownloadFile, 
   1349                                                  &hardwareVersion);
   \                     ??queryNextImage_3:
   \   00000050   0xF100 0x011A      ADD      R1,R0,#+26
   \   00000054   0x3008             ADDS     R0,R0,#+8
   \   00000056   0x.... 0x....      BL       emberAfOtaClientVersionInfoCallback
   1350              updateCurrentImageAttributes(&currentDownloadFile);
   1351          
   1352              sendMessage(ZCL_QUERY_NEXT_IMAGE_REQUEST_COMMAND_ID,
   1353                          0,                            // upgrade end status (ignored)
   1354                          EMBER_AF_OTA_QUERY_DELAY_MS);
   \   0000005A   0x4632             MOV      R2,R6
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000064   0x....             B.N      sendMessage
   1355            } else {
   1356              setTimer(EMBER_AF_OTA_QUERY_DELAY_MS);
   \                     ??queryNextImage_2:
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000006C   0x.... 0x....      B.W      setTimer
   1357            }
   1358          }
   1359          

   \                                 In section .text, align 2, keep-with-next
   1360          static void continueImageDownload(void)
   1361          {
   \                     continueImageDownload:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1362            int8u commandId = ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID;
   \   00000004   0x2403             MOVS     R4,#+3
   1363            int32u timer = EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_DELAY_MS;
   \   00000006   0x2500             MOVS     R5,#+0
   1364            boolean send = TRUE;
   1365          
   1366            recordUpgradeStatus(BOOTLOAD_STATE_DOWNLOAD);
   \   00000008   0x2006             MOVS     R0,#+6
   \   0000000A   0x.... 0x....      BL       recordUpgradeStatus
   1367          
   1368            if (errors >= EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_ERROR_THRESHOLD) {
   \   0000000E   0x....             LDR.N    R6,??DataTable122
   \   00000010   0x78F2             LDRB     R2,[R6, #+3]
   \   00000012   0x2A0A             CMP      R2,#+10
   \   00000014   0xD307             BCC.N    ??continueImageDownload_0
   1369              otaPrintln("Maximum number of download errors reach (%d), aborting.",
   1370                         errors);
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "Maximum number of dow...">`
   \   0000001A   0x.... 0x....      BL       ?Subroutine1
   1371              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \                     ??CrossCallReturnLabel_8:
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0x.... 0x....      BL       downloadAndVerifyFinish
   1372              return;
   \   00000024   0xBD73             POP      {R0,R1,R4-R6,PC}
   1373            }
   1374          
   1375            if (usePageRequest) {
   \                     ??continueImageDownload_0:
   \   00000026   0x7970             LDRB     R0,[R6, #+5]
   \   00000028   0xB1C8             CBZ.N    R0,??continueImageDownload_1
   1376              // Set the current offset for page request
   1377              // or, Get the current offset if retrying image blocks
   1378              EmAfPageRequestClientStatus status = emAfGetCurrentPageRequestStatus();
   1379              if (status == EM_AF_NO_PAGE_REQUEST) {
   \   0000002A   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   0000002E   0xB938             CBNZ.N   R0,??continueImageDownload_2
   1380                timer = emAfInitPageRequestClient(getCurrentOffset(),
   1381                                                  totalImageSize);
   \   00000030   0x.... 0x....      BL       getCurrentOffset
   \   00000034   0x6CB1             LDR      R1,[R6, #+72]
   \   00000036   0x.... 0x....      BL       emAfInitPageRequestClient
   \   0000003A   0x4605             MOV      R5,R0
   1382                commandId = ZCL_IMAGE_PAGE_REQUEST_COMMAND_ID;
   \   0000003C   0x2404             MOVS     R4,#+4
   \   0000003E   0xE00E             B.N      ??continueImageDownload_1
   1383              } else {
   1384                int32u offset;
   1385                if (EM_AF_PAGE_REQUEST_ERROR
   1386                    == emAfNextMissedBlockRequestOffset(&offset)) {
   \                     ??continueImageDownload_2:
   \   00000040   0xA800             ADD      R0,SP,#+0
   \   00000042   0x.... 0x....      BL       emAfNextMissedBlockRequestOffset
   \   00000046   0x28FF             CMP      R0,#+255
   \   00000048   0xD106             BNE.N    ??continueImageDownload_3
   1387                  // Server is unreachable because page request caused us to get 0
   1388                  // response packets from the server when we should have received
   1389                  // a lot.
   1390                  errors++;
   \   0000004A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x70F0             STRB     R0,[R6, #+3]
   1391                  send = FALSE;
   1392                } else {
   1393                  updateCurrentOffset(offset);
   1394                }
   1395              }
   1396            }
   1397          
   1398            if (send) {
   1399              sendMessage(commandId,
   1400                          0,         // upgrade end status (ignored)
   1401                          timer);
   1402            } else {
   1403              setTimer(timer);
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      BL       setTimer
   \   00000056   0xBD73             POP      {R0,R1,R4-R6,PC}
   1404            }
   \                     ??continueImageDownload_3:
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x.... 0x....      BL       updateCurrentOffset
   \                     ??continueImageDownload_1:
   \   0000005E   0x462A             MOV      R2,R5
   \   00000060   0x2100             MOVS     R1,#+0
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       sendMessage
   \   00000068   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
   1405          }
   1406          
   1407          // A callback fired by the verification code.

   \                                 In section .text, align 2, keep-with-next
   1408          void emAfOtaVerifyStoredDataFinish(EmberAfImageVerifyStatus status)
   1409          {
   1410            if (currentBootloadState == BOOTLOAD_STATE_VERIFY_IMAGE) {
   \                     emAfOtaVerifyStoredDataFinish:
   \   00000000   0x....             LDR.N    R1,??DataTable122
   \   00000002   0x7809             LDRB     R1,[R1, #+0]
   \   00000004   0x2907             CMP      R1,#+7
   \   00000006   0xBF08             IT       EQ 
   \   00000008   0x.... 0x....      BEQ.W    continueImageVerification
   1411              continueImageVerification(status);
   1412            }
   1413          }
   \   0000000C   0x4770             BX       LR               ;; return
   1414          

   \                                 In section .text, align 2, keep-with-next
   1415          static boolean downloadAndVerifyFinish(EmberAfOtaDownloadResult result)
   1416          {
   \                     downloadAndVerifyFinish:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   1417            static PGM int8u zclStatusFromResult[] = {
   1418              EMBER_ZCL_STATUS_SUCCESS,
   1419              EMBER_ZCL_STATUS_ABORT,
   1420              EMBER_ZCL_STATUS_INVALID_IMAGE,
   1421              EMBER_ZCL_STATUS_ABORT,
   1422              EMBER_ZCL_STATUS_ABORT,
   1423              EMBER_ZCL_STATUS_ABORT,
   1424            };
   1425            int8u zclStatus;
   1426            boolean goAhead;
   1427          
   1428            if (currentBootloadState <= BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \   00000004   0x....             LDR.N    R5,??DataTable122
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2806             CMP      R0,#+6
   \   0000000A   0xD201             BCS.N    ??downloadAndVerifyFinish_0
   1429              // We don't really care about the return code here.  
   1430              // The important thing is that we don't call the client's download
   1431              // complete handler.
   1432              return TRUE;
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD32             POP      {R1,R4,R5,PC}
   1433            }
   1434          
   1435            goAhead = emberAfOtaClientDownloadCompleteCallback(result,
   1436                                                               &currentDownloadFile);
   1437          
   1438            if (result == EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1439                && !goAhead) {
   \                     ??downloadAndVerifyFinish_0:
   \   00000010   0xF105 0x0108      ADD      R1,R5,#+8
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       emberAfOtaClientDownloadCompleteCallback
   \   0000001A   0x4320             ORRS     R0,R0,R4
   \   0000001C   0xD104             BNE.N    ??downloadAndVerifyFinish_1
   1440              otaPrintln("Client verification failed.");
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "Client verification f...">`
   \   00000022   0x.... 0x....      BL       ?Subroutine2
   1441              result = EMBER_AF_OTA_CLIENT_ABORTED;
   \                     ??CrossCallReturnLabel_31:
   \   00000026   0x2404             MOVS     R4,#+4
   1442            }
   1443            zclStatus = zclStatusFromResult[result];
   \                     ??downloadAndVerifyFinish_1:
   \   00000028   0x.... 0x....      ADR.W    R0,??zclStatusFromResult
   \   0000002C   0x5C21             LDRB     R1,[R4, R0]
   1444          
   1445            // We could automatically invalidate the image in temporary storage
   1446            // when it is declared a bad image.
   1447            // This can be done by the download complete callback instead.
   1448          
   1449            if (zclStatus == EMBER_ZCL_STATUS_SUCCESS) {
   \   0000002E   0xB919             CBNZ.N   R1,??downloadAndVerifyFinish_2
   1450              askServerToRunUpgrade(START_NEW_TIMER);
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x.... 0x....      BL       askServerToRunUpgrade
   \   00000036   0xE00E             B.N      ??downloadAndVerifyFinish_3
   1451            } else if (result != EMBER_AF_OTA_SERVER_ABORTED
   1452                       && currentBootloadState != BOOTLOAD_STATE_QUERY_NEXT_IMAGE) {
   \                     ??downloadAndVerifyFinish_2:
   \   00000038   0x2C03             CMP      R4,#+3
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x7828             LDRBNE   R0,[R5, #+0]
   \   0000003E   0x2805             CMPNE    R0,#+5
   \   00000040   0xD004             BEQ.N    ??downloadAndVerifyFinish_4
   1453              // Report to the server that the download has failed.
   1454              sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1455                          zclStatus,
   1456                          EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \   00000042   0xF64E 0x2260      MOVW     R2,#+60000
   \   00000046   0x2006             MOVS     R0,#+6
   \   00000048   0x.... 0x....      BL       sendMessage
   1457            }
   1458            
   1459            if (zclStatus != EMBER_ZCL_STATUS_SUCCESS) {
   1460              waitingForResponse = FALSE;
   \                     ??downloadAndVerifyFinish_4:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x7128             STRB     R0,[R5, #+4]
   1461              queryNextImage(DELAY_BEFORE_SEND_QUERY,
   1462                             FALSE);  // query error?
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x.... 0x....      BL       queryNextImage
   1463            }
   1464            return (result == EMBER_ZCL_STATUS_SUCCESS);
   \                     ??downloadAndVerifyFinish_3:
   \   00000056   0x1E60             SUBS     R0,R4,#+1
   \   00000058   0x4180             SBCS     R0,R0,R0
   \   0000005A   0x0FC0             LSRS     R0,R0,#+31
   \   0000005C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1465          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??zclStatusFromResult:
   \   00000000   0x00 0x95          DC8 0, 149, 150, 149, 149, 149, 0, 0
   \              0x96 0x95    
   \              0x95 0x95    
   \              0x00 0x00    
   1466          

   \                                 In section .text, align 2, keep-with-next
   1467          static void continueImageVerification(EmberAfImageVerifyStatus status)
   1468          {
   \                     continueImageVerification:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   1469            recordUpgradeStatus(BOOTLOAD_STATE_VERIFY_IMAGE);
   \   00000006   0x2007             MOVS     R0,#+7
   \   00000008   0x.... 0x....      BL       recordUpgradeStatus
   1470          
   1471            if (status == EMBER_AF_IMAGE_UNKNOWN) {
   \   0000000C   0x....             LDR.N    R5,??DataTable122
   \   0000000E   0x2C05             CMP      R4,#+5
   \   00000010   0xD102             BNE.N    ??continueImageVerification_0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x71A8             STRB     R0,[R5, #+6]
   \   00000016   0xE006             B.N      ??continueImageVerification_1
   1472              customVerifyStatus = NO_CUSTOM_VERIFY;
   1473          
   1474            } else if (status == EMBER_AF_IMAGE_GOOD) {
   \                     ??continueImageVerification_0:
   \   00000018   0xB91C             CBNZ.N   R4,??continueImageVerification_2
   1475              // This is only called with status == GOOD when signature
   1476              // verification has completed.  It is not called when
   1477              // custom verification is done.
   1478              customVerifyStatus = NEW_CUSTOM_VERIFY;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x71A8             STRB     R0,[R5, #+6]
   1479              status = EMBER_AF_IMAGE_VERIFY_IN_PROGRESS;
   \   0000001E   0x2402             MOVS     R4,#+2
   \   00000020   0xE001             B.N      ??continueImageVerification_1
   1480            }
   \                     ??continueImageVerification_2:
   \   00000022   0x2C02             CMP      R4,#+2
   \   00000024   0xD146             BNE.N    ??continueImageVerification_3
   1481          
   1482            if (status == EMBER_AF_IMAGE_UNKNOWN
   1483                || status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   1484              int32u offset;
   1485              int32u totalSize;
   1486              EmberAfOtaImageId id;
   1487          
   1488              // First a basic sanity check of the image to insure
   1489              // the file has completely downloaded and the file format
   1490              // is correct.
   1491              if (status == EMBER_AF_IMAGE_UNKNOWN
   1492                  && (EMBER_AF_OTA_STORAGE_SUCCESS
   1493                      != emberAfOtaStorageCheckTempDataCallback(&offset,
   1494                                                                &totalSize,
   1495                                                                &id))) {
   \                     ??continueImageVerification_1:
   \   00000026   0x2C05             CMP      R4,#+5
   \   00000028   0xD106             BNE.N    ??continueImageVerification_4
   \   0000002A   0xAA03             ADD      R2,SP,#+12
   \   0000002C   0xA901             ADD      R1,SP,#+4
   \   0000002E   0xA802             ADD      R0,SP,#+8
   \   00000030   0x.... 0x....      BL       emberAfOtaStorageCheckTempDataCallback
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD13D             BNE.N    ??continueImageVerification_3
   1496                status = EMBER_AF_IMAGE_VERIFY_ERROR;
   1497          //      otaPrintln("emberAfOtaStorageCheckTempDataCallback() failed.");
   1498                goto imageVerifyDone;
   1499              }
   1500          
   1501              if (customVerifyStatus != NO_CUSTOM_VERIFY) {
   \                     ??continueImageVerification_4:
   \   00000038   0x79A8             LDRB     R0,[R5, #+6]
   \   0000003A   0xB150             CBZ.N    R0,??continueImageVerification_5
   1502                status = emberAfOtaClientCustomVerifyCallback((customVerifyStatus 
   1503                                                               == NEW_CUSTOM_VERIFY),
   1504                                                              &currentDownloadFile);
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xBF18             IT       NE 
   \   00000040   0x2000             MOVNE    R0,#+0
   \   00000042   0xF105 0x0108      ADD      R1,R5,#+8
   \   00000046   0x.... 0x....      BL       emberAfOtaClientCustomVerifyCallback
   \   0000004A   0x4604             MOV      R4,R0
   1505                customVerifyStatus = CUSTOM_VERIFY_IN_PROGRESS;
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0x71A8             STRB     R0,[R5, #+6]
   \   00000050   0xE009             B.N      ??continueImageVerification_6
   1506              } else {
   1507                status = emAfOtaImageSignatureVerify(MAX_DIGEST_CALCULATIONS_PER_CALL,
   1508                                                     &currentDownloadFile,
   1509                                                     (status == EMBER_AF_IMAGE_UNKNOWN
   1510                                                      ? EMBER_AF_NEW_IMAGE_VERIFICATION
   1511                                                      : EMBER_AF_CONTINUE_IMAGE_VERIFY));
   \                     ??continueImageVerification_5:
   \   00000052   0x2C05             CMP      R4,#+5
   \   00000054   0xBF0C             ITE      EQ 
   \   00000056   0x2201             MOVEQ    R2,#+1
   \   00000058   0x2200             MOVNE    R2,#+0
   \   0000005A   0xF105 0x0108      ADD      R1,R5,#+8
   \   0000005E   0x2005             MOVS     R0,#+5
   \   00000060   0x.... 0x....      BL       emAfOtaImageSignatureVerify
   \   00000064   0x4604             MOV      R4,R0
   1512              }
   1513          
   1514              if (status == EMBER_AF_IMAGE_VERIFY_IN_PROGRESS) {
   \                     ??continueImageVerification_6:
   \   00000066   0x2C02             CMP      R4,#+2
   \   00000068   0xD00B             BEQ.N    ??continueImageVerification_7
   1515                setTimer(EMBER_AF_PLUGIN_OTA_CLIENT_VERIFY_DELAY_MS);
   1516                return;
   1517              } else if (status == EMBER_AF_IMAGE_VERIFY_WAIT) {
   \   0000006A   0x2C03             CMP      R4,#+3
   \   0000006C   0xBF08             IT       EQ 
   \   0000006E   0x2000             MOVEQ    R0,#+0
   1518                setTimer(0);
   \   00000070   0xD008             BEQ.N    ??continueImageVerification_8
   1519                return;
   1520              } else if (status == EMBER_AF_NO_IMAGE_VERIFY_SUPPORT) {
   \   00000072   0x2C06             CMP      R4,#+6
   \   00000074   0xD109             BNE.N    ??continueImageVerification_9
   1521                otaPrintln("No signature verification support, assuming image is okay.");
   \   00000076   0x.... 0x....      ADR.W    R1,`?<Constant "No signature verifica...">`
   \   0000007A   0x.... 0x....      BL       ?Subroutine2
   1522                customVerifyStatus = NEW_CUSTOM_VERIFY;
   \                     ??CrossCallReturnLabel_30:
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x71A8             STRB     R0,[R5, #+6]
   1523                setTimer(EMBER_AF_PLUGIN_OTA_CLIENT_VERIFY_DELAY_MS);
   \                     ??continueImageVerification_7:
   \   00000082   0x200A             MOVS     R0,#+10
   \                     ??continueImageVerification_8:
   \   00000084   0x.... 0x....      BL       setTimer
   1524                return;
   \   00000088   0xE017             B.N      ??continueImageVerification_10
   1525              } else {
   1526                otaPrintln("%p verification %p: 0x%X", 
   1527                           (customVerifyStatus == NO_CUSTOM_VERIFY
   1528                            ? "Signature"
   1529                            : "Custom"),
   1530                           (status == EMBER_AF_IMAGE_GOOD
   1531                            ? "passed" 
   1532                            : "FAILED"),
   1533                           status);
   \                     ??continueImageVerification_9:
   \   0000008A   0x2C00             CMP      R4,#+0
   \   0000008C   0xBF0C             ITE      EQ 
   \   0000008E   0x.... 0x....      ADREQ.W  R3,`?<Constant "passed">`
   \   00000092   0x.... 0x....      ADRNE.W  R3,`?<Constant "FAILED">`
   \   00000096   0x79A8             LDRB     R0,[R5, #+6]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xBF0C             ITE      EQ 
   \   0000009C   0x.... 0x....      ADREQ.W  R2,`?<Constant "Signature">`
   \   000000A0   0x.... 0x....      ADRNE.W  R2,`?<Constant "Custom">`
   \   000000A4   0x9400             STR      R4,[SP, #+0]
   \   000000A6   0x.... 0x....      ADR.W    R1,`?<Constant "%p verification %p: 0x%X">`
   \   000000AA   0x.... 0x....      BL       ?Subroutine4
   1534              }
   1535            }
   1536          
   1537           imageVerifyDone:
   1538            downloadAndVerifyFinish((status == EMBER_AF_IMAGE_GOOD
   1539                                     ? EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS
   1540                                     : EMBER_AF_OTA_VERIFY_FAILED));
   \                     ??CrossCallReturnLabel_53:
   \   000000AE   0xB90C             CBNZ.N   R4,??continueImageVerification_3
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xE000             B.N      ??continueImageVerification_11
   \                     ??continueImageVerification_3:
   \   000000B4   0x2002             MOVS     R0,#+2
   \                     ??continueImageVerification_11:
   \   000000B6   0x.... 0x....      BL       downloadAndVerifyFinish
   1541          }
   \                     ??continueImageVerification_10:
   \   000000BA   0xB007             ADD      SP,SP,#+28
   \   000000BC   0xBD30             POP      {R4,R5,PC}       ;; return
   1542          

   \                                 In section .text, align 2, keep-with-next
   1543          static void askServerToRunUpgrade(boolean timeout)
   1544          {
   \                     askServerToRunUpgrade:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1545            recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x.... 0x....      BL       recordUpgradeStatus
   1546          
   1547            if (!timeout) {
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable129
   \   0000000E   0xB934             CBNZ.N   R4,??askServerToRunUpgrade_0
   1548              errors = 0;
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x70C1             STRB     R1,[R0, #+3]
   1549            }
   1550          
   1551            if (errors >= EMBER_AF_PLUGIN_OTA_CLIENT_UPGRADE_WAIT_THRESHOLD) {
   1552              otaPrintln("Maximum upgrade requests made (%d) without response from server.");
   1553              otaPrintln("Upgrading anyway");
   1554              runUpgrade();
   1555              return;
   1556            }
   1557            sendMessage(ZCL_UPGRADE_END_REQUEST_COMMAND_ID, 
   1558                        EMBER_ZCL_STATUS_SUCCESS,
   1559                        EMBER_AF_RUN_UPGRADE_REQUEST_DELAY_MS);
   \                     ??askServerToRunUpgrade_1:
   \   00000014   0xF64E 0x2260      MOVW     R2,#+60000
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x2006             MOVS     R0,#+6
   \   0000001C   0x....             B.N      ?Subroutine0
   \                     ??askServerToRunUpgrade_0:
   \   0000001E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000020   0x280A             CMP      R0,#+10
   \   00000022   0xD3F7             BCC.N    ??askServerToRunUpgrade_1
   \   00000024   0x.... 0x....      ADR.W    R1,`?<Constant "Maximum upgrade reque...">`
   \   00000028   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_29:
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant "Upgrading anyway">`
   \   00000030   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_28:
   \   00000034   0xE8BD 0x4010      POP      {R4,LR}
   \   00000038   0x....             B.N      runUpgrade
   1560          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      sendMessage
   1561          
   1562          static boolean storeData(int32u offset, int32u length, const int8u* data)
   1563          {
   1564            return (EMBER_AF_OTA_STORAGE_SUCCESS
   1565                    == emberAfOtaStorageWriteTempDataCallback(offset, length, data));
   1566          }
   1567          

   \                                 In section .text, align 2, keep-with-next
   1568          static EmberAfStatus imageBlockResponseParse(int8u* buffer, int8u index, int8u length)
   1569          {
   \                     imageBlockResponseParse:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4690             MOV      R8,R2
   1570            EmberAfOtaImageId imageId;
   1571            int32u offset;
   1572            int32u currentOffset;
   1573            int8u dataSize;
   1574            int32u timerMs = (EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_DELAY_MS >= minBlockRequestPeriod
   1575                              ? EMBER_AF_PLUGIN_OTA_CLIENT_DOWNLOAD_DELAY_MS
   1576                              : (minBlockRequestPeriod << 10));  // seconds -> milliseconds
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable129
   \   0000000E   0x8BB0             LDRH     R0,[R6, #+28]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xBF0C             ITE      EQ 
   \   00000014   0xF04F 0x0B00      MOVEQ    R11,#+0
   \   00000018   0xEA4F 0x2B80      LSLNE    R11,R0,#+10
   1577            int8u status = emberAfGetInt8u(buffer, index, length);
   \   0000001C   0x5D0B             LDRB     R3,[R1, R4]
   1578            int32u nextOffset;
   1579            const int8u* imageData;
   1580            EmAfPageRequestClientStatus pageRequestStatus;
   1581          
   1582            index++;
   \   0000001E   0x1C4F             ADDS     R7,R1,#+1
   1583          
   1584            if (buffer != NULL && status == EMBER_ZCL_STATUS_WAIT_FOR_DATA) {
   \   00000020   0xB38C             CBZ.N    R4,??imageBlockResponseParse_0
   \   00000022   0x2B97             CMP      R3,#+151
   \   00000024   0xD12F             BNE.N    ??imageBlockResponseParse_0
   1585              int32u currentTime;
   1586              int32u requestTime;
   1587              int32u calculatedTimer;
   1588          
   1589              if (length < IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_LENGTH_MIN) {
   \   00000026   0xF1B8 0x0F0B      CMP      R8,#+11
   \   0000002A   0xD355             BCC.N    ??imageBlockResponseParse_1
   1590                return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1591              }
   1592              currentTime = emberAfGetInt32u(buffer, index, length);
   \   0000002C   0xB2FF             UXTB     R7,R7
   \   0000002E   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_64:
   \   00000032   0x4683             MOV      R11,R0
   1593              index += 4;
   \   00000034   0x1D38             ADDS     R0,R7,#+4
   1594              requestTime = emberAfGetInt32u(buffer, index, length);
   \   00000036   0x4642             MOV      R2,R8
   \   00000038   0xB2C5             UXTB     R5,R0
   \   0000003A   0x4629             MOV      R1,R5
   \   0000003C   0x.... 0x....      BL       ??Subroutine6_0
   1595              index += 4;
   \                     ??CrossCallReturnLabel_61:
   \   00000040   0x1D2F             ADDS     R7,R5,#+4
   1596          
   1597              if (!calculateTimer(currentTime, requestTime, &calculatedTimer)) {
   \   00000042   0xAA00             ADD      R2,SP,#+0
   \   00000044   0x4601             MOV      R1,R0
   \   00000046   0x4658             MOV      R0,R11
   \   00000048   0x.... 0x....      BL       calculateTimer
   \   0000004C   0xB910             CBNZ.N   R0,??imageBlockResponseParse_2
   1598                // Error printed by above function.
   1599                calculatedTimer = CALCULATE_TIME_ERROR_IMAGE_BLOCK_DELAY_MS; 
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable129_5  ;; 0x493e0
   \   00000052   0x9000             STR      R0,[SP, #+0]
   1600              }
   1601          
   1602              if (length >= IMAGE_BLOCK_RESPONSE_WAIT_FOR_DATA_MIN_BLOCK_RESPONSE_LENGTH) {
   \                     ??imageBlockResponseParse_2:
   \   00000054   0xF1B8 0x0F0D      CMP      R8,#+13
   \   00000058   0xD30C             BCC.N    ??imageBlockResponseParse_3
   1603                int16u temp = emberAfGetInt16u(buffer, 
   1604                                               index, 
   1605                                               length);
   \   0000005A   0x4642             MOV      R2,R8
   \   0000005C   0xB2F9             UXTB     R1,R7
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0x.... 0x....      BL       emberAfGetInt16u
   \   00000064   0x4604             MOV      R4,R0
   1606                emberAfCoreFlush();
   1607                otaPrintln("Updating Min Block Request Period to %d seconds",
   1608                           temp);
   \   00000066   0x4622             MOV      R2,R4
   \   00000068   0x.... 0x....      ADR.W    R1,`?<Constant "Updating Min Block Re...">`
   \   0000006C   0x.... 0x....      BL       ?Subroutine1
   1609                updateMinBlockRequestPeriodAttribute(temp);
   \                     ??CrossCallReturnLabel_7:
   \   00000070   0x83B4             STRH     R4,[R6, #+28]
   1610                calculatedTimer = temp;
   \   00000072   0x9400             STR      R4,[SP, #+0]
   1611              }
   1612          
   1613              emberAfCoreFlush();
   1614              otaPrintln("Download delay by server %d ms", calculatedTimer);
   \                     ??imageBlockResponseParse_3:
   \   00000074   0x9A00             LDR      R2,[SP, #+0]
   \   00000076   0x.... 0x....      ADR.W    R1,`?<Constant "Download delay by ser...">`
   \   0000007A   0x.... 0x....      BL       ?Subroutine1
   1615              emberAfCoreFlush();
   1616              setTimer(calculatedTimer);
   \                     ??CrossCallReturnLabel_6:
   \   0000007E   0x9800             LDR      R0,[SP, #+0]
   \   00000080   0x.... 0x....      BL       setTimer
   \   00000084   0xE0B7             B.N      ??imageBlockResponseParse_4
   1617              return EMBER_ZCL_STATUS_SUCCESS;
   1618            } else if (status == EMBER_ZCL_STATUS_ABORT
   1619                       || status == EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE) {
   \                     ??imageBlockResponseParse_0:
   \   00000086   0x2B95             CMP      R3,#+149
   \   00000088   0xBF18             IT       NE 
   \   0000008A   0x2B98             CMPNE    R3,#+152
   \   0000008C   0xD102             BNE.N    ??imageBlockResponseParse_5
   1620              otaPrintln("Download aborted by server.");
   \   0000008E   0x.... 0x....      ADR.W    R1,`?<Constant "Download aborted by s...">`
   \   00000092   0xE011             B.N      ??imageBlockResponseParse_6
   1621              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   1622              return EMBER_ZCL_STATUS_SUCCESS;
   1623            } else if (status == EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND) {
   \                     ??imageBlockResponseParse_5:
   \   00000094   0x2B81             CMP      R3,#+129
   \   00000096   0xD113             BNE.N    ??imageBlockResponseParse_7
   1624              if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000098   0x7970             LDRB     R0,[R6, #+5]
   \   0000009A   0xB158             CBZ.N    R0,??imageBlockResponseParse_8
   \   0000009C   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   000000A0   0xB140             CBZ.N    R0,??imageBlockResponseParse_8
   1625                otaPrintln("Server doesn't support page request, only using block request.");
   \   000000A2   0x.... 0x....      ADR.W    R1,`?<Constant "Server doesn\\'t suppor...">`
   \   000000A6   0x.... 0x....      BL       ?Subroutine2
   1626                usePageRequest = FALSE;
   \                     ??CrossCallReturnLabel_27:
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x7170             STRB     R0,[R6, #+5]
   1627                emAfAbortPageRequest();
   \   000000AE   0x.... 0x....      BL       emAfAbortPageRequest
   1628                continueImageDownload();
   \   000000B2   0xE09E             B.N      ??imageBlockResponseParse_9
   1629                return EMBER_ZCL_STATUS_SUCCESS;
   1630              } else {
   1631                otaPrintln("Server returned 'unsupported cluster command'.");
   \                     ??imageBlockResponseParse_8:
   \   000000B4   0x.... 0x....      ADR.W    R1,`?<Constant "Server returned \\'unsu...">`
   \                     ??imageBlockResponseParse_6:
   \   000000B8   0x.... 0x....      BL       ?Subroutine2
   1632                downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_26:
   \   000000BC   0x2003             MOVS     R0,#+3
   \   000000BE   0xE072             B.N      ??imageBlockResponseParse_10
   1633                return EMBER_ZCL_STATUS_SUCCESS;
   1634              }
   1635            } else if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \                     ??imageBlockResponseParse_7:
   \   000000C0   0x.... 0x....      ADR.W    R9,`?<Constant "Image block response">`
   \   000000C4   0xB12B             CBZ.N    R3,??imageBlockResponseParse_11
   1636              otaPrintln("Unknown %p status code 0x%X", 
   1637                         "Image block response", 
   1638                         status);
   \   000000C6   0x464A             MOV      R2,R9
   \   000000C8   0x.... 0x....      ADR.W    R1,`?<Constant "Unknown %p status cod...">`
   \   000000CC   0x.... 0x....      BL       ?Subroutine3
   1639              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_40:
   \   000000D0   0xE044             B.N      ??CrossCallReturnLabel_5
   1640            } // Else status == success.  Keep going
   1641          
   1642            if (length < IMAGE_BLOCK_RESPONSE_SUCCESS_MIN_LENGTH) {
   \                     ??imageBlockResponseParse_11:
   \   000000D2   0xF1B8 0x0F11      CMP      R8,#+17
   \   000000D6   0xD201             BCS.N    ??imageBlockResponseParse_12
   1643              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   \                     ??imageBlockResponseParse_1:
   \   000000D8   0x2080             MOVS     R0,#+128
   \   000000DA   0xE08D             B.N      ??imageBlockResponseParse_13
   1644            }
   1645          
   1646            index += emAfOtaParseImageIdFromMessage(&imageId,
   1647                                                    &(buffer[index]), 
   1648                                                    length);
   \                     ??imageBlockResponseParse_12:
   \   000000DC   0xB2F8             UXTB     R0,R7
   \   000000DE   0x1901             ADDS     R1,R0,R4
   \   000000E0   0xA802             ADD      R0,SP,#+8
   \   000000E2   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   000000E6   0x19C0             ADDS     R0,R0,R7
   1649            offset = emberAfGetInt32u(buffer, index, length);
   \   000000E8   0x4642             MOV      R2,R8
   \   000000EA   0xB2C7             UXTB     R7,R0
   \   000000EC   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_63:
   \   000000F0   0x4682             MOV      R10,R0
   1650            index += 4;
   \   000000F2   0x1D38             ADDS     R0,R7,#+4
   1651            dataSize = emberAfGetInt8u(buffer, index, length);
   \   000000F4   0xB2C0             UXTB     R0,R0
   \   000000F6   0x5D01             LDRB     R1,[R0, R4]
   \   000000F8   0x9101             STR      R1,[SP, #+4]
   1652            index += 1;
   \   000000FA   0x1C40             ADDS     R0,R0,#+1
   1653            imageData = buffer + index;
   \   000000FC   0xB2C2             UXTB     R2,R0
   \   000000FE   0x4414             ADD      R4,R2,R4
   1654            
   1655            if ((length - index) < dataSize) {
   \   00000100   0xEBA8 0x0002      SUB      R0,R8,R2
   \   00000104   0x4288             CMP      R0,R1
   \   00000106   0xDA07             BGE.N    ??imageBlockResponseParse_14
   1656              otaPrintln("%p has data size (%d) smaller than actual packet size (%d).",
   1657                         "Image block response",
   1658                         dataSize,
   1659                         length - index);
   \   00000108   0x9000             STR      R0,[SP, #+0]
   \   0000010A   0x9B01             LDR      R3,[SP, #+4]
   \   0000010C   0x464A             MOV      R2,R9
   \   0000010E   0x.... 0x....      ADR.W    R1,`?<Constant "%p has data size (%d)...">`
   \   00000112   0x.... 0x....      BL       ?Subroutine4
   1660              return EMBER_ZCL_STATUS_MALFORMED_COMMAND;
   1661            }
   \                     ??CrossCallReturnLabel_52:
   \   00000116   0xE7DF             B.N      ??imageBlockResponseParse_1
   1662            
   1663            if (!usePageRequest 
   1664                || emAfGetCurrentPageRequestStatus() != EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_14:
   \   00000118   0x7970             LDRB     R0,[R6, #+5]
   \   0000011A   0xB118             CBZ.N    R0,??imageBlockResponseParse_15
   \   0000011C   0x.... 0x....      BL       emAfGetCurrentPageRequestStatus
   \   00000120   0x2801             CMP      R0,#+1
   \   00000122   0xD00C             BEQ.N    ??imageBlockResponseParse_16
   1665              // For normal image block request transactions, all blocks should be in order.
   1666              // For page request, we may receive them out of order, or just miss packets.
   1667              currentOffset = getCurrentOffset();
   \                     ??imageBlockResponseParse_15:
   \   00000124   0x.... 0x....      BL       getCurrentOffset
   1668              if (offset != currentOffset) {
   \   00000128   0x4582             CMP      R10,R0
   \   0000012A   0xD008             BEQ.N    ??imageBlockResponseParse_16
   1669                otaPrintln("%p error: Expected offset 0x%4X, but got 0x%4X.  Ignoring", 
   1670                           "Image block response",
   1671                           currentOffset, 
   1672                           offset);
   \   0000012C   0xF8CD 0xA000      STR      R10,[SP, #+0]
   \   00000130   0x4603             MOV      R3,R0
   \   00000132   0x464A             MOV      R2,R9
   \   00000134   0x.... 0x....      ADR.W    R1,`?<Constant "%p error: Expected of...">`
   \   00000138   0x.... 0x....      BL       ?Subroutine4
   1673                return EMBER_ZCL_STATUS_SUCCESS;
   1674              }
   1675            }
   \                     ??CrossCallReturnLabel_51:
   \   0000013C   0xE05B             B.N      ??imageBlockResponseParse_4
   1676            
   1677            if (0 != MEMCOMPARE(&currentDownloadFile, 
   1678                                &imageId, 
   1679                                sizeof(EmberAfOtaImageId))
   1680                       || dataSize > MAX_CLIENT_DATA_SIZE) {
   \                     ??imageBlockResponseParse_16:
   \   0000013E   0x2210             MOVS     R2,#+16
   \   00000140   0xA902             ADD      R1,SP,#+8
   \   00000142   0xF106 0x0008      ADD      R0,R6,#+8
   \   00000146   0x.... 0x....      BL       halCommonMemCompare
   \   0000014A   0xB910             CBNZ.N   R0,??imageBlockResponseParse_17
   \   0000014C   0x9801             LDR      R0,[SP, #+4]
   \   0000014E   0x2840             CMP      R0,#+64
   \   00000150   0xDB06             BLT.N    ??imageBlockResponseParse_18
   1681              otaPrintln("%p info did not match my expected info.  Dropping.",
   1682                         "Image block response");
   \                     ??imageBlockResponseParse_17:
   \   00000152   0x464A             MOV      R2,R9
   \   00000154   0x.... 0x....      ADR.W    R1,`?<Constant "%p info did not match...">`
   \   00000158   0x.... 0x....      BL       ?Subroutine1
   1683              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_5:
   \   0000015C   0x2087             MOVS     R0,#+135
   \   0000015E   0xE04B             B.N      ??imageBlockResponseParse_13
   1684            }
   1685          
   1686            errors = 0;
   \                     ??imageBlockResponseParse_18:
   \   00000160   0x2000             MOVS     R0,#+0
   \   00000162   0x70F0             STRB     R0,[R6, #+3]
   1687          
   1688            // We want to make sure we don't write the same block twice.  For
   1689            // page-erase-required EEPROM parts this won't work.
   1690            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   00000164   0x7970             LDRB     R0,[R6, #+5]
   \   00000166   0xB140             CBZ.N    R0,??imageBlockResponseParse_19
   \   00000168   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   0000016C   0xB128             CBZ.N    R0,??imageBlockResponseParse_19
   1691              pageRequestStatus = emAfNoteReceivedBlockForPageRequestClient(offset);
   \   0000016E   0x4650             MOV      R0,R10
   \   00000170   0x.... 0x....      BL       emAfNoteReceivedBlockForPageRequestClient
   \   00000174   0x4605             MOV      R5,R0
   1692              if (pageRequestStatus == EM_AF_BLOCK_ALREADY_RECEIVED) {
   \   00000176   0x2D04             CMP      R5,#+4
   \   00000178   0xD03D             BEQ.N    ??imageBlockResponseParse_4
   1693                return EMBER_ZCL_STATUS_SUCCESS;
   1694              }
   1695            }
   1696          
   1697            if (!storeData(offset, dataSize, imageData)) {
   \                     ??imageBlockResponseParse_19:
   \   0000017A   0x4622             MOV      R2,R4
   \   0000017C   0x9901             LDR      R1,[SP, #+4]
   \   0000017E   0x4650             MOV      R0,R10
   \   00000180   0x.... 0x....      BL       emberAfOtaStorageWriteTempDataCallback
   \   00000184   0xB950             CBNZ.N   R0,??imageBlockResponseParse_20
   1698              otaPrintln("Failed to write to storage device!");
   1699              downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   1700              // The downloadAndVerifyFinish() function will return it's only status
   1701              // to the message.  No need to send ours.
   1702              return EMBER_ZCL_STATUS_SUCCESS;
   1703            }
   1704          
   1705            nextOffset = offset + dataSize;
   \   00000186   0x9801             LDR      R0,[SP, #+4]
   \   00000188   0xEB00 0x040A      ADD      R4,R0,R10
   1706          
   1707            if (usePageRequest && emAfHandlingPageRequestClient()) {
   \   0000018C   0x7970             LDRB     R0,[R6, #+5]
   \   0000018E   0xB1C0             CBZ.N    R0,??imageBlockResponseParse_21
   \   00000190   0x.... 0x....      BL       emAfHandlingPageRequestClient
   \   00000194   0xB1A8             CBZ.N    R0,??imageBlockResponseParse_21
   1708              if (pageRequestStatus == EM_AF_PAGE_REQUEST_ERROR) {
   \   00000196   0x2DFF             CMP      R5,#+255
   \   00000198   0xD108             BNE.N    ??imageBlockResponseParse_22
   1709                downloadAndVerifyFinish(EMBER_AF_OTA_CLIENT_ABORTED);
   \   0000019A   0xE003             B.N      ??CrossCallReturnLabel_25
   1710                // We still return success to indicate we processed the message correctly.
   1711                return EMBER_ZCL_STATUS_SUCCESS;
   1712          
   1713              } else if (pageRequestStatus == EM_AF_WAITING_PAGE_REQUEST_REPLIES) {
   \                     ??imageBlockResponseParse_20:
   \   0000019C   0x.... 0x....      ADR.W    R1,`?<Constant "Failed to write to st...">`
   \   000001A0   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_25:
   \   000001A4   0x2004             MOVS     R0,#+4
   \                     ??imageBlockResponseParse_10:
   \   000001A6   0x.... 0x....      BL       downloadAndVerifyFinish
   \   000001AA   0xE024             B.N      ??imageBlockResponseParse_4
   \                     ??imageBlockResponseParse_22:
   \   000001AC   0x2D01             CMP      R5,#+1
   \   000001AE   0xD022             BEQ.N    ??imageBlockResponseParse_4
   1714                return EMBER_ZCL_STATUS_SUCCESS;
   1715          
   1716              } else if (pageRequestStatus == EM_AF_PAGE_REQUEST_COMPLETE) {
   \   000001B0   0x2D03             CMP      R5,#+3
   \   000001B2   0xD103             BNE.N    ??imageBlockResponseParse_23
   1717                nextOffset = emAfGetFinishedPageRequestOffset();
   \   000001B4   0x.... 0x....      BL       emAfGetFinishedPageRequestOffset
   \   000001B8   0x4604             MOV      R4,R0
   \   000001BA   0xE002             B.N      ??imageBlockResponseParse_21
   1718          
   1719              } else { // EM_AF_RETRY_MISSED_PACKETS 
   1720                timerMs = emAfGetPageRequestMissedPacketDelayMs();
   \                     ??imageBlockResponseParse_23:
   \   000001BC   0x.... 0x....      BL       emAfGetPageRequestMissedPacketDelayMs
   \   000001C0   0x4683             MOV      R11,R0
   1721              }
   1722            }
   1723          
   1724            offset = updateCurrentOffset(nextOffset);
   \                     ??imageBlockResponseParse_21:
   \   000001C2   0x4620             MOV      R0,R4
   \   000001C4   0x.... 0x....      BL       updateCurrentOffset
   \   000001C8   0x4604             MOV      R4,R0
   1725          
   1726          #if defined(EMBER_TEST)
   1727            {
   1728              int8u percentageComplete = 
   1729                emAfPrintPercentageUpdate("Download", 
   1730                                          DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1731                                          offset);
   1732              if (percentageComplete != 100 && percentageComplete >= emAfOtaClientStopDownloadPercentage) {
   1733                otaPrintln("Artificially stopping download at %d%%", emAfOtaClientStopDownloadPercentage);
   1734                return EMBER_ZCL_STATUS_SUCCESS;
   1735              }
   1736            }
   1737          #else
   1738            emAfPrintPercentageUpdate("Download", 
   1739                                      DOWNLOAD_PERCENTAGE_UPDATE_RATE, 
   1740                                      offset);
   \   000001CA   0x4622             MOV      R2,R4
   \   000001CC   0x2105             MOVS     R1,#+5
   \   000001CE   0x.... 0x....      ADR.W    R0,`?<Constant "Download">`
   \   000001D2   0x.... 0x....      BL       emAfPrintPercentageUpdate
   1741          #endif
   1742          
   1743            if (offset >= totalImageSize) {
   \   000001D6   0x6CB0             LDR      R0,[R6, #+72]
   \   000001D8   0x4284             CMP      R4,R0
   \   000001DA   0xD306             BCC.N    ??imageBlockResponseParse_24
   1744              emberAfOtaStorageFinishDownloadCallback(offset);
   \   000001DC   0x4620             MOV      R0,R4
   \   000001DE   0x.... 0x....      BL       emberAfOtaStorageFinishDownloadCallback
   1745              continueImageVerification(EMBER_AF_IMAGE_UNKNOWN);  
   \   000001E2   0x2005             MOVS     R0,#+5
   \   000001E4   0x.... 0x....      BL       continueImageVerification
   \   000001E8   0xE005             B.N      ??imageBlockResponseParse_4
   1746              return EMBER_ZCL_STATUS_SUCCESS;
   1747            } else {
   1748              if (!setTimer(timerMs)) {
   \                     ??imageBlockResponseParse_24:
   \   000001EA   0x4658             MOV      R0,R11
   \   000001EC   0x.... 0x....      BL       setTimer
   \   000001F0   0xB908             CBNZ.N   R0,??imageBlockResponseParse_4
   1749                // Continue download right now
   1750                continueImageDownload();
   \                     ??imageBlockResponseParse_9:
   \   000001F2   0x.... 0x....      BL       continueImageDownload
   1751              } // else (fall through)
   1752                // timer set, wait for next event to fire
   1753            }
   1754            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??imageBlockResponseParse_4:
   \   000001F6   0x2000             MOVS     R0,#+0
   \                     ??imageBlockResponseParse_13:
   \   000001F8   0xB007             ADD      SP,SP,#+28
   \   000001FA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1755          }
   1756          

   \                                 In section .text, align 2, keep-with-next
   1757          static EmberAfStatus upgradeEndResponseParse(int8u status,
   1758                                                       int8u* buffer, 
   1759                                                       int8u length)
   1760          {
   \                     upgradeEndResponseParse:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4615             MOV      R5,R2
   1761            EmberAfOtaImageId serverSentId;
   1762            int32u waitTime;
   1763            int32u currentTime, upgradeTime;
   1764            int8u index = EMBER_AF_ZCL_OVERHEAD;
   1765          
   1766            if (status) {
   \   00000008   0xB140             CBZ.N    R0,??upgradeEndResponseParse_0
   1767              otaPrintln("Server aborted upgrade, status: 0x%X",
   1768                         status);
   \   0000000A   0x4602             MOV      R2,R0
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant "Server aborted upgrad...">`
   \   00000010   0x.... 0x....      BL       ?Subroutine1
   1769              downloadAndVerifyFinish(EMBER_AF_OTA_SERVER_ABORTED);
   \                     ??CrossCallReturnLabel_4:
   \   00000014   0x2003             MOVS     R0,#+3
   \   00000016   0x.... 0x....      BL       downloadAndVerifyFinish
   1770              return EMBER_ZCL_STATUS_SUCCESS;
   \   0000001A   0xE073             B.N      ??upgradeEndResponseParse_1
   1771            }
   1772          
   1773            index += emAfOtaParseImageIdFromMessage(&serverSentId, 
   1774                                                    &(buffer[index]),
   1775                                                    length);
   \                     ??upgradeEndResponseParse_0:
   \   0000001C   0x1CE1             ADDS     R1,R4,#+3
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x.... 0x....      BL       emAfOtaParseImageIdFromMessage
   \   00000024   0x1CC6             ADDS     R6,R0,#+3
   \   00000026   0xB2F6             UXTB     R6,R6
   1776          
   1777            if ((serverSentId.manufacturerId != currentDownloadFile.manufacturerId)
   1778                && (serverSentId.manufacturerId != MFG_ID_WILD_CARD)) {
   \   00000028   0x.... 0x....      ADR.W    R7,`?<Constant "0x%2X">`
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant "Error: %p had invalid...">`
   \   00000030   0x.... 0x....      ADR.W    R2,`?<Constant "Upgrade end response">`
   \   00000034   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000038   0x....             LDR.N    R3,??DataTable129
   \   0000003A   0xF8BD 0xC004      LDRH     R12,[SP, #+4]
   \   0000003E   0xF8B3 0xE008      LDRH     LR,[R3, #+8]
   \   00000042   0x45F4             CMP      R12,LR
   \   00000044   0xBF18             IT       NE 
   \   00000046   0x4584             CMPNE    R12,R0
   \   00000048   0xD007             BEQ.N    ??upgradeEndResponseParse_2
   1779              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1780                                             "Upgrade end response",
   1781                                             "manufacturer ID");
   \   0000004A   0x.... 0x....      ADR.W    R3,`?<Constant "manufacturer ID">`
   \   0000004E   0x2040             MOVS     R0,#+64
   \   00000050   0x.... 0x....      BL       emberAfPrint
   1782              otaPrintln("0x%2X", serverSentId.manufacturerId);
   \   00000054   0xF8BD 0x2004      LDRH     R2,[SP, #+4]
   \   00000058   0xE00E             B.N      ??upgradeEndResponseParse_3
   1783              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1784            }
   1785            if ((serverSentId.imageTypeId != currentDownloadFile.imageTypeId) 
   1786                && (serverSentId.imageTypeId != IMAGE_TYPE_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_2:
   \   0000005A   0xF8BD 0xC006      LDRH     R12,[SP, #+6]
   \   0000005E   0xF8B3 0xE00A      LDRH     LR,[R3, #+10]
   \   00000062   0x45F4             CMP      R12,LR
   \   00000064   0xBF18             IT       NE 
   \   00000066   0x4584             CMPNE    R12,R0
   \   00000068   0xD008             BEQ.N    ??upgradeEndResponseParse_4
   1787              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1788                                             "Upgrade end response",
   1789                                             "image type ID");
   \   0000006A   0x.... 0x....      ADR.W    R3,`?<Constant "image type ID">`
   \   0000006E   0x2040             MOVS     R0,#+64
   \   00000070   0x.... 0x....      BL       emberAfPrint
   1790              otaPrintln("0x%2X", serverSentId.imageTypeId);
   \   00000074   0xF8BD 0x2006      LDRH     R2,[SP, #+6]
   \                     ??upgradeEndResponseParse_3:
   \   00000078   0x4639             MOV      R1,R7
   \   0000007A   0xE00E             B.N      ??upgradeEndResponseParse_5
   1791              return EMBER_ZCL_STATUS_INVALID_VALUE;
   1792            }
   1793            if ((serverSentId.firmwareVersion != currentDownloadFile.firmwareVersion
   1794                 && serverSentId.firmwareVersion != FILE_VERSION_WILD_CARD)) {
   \                     ??upgradeEndResponseParse_4:
   \   0000007C   0x9802             LDR      R0,[SP, #+8]
   \   0000007E   0x68DB             LDR      R3,[R3, #+12]
   \   00000080   0x4298             CMP      R0,R3
   \   00000082   0xBF18             IT       NE 
   \   00000084   0xF110 0x0F01      CMNNE    R0,#+1
   \   00000088   0xD00B             BEQ.N    ??upgradeEndResponseParse_6
   1795              emberAfOtaBootloadClusterPrint("Error: %p had invalid %p: ",
   1796                                             "Upgrade end response",
   1797                                             "file version");
   \   0000008A   0x.... 0x....      ADR.W    R3,`?<Constant "file version">`
   \   0000008E   0x2040             MOVS     R0,#+64
   \   00000090   0x.... 0x....      BL       emberAfPrint
   1798              otaPrintln("0x%4X", serverSentId.firmwareVersion);
   \   00000094   0x9A02             LDR      R2,[SP, #+8]
   \   00000096   0x.... 0x....      ADR.W    R1,`?<Constant "0x%4X">`
   \                     ??upgradeEndResponseParse_5:
   \   0000009A   0x.... 0x....      BL       ?Subroutine1
   1799              return EMBER_ZCL_STATUS_INVALID_VALUE;
   \                     ??CrossCallReturnLabel_3:
   \   0000009E   0x2087             MOVS     R0,#+135
   \   000000A0   0xE031             B.N      ??upgradeEndResponseParse_7
   1800            }
   1801            currentTime = emberAfGetInt32u(buffer, index, length);
   \                     ??upgradeEndResponseParse_6:
   \   000000A2   0x462A             MOV      R2,R5
   \   000000A4   0x4631             MOV      R1,R6
   \   000000A6   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_60:
   \   000000AA   0x4607             MOV      R7,R0
   1802            index += 4;
   1803            upgradeTime = emberAfGetInt32u(buffer, index, length);
   \   000000AC   0x462A             MOV      R2,R5
   \   000000AE   0x1D31             ADDS     R1,R6,#+4
   \   000000B0   0xB2C9             UXTB     R1,R1
   \   000000B2   0x.... 0x....      BL       ??Subroutine6_0
   \                     ??CrossCallReturnLabel_59:
   \   000000B6   0x4601             MOV      R1,R0
   1804            
   1805            if (WAIT_FOR_UPGRADE_MESSAGE == upgradeTime) {
   \   000000B8   0x....             LDR.N    R4,??DataTable129_6  ;; 0x36ee80
   \   000000BA   0xF111 0x0F01      CMN      R1,#+1
   \   000000BE   0xD106             BNE.N    ??upgradeEndResponseParse_8
   1806              recordUpgradeStatus(BOOTLOAD_STATE_WAITING_FOR_UPGRADE_MESSAGE);
   \   000000C0   0x2008             MOVS     R0,#+8
   \   000000C2   0x.... 0x....      BL       recordUpgradeStatus
   1807              setTimer(WAIT_FOR_UPGRADE_DELAY_MS);
   \   000000C6   0x4620             MOV      R0,R4
   \   000000C8   0x.... 0x....      BL       setTimer
   1808              return EMBER_ZCL_STATUS_SUCCESS;
   \   000000CC   0xE01A             B.N      ??upgradeEndResponseParse_1
   1809            }
   1810          
   1811            // NOTE:  Current Time and Upgrade Time are in SECONDS since epoch.
   1812            // Our timer uses MILISECONDS.  calculateTimer() will give us the MS delay.
   1813          
   1814            if (!calculateTimer(currentTime, upgradeTime, &waitTime)) {
   \                     ??upgradeEndResponseParse_8:
   \   000000CE   0xAA00             ADD      R2,SP,#+0
   \   000000D0   0x4638             MOV      R0,R7
   \   000000D2   0x.... 0x....      BL       calculateTimer
   \   000000D6   0xB148             CBZ.N    R0,??CrossCallReturnLabel_2
   1815              waitTime = CALCULATE_TIME_ERROR_UPGRADE_END_RESPONSE_DELAY_MS;
   1816            } else {
   1817              // Even when we are told to upgrade immediately, we want to insure there
   1818              // is a chance for the APS retries and ZCL response to get back to their 
   1819              // senders.
   1820              if (waitTime < IMMEDIATE_UPGRADE_DELAY_MS) {
   \   000000D8   0xF640 0x34B8      MOVW     R4,#+3000
   \   000000DC   0x9800             LDR      R0,[SP, #+0]
   \   000000DE   0x42A0             CMP      R0,R4
   \   000000E0   0xD205             BCS.N    ??upgradeEndResponseParse_9
   1821                otaPrintln("Adding %d ms. delay for immediate upgrade.", 
   1822                           IMMEDIATE_UPGRADE_DELAY_MS);
   \   000000E2   0x4622             MOV      R2,R4
   \   000000E4   0x.... 0x....      ADR.W    R1,`?<Constant "Adding %d ms. delay f...">`
   \   000000E8   0x.... 0x....      BL       ?Subroutine1
   1823                waitTime = IMMEDIATE_UPGRADE_DELAY_MS;
   \                     ??CrossCallReturnLabel_2:
   \   000000EC   0x9400             STR      R4,[SP, #+0]
   1824              }
   1825            }
   1826            // Expect at this point waitTime != 0
   1827            setTimer(waitTime);
   \                     ??upgradeEndResponseParse_9:
   \   000000EE   0x9800             LDR      R0,[SP, #+0]
   \   000000F0   0x.... 0x....      BL       setTimer
   1828            emberAfCoreFlush();
   1829            otaPrintln("Countdown to upgrade: %d ms", waitTime);
   \   000000F4   0x9A00             LDR      R2,[SP, #+0]
   \   000000F6   0x.... 0x....      ADR.W    R1,`?<Constant "Countdown to upgrade:...">`
   \   000000FA   0x.... 0x....      BL       ?Subroutine1
   1830            emberAfCoreFlush();
   1831            recordUpgradeStatus(BOOTLOAD_STATE_COUNTDOWN_TO_UPGRADE);
   \                     ??CrossCallReturnLabel_1:
   \   000000FE   0x2009             MOVS     R0,#+9
   \   00000100   0x.... 0x....      BL       recordUpgradeStatus
   1832            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??upgradeEndResponseParse_1:
   \   00000104   0x2000             MOVS     R0,#+0
   \                     ??upgradeEndResponseParse_7:
   \   00000106   0xB005             ADD      SP,SP,#+20
   \   00000108   0xBDF0             POP      {R4-R7,PC}       ;; return
   1833          }
   1834          

   \                                 In section .text, align 2, keep-with-next
   1835          static boolean calculateTimer(int32u currentTime, 
   1836                                        int32u targetTime, 
   1837                                        int32u* returnTimeMs)
   1838          {
   \                     calculateTimer:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4614             MOV      R4,R2
   1839            int32u timeOut = 0;
   1840            boolean validWaitTime = TRUE; 
   1841          
   1842            if (targetTime < currentTime) {
   \   00000004   0x4281             CMP      R1,R0
   \   00000006   0xD209             BCS.N    ??calculateTimer_0
   1843              otaPrintln("%p: invalid offset currentTime(0x%4X) > upgradeTime(0x%4X)",
   1844                         "Error",
   1845                         currentTime, 
   1846                         targetTime);
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0x4603             MOV      R3,R0
   \   0000000C   0x.... 0x....      ADR.W    R2,`?<Constant "Error">`
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "%p: invalid offset cu...">`
   \   00000014   0x.... 0x....      BL       ?Subroutine4
   1847              return FALSE;
   \                     ??CrossCallReturnLabel_50:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD32             POP      {R1,R4,R5,PC}
   1848            } else {
   1849              timeOut = targetTime - currentTime;
   \                     ??calculateTimer_0:
   \   0000001C   0x1A0D             SUBS     R5,R1,R0
   1850              otaPrintln("OTA Cluster: wait for %d s", timeOut);
   \   0000001E   0x462A             MOV      R2,R5
   \   00000020   0x.... 0x....      ADR.W    R1,`?<Constant "OTA Cluster: wait for...">`
   \   00000024   0x.... 0x....      BL       ?Subroutine1
   1851            }
   1852            otaPrintln("RXed timeOut 0x%4X s, MAX timeOut 0x%4X s",
   1853                       timeOut, 
   1854                       TIMEOUT_MAX_WAIT_TIME_MS >> 10);   // divide by ~1000
   \                     ??CrossCallReturnLabel_0:
   \   00000028   0xF640 0x53BB      MOVW     R3,#+3515
   \   0000002C   0x462A             MOV      R2,R5
   \   0000002E   0x.... 0x....      ADR.W    R1,`?<Constant "RXed timeOut 0x%4X s,...">`
   \   00000032   0x.... 0x....      BL       ?Subroutine3
   1855                                                          // save flash by doing a bit shift
   1856            timeOut *= 1000;
   \                     ??CrossCallReturnLabel_39:
   \   00000036   0xF44F 0x707A      MOV      R0,#+1000
   \   0000003A   0x4368             MULS     R0,R0,R5
   1857          
   1858            if (timeOut > TIMEOUT_MAX_WAIT_TIME_MS) {
   \   0000003C   0x....             LDR.N    R1,??DataTable129_7  ;; 0x36ee81
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xBF28             IT       CS 
   \   00000042   0x....             LDRCS.N  R0,??DataTable129_6  ;; 0x36ee80
   1859              timeOut = TIMEOUT_MAX_WAIT_TIME_MS;
   1860            }
   1861            *returnTimeMs = timeOut;    
   \   00000044   0x6020             STR      R0,[R4, #+0]
   1862            return validWaitTime;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1863          }
   1864          

   \                                 In section .text, align 2, keep-with-next
   1865          static void runUpgrade(void)
   1866          {
   \                     runUpgrade:
   \   00000000   0xB580             PUSH     {R7,LR}
   1867            emberAfCoreFlush();
   1868            otaPrintln("Applying upgrade");
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "Applying upgrade">`
   \   00000006   0x.... 0x....      BL       ?Subroutine2
   1869            emberAfCoreFlush();
   1870            
   1871            emberAfOtaClientBootloadCallback(&currentDownloadFile);
   \                     ??CrossCallReturnLabel_24:
   \   0000000A   0x....             LDR.N    R0,??DataTable129_8
   \   0000000C   0x.... 0x....      BL       emberAfOtaClientBootloadCallback
   1872          
   1873            // If we returned, then something is wrong with the upgrade.  
   1874            // It is expected that an invalid image file is deleted to prevent it
   1875            // from being used a subsequent time.
   1876            queryNextImage(START_NEW_TIMER, 
                                  ^
Warning[Pe188]: enumerated type mixed with another type
   1877                           FALSE);  // query error?
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE8BD 0x4004      POP      {R2,LR}
   \   00000018   0x....             B.N      queryNextImage
   1878          }
   1879          
   1880          // Sends an image block request for a file the server should 
   1881          // not have.  Test harness only (test case 9.5.6 - Missing File)

   \                                 In section .text, align 2, keep-with-next
   1882          void emAfSendImageBlockRequestTest(void)
   1883          {
   \                     emAfSendImageBlockRequestTest:
   \   00000000   0xB510             PUSH     {R4,LR}
   1884            if (currentBootloadState != BOOTLOAD_STATE_NONE) {
   \   00000002   0x....             LDR.N    R4,??DataTable129
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0xB130             CBZ.N    R0,??emAfSendImageBlockRequestTest_0
   1885              otaPrintln("Image block request test only works when state is BOOTLOAD_STATE_NONE");
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant "Image block request t...">`
   \   0000000C   0x2040             MOVS     R0,#+64
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      emberAfPrintln
   1886              return;
   1887            }
   1888          
   1889            updateCurrentOffset(100);
   \                     ??emAfSendImageBlockRequestTest_0:
   \   00000016   0x2064             MOVS     R0,#+100
   \   00000018   0x.... 0x....      BL       updateCurrentOffset
   1890          
   1891            // Values from the test spec.
   1892            currentDownloadFile.manufacturerId = 0xFFF0;
   \   0000001C   0xF64F 0x70F0      MOVW     R0,#+65520
   \   00000020   0x8120             STRH     R0,[R4, #+8]
   1893            currentDownloadFile.imageTypeId    = 0x0000;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x8160             STRH     R0,[R4, #+10]
   1894            currentDownloadFile.firmwareVersion = 0xFFFFFFF0;
   \   00000026   0xF06F 0x000F      MVN      R0,#+15
   \   0000002A   0x60E0             STR      R0,[R4, #+12]
   1895            sendMessage(ZCL_IMAGE_BLOCK_REQUEST_COMMAND_ID, 
   1896                        0,   // upgrade end status (ignored)
   1897                        0);  // timer
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x2003             MOVS     R0,#+3
   \   00000032                      REQUIRE ?Subroutine0
   \   00000032                      ;; // Fall through to label ?Subroutine0
   1898          }
   1899          

   \                                 In section .text, align 2, keep-with-next
   1900          void emAfSetPageRequest(boolean pageRequestOn)
   1901          {
   1902            usePageRequest = pageRequestOn;
   \                     emAfSetPageRequest:
   \   00000000   0x....             LDR.N    R1,??DataTable129
   \   00000002   0x7148             STRB     R0,[R1, #+5]
   1903          }
   \   00000004   0x4770             BX       LR               ;; return
   1904          

   \                                 In section .text, align 2, keep-with-next
   1905          boolean emAfUsingPageRequest(void)
   1906          {
   1907            return usePageRequest;
   \                     emAfUsingPageRequest:
   \   00000000   0x....             LDR.N    R0,??DataTable129
   \   00000002   0x7940             LDRB     R0,[R0, #+5]
   \   00000004   0x4770             BX       LR               ;; return
   1908          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "None">`:
   \   00000000   0x4E 0x6F          DC8 "None"
   \              0x6E 0x65    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Random Delay before s...">`:
   \   00000000   0x52 0x61          DC8 "Random Delay before start"
   \              0x6E 0x64    
   \              0x6F 0x6D    
   \              0x20 0x44    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x65 0x66    
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Discovering OTA Server">`:
   \   00000000   0x44 0x69          DC8 "Discovering OTA Server"
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Get OTA Server EUI">`:
   \   00000000   0x47 0x65          DC8 "Get OTA Server EUI"
   \              0x74 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x45    
   \              0x55 0x49    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Obtain link key">`:
   \   00000000   0x4F 0x62          DC8 "Obtain link key"
   \              0x74 0x61    
   \              0x69 0x6E    
   \              0x20 0x6C    
   \              0x69 0x6E    
   \              0x6B 0x20    
   \              0x6B 0x65    
   \              0x79 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Querying Next Image">`:
   \   00000000   0x51 0x75          DC8 "Querying Next Image"
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x4E    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Downloading Image">`:
   \   00000000   0x44 0x6F          DC8 "Downloading Image"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Timeout waiting for m...">`:
   \   00000000   0x54 0x69          DC8 "Timeout waiting for message."
   \              0x6D 0x65    
   \              0x6F 0x75    
   \              0x74 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " State:   %p">`:
   \   00000000   0x20 0x53          DC8 " State:   %p"
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x25 0x70    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Waiting for response...">`:
   \   00000000   0x20 0x57          DC8 " Waiting for response: %p"
   \              0x61 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x70 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Next Event Timer: %d ms">`:
   \   00000000   0x20 0x4E          DC8 " Next Event Timer: %d ms"
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Current Download Off...">`:
   \   00000000   0x20 0x43          DC8 " Current Download Offset: 0x%4X (%d%%)"
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x44    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x4F 0x66    
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x28 0x25    
   \              0x64 0x25    
   \              0x25 0x29    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "OTA Cluster: setting ...">`:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: setting IEEE address of OTA cluster"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x49    
   \              0x45 0x45    
   \              0x45 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x00         
   \   00000031   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Setting OTA Server to...">`:
   \   00000000   0x53 0x65          DC8 "Setting OTA Server to 0x%2X"
   \              0x74 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x53 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Failed to initiate se...">`:
   \   00000000   0x46 0x61          DC8 "Failed to initiate service discovery."
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x69 0x6E    
   \              0x69 0x74    
   \              0x69 0x61    
   \              0x74 0x65    
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x79    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111:
   \   00000000   0x79 0x65          DC8      "yes"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable111_1:
   \   00000000   0x6E 0x6F          DC8      0x6E, 0x6F, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Partial file download...">`:
   \   00000000   0x50 0x61          DC8 50H, 61H, 72H, 74H, 69H, 61H, 6CH, 20H
   \              0x72 0x74    
   \              0x69 0x61    
   \              0x6C 0x20    
   \   00000008   0x66 0x69          DC8 66H, 69H, 6CH, 65H, 20H, 64H, 6FH, 77H
   \              0x6C 0x65    
   \              0x20 0x64    
   \              0x6F 0x77    
   \   00000010   0x6E 0x6C          DC8 6EH, 6CH, 6FH, 61H, 64H, 20H, 66H, 6FH
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x66 0x6F    
   \   00000018   0x75 0x6E          DC8 75H, 6EH, 64H, 2CH, 20H, 63H, 6FH, 6EH
   \              0x64 0x2C    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \   00000020   0x74 0x69          DC8 74H, 69H, 6EH, 75H, 69H, 6EH, 67H, 20H
   \              0x6E 0x75    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x66 0x72          DC8 66H, 72H, 6FH, 6DH, 20H, 6FH, 66H, 66H
   \              0x6F 0x6D    
   \              0x20 0x6F    
   \              0x66 0x66    
   \   00000030   0x73 0x65          DC8 73H, 65H, 74H, 20H, 30H, 78H, 25H, 34H
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x00          DC8 58H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Found fully downloade...">`:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 75H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x75    
   \   00000008   0x6C 0x6C          DC8 6CH, 6CH, 79H, 20H, 64H, 6FH, 77H, 6EH
   \              0x79 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \   00000010   0x6C 0x6F          DC8 6CH, 6FH, 61H, 64H, 65H, 64H, 20H, 66H
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x20 0x66    
   \   00000018   0x69 0x6C          DC8 69H, 6CH, 65H, 20H, 69H, 6EH, 20H, 73H
   \              0x65 0x20    
   \              0x69 0x6E    
   \              0x20 0x73    
   \   00000020   0x74 0x6F          DC8 74H, 6FH, 72H, 61H, 67H, 65H, 20H, 28H
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x28    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 73H, 69H, 6FH, 6EH, 20H
   \              0x72 0x73    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 34H, 58H, 29H, 2EH, 0
   \              0x25 0x34    
   \              0x58 0x29    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Found file in storage...">`:
   \   00000000   0x46 0x6F          DC8 46H, 6FH, 75H, 6EH, 64H, 20H, 66H, 69H
   \              0x75 0x6E    
   \              0x64 0x20    
   \              0x66 0x69    
   \   00000008   0x6C 0x65          DC8 6CH, 65H, 20H, 69H, 6EH, 20H, 73H, 74H
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \   00000010   0x6F 0x72          DC8 6FH, 72H, 61H, 67H, 65H, 20H, 77H, 69H
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x77 0x69    
   \   00000018   0x74 0x68          DC8 74H, 68H, 20H, 64H, 69H, 66H, 66H, 65H
   \              0x20 0x64    
   \              0x69 0x66    
   \              0x66 0x65    
   \   00000020   0x72 0x65          DC8 72H, 65H, 6EH, 74H, 20H, 76H, 65H, 72H
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000028   0x73 0x69          DC8 73H, 69H, 6FH, 6EH, 20H, 28H, 30H, 78H
   \              0x6F 0x6E    
   \              0x20 0x28    
   \              0x30 0x78    
   \   00000030   0x25 0x34          DC8 25H, 34H, 58H, 29H, 20H, 74H, 68H, 61H
   \              0x58 0x29    
   \              0x20 0x74    
   \              0x68 0x61    
   \   00000038   0x6E 0x20          DC8 6EH, 20H, 63H, 75H, 72H, 72H, 65H, 6EH
   \              0x63 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \   00000040   0x74 0x20          DC8 74H, 20H, 76H, 65H, 72H, 73H, 69H, 6FH
   \              0x76 0x65    
   \              0x72 0x73    
   \              0x69 0x6F    
   \   00000048   0x6E 0x20          DC8 6EH, 20H, 28H, 30H, 78H, 25H, 34H, 58H
   \              0x28 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \   00000050   0x29 0x00          DC8 29H, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "File in storage is sa...">`:
   \   00000000   0x46 0x69          DC8 46H, 69H, 6CH, 65H, 20H, 69H, 6EH, 20H
   \              0x6C 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \   00000008   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 61H, 67H, 65H, 20H
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \   00000010   0x69 0x73          DC8 69H, 73H, 20H, 73H, 61H, 6DH, 65H, 20H
   \              0x20 0x73    
   \              0x61 0x6D    
   \              0x65 0x20    
   \   00000018   0x61 0x73          DC8 61H, 73H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000020   0x6E 0x74          DC8 6EH, 74H, 20H, 72H, 75H, 6EH, 6EH, 69H
   \              0x20 0x72    
   \              0x75 0x6E    
   \              0x6E 0x69    
   \   00000028   0x6E 0x67          DC8 6EH, 67H, 20H, 76H, 65H, 72H, 73H, 69H
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \   00000030   0x6F 0x6E          DC8 6FH, 6EH, 20H, 28H, 30H, 78H, 25H, 34H
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No image found in sto...">`:
   \   00000000   0x4E 0x6F          DC8 "No image found in storage."
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x73 0x74    
   \              0x6F 0x72    
   \              0x61 0x67    
   \              0x65 0x2E    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Bootload state: %p">`:
   \   00000000   0x42 0x6F          DC8 "Bootload state: %p"
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x3A 0x20    
   \              0x25 0x70    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Got unexpected %p.  I...">`:
   \   00000000   0x47 0x6F          DC8 "Got unexpected %p.  Ignored."
   \              0x74 0x20    
   \              0x75 0x6E    
   \              0x65 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x25    
   \              0x70 0x2E    
   \              0x20 0x20    
   \              0x49 0x67    
   \              0x6E 0x6F    
   \              0x72 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Image notify">`:
   \   00000000   0x49 0x6D          DC8 "Image notify"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable123:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable123_1:
   \   00000000   0x000927C0         DC32     0x927c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   0x........         DC32     emAfOtaClientServiceDiscoveryCallback

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Image block response">`:
   \   00000000   0x49 0x6D          DC8 "Image block response"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable126:
   \   00000000   0x........         DC32     emAfEndpoints

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129:
   \   00000000   0x........         DC32     currentBootloadState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_1:
   \   00000000   0x........         DC32     emAfOtaMinMessageLengths

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_2:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_3:
   \   00000000   0x........         DC32     appResponseLength

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_4:
   \   00000000   0x........         DC32     emberAfResponseApsFrame

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_5:
   \   00000000   0x000493E0         DC32     0x493e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_6:
   \   00000000   0x0036EE80         DC32     0x36ee80

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_7:
   \   00000000   0x0036EE81         DC32     0x36ee81

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable129_8:
   \   00000000   0x........         DC32     currentBootloadState+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Bad OTA command: 0x%X">`:
   \   00000000   0x42 0x61          DC8 "Bad OTA command: 0x%X"
   \              0x64 0x20    
   \              0x4F 0x54    
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "OTA command 0x%X too ...">`:
   \   00000000   0x4F 0x54          DC8 "OTA command 0x%X too short (len %d < min %d)"
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x6C 0x65    
   \              0x6E 0x20    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x6D    
   \              0x69 0x6E    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "OTA command from unre...">`:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH
   \              0x41 0x20    
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \   00000008   0x61 0x6E          DC8 61H, 6EH, 64H, 20H, 66H, 72H, 6FH, 6DH
   \              0x64 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000010   0x20 0x75          DC8 20H, 75H, 6EH, 72H, 65H, 63H, 6FH, 67H
   \              0x6E 0x72    
   \              0x65 0x63    
   \              0x6F 0x67    
   \   00000018   0x6E 0x69          DC8 6EH, 69H, 7AH, 65H, 64H, 20H, 73H, 65H
   \              0x7A 0x65    
   \              0x64 0x20    
   \              0x73 0x65    
   \   00000020   0x72 0x76          DC8 72H, 76H, 65H, 72H, 20H, 30H, 78H, 25H
   \              0x65 0x72    
   \              0x20 0x30    
   \              0x78 0x25    
   \   00000028   0x32 0x58          DC8 32H, 58H, 2EH, 20H, 20H, 4DH, 79H, 20H
   \              0x2E 0x20    
   \              0x20 0x4D    
   \              0x79 0x20    
   \   00000030   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 73H, 65H, 72H, 76H
   \              0x41 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \   00000038   0x65 0x72          DC8 65H, 72H, 3AH, 20H, 30H, 78H, 25H, 32H
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x32    
   \   00000040   0x58 0x00          DC8 58H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Query next image resp...">`:
   \   00000000   0x51 0x75          DC8 "Query next image response"
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x6E 0x65    
   \              0x78 0x74    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Upgrade end response">`:
   \   00000000   0x55 0x70          DC8 "Upgrade end response"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x65 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: failed parsing OT...">`:
   \   00000000   0x25 0x70          DC8 "%p: failed parsing OTA cmd 0x%x"
   \              0x3A 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x70    
   \              0x61 0x72    
   \              0x73 0x69    
   \              0x6E 0x67    
   \              0x20 0x4F    
   \              0x54 0x41    
   \              0x20 0x63    
   \              0x6D 0x64    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error">`:
   \   00000000   0x45 0x72          DC8 "Error"
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "OTA Default response ...">`:
   \   00000000   0x4F 0x54          DC8 4FH, 54H, 41H, 20H, 44H, 65H, 66H, 61H
   \              0x41 0x20    
   \              0x44 0x65    
   \              0x66 0x61    
   \   00000008   0x75 0x6C          DC8 75H, 6CH, 74H, 20H, 72H, 65H, 73H, 70H
   \              0x74 0x20    
   \              0x72 0x65    
   \              0x73 0x70    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 73H, 65H, 20H, 74H, 6FH, 20H
   \              0x73 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000018   0x63 0x6F          DC8 63H, 6FH, 6DH, 6DH, 61H, 6EH, 64H, 20H
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \              0x64 0x20    
   \   00000020   0x49 0x44          DC8 49H, 44H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 20H
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \   00000030   0x30 0x78          DC8 30H, 78H, 25H, 58H, 0
   \              0x25 0x58    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p unicast, querying">`:
   \   00000000   0x25 0x70          DC8 "%p unicast, querying"
   \              0x20 0x75    
   \              0x6E 0x69    
   \              0x63 0x61    
   \              0x73 0x74    
   \              0x2C 0x20    
   \              0x71 0x75    
   \              0x65 0x72    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Image notify command">`:
   \   00000000   0x49 0x6D          DC8 "Image notify command"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x69    
   \              0x66 0x79    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p payload type 0x%X">`:
   \   00000000   0x25 0x70          DC8 "%p %p payload type 0x%X"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x70 0x61    
   \              0x79 0x6C    
   \              0x6F 0x61    
   \              0x64 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Invalid">`:
   \   00000000   0x49 0x6E          DC8 "Invalid"
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p: out of range j...">`:
   \   00000000   0x25 0x70          DC8 "%p %p: out of range jitter %d"
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x6F    
   \              0x75 0x74    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x72 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x6A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p: payload length...">`:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 25H, 70H, 3AH, 20H, 70H
   \              0x20 0x25    
   \              0x70 0x3A    
   \              0x20 0x70    
   \   00000008   0x61 0x79          DC8 61H, 79H, 6CH, 6FH, 61H, 64H, 20H, 6CH
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x6C    
   \   00000010   0x65 0x6E          DC8 65H, 6EH, 67H, 74H, 68H, 20H, 64H, 6FH
   \              0x67 0x74    
   \              0x68 0x20    
   \              0x64 0x6F    
   \   00000018   0x65 0x73          DC8 65H, 73H, 6EH, 27H, 74H, 20H, 6DH, 61H
   \              0x6E 0x27    
   \              0x74 0x20    
   \              0x6D 0x61    
   \   00000020   0x74 0x63          DC8 74H, 63H, 68H, 20H, 74H, 79H, 70H, 65H
   \              0x68 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 20H, 28H, 25H
   \              0x78 0x25    
   \              0x58 0x20    
   \              0x28 0x25    
   \   00000030   0x64 0x20          DC8 64H, 20H, 3CH, 20H, 25H, 64H, 29H, 0
   \              0x3C 0x20    
   \              0x25 0x64    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p due to non-matc...">`:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching manufacturer ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x61    
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Ignoring">`:
   \   00000000   0x49 0x67          DC8 "Ignoring"
   \              0x6E 0x6F    
   \              0x72 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p due to non-matc...">_1`:
   \   00000000   0x25 0x70          DC8 "%p %p due to non-matching image type ID"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6E    
   \              0x6F 0x6E    
   \              0x2D 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p due to matching...">`:
   \   00000000   0x25 0x70          DC8 "%p %p due to matching firmware version"
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x64 0x75    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x69    
   \              0x72 0x6D    
   \              0x77 0x61    
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p %p, Rx\\'d Jitter (0...">`:
   \   00000000   0x25 0x70          DC8 "%p %p, Rx'd Jitter (0x%x), Picked Jitter (0x%x)"
   \              0x20 0x25    
   \              0x70 0x2C    
   \              0x20 0x52    
   \              0x78 0x27    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x2C    
   \              0x20 0x50    
   \              0x69 0x63    
   \              0x6B 0x65    
   \              0x64 0x20    
   \              0x4A 0x69    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x20 0x28    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x29 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Starting download, Ve...">`:
   \   00000000   0x53 0x74          DC8 "Starting download, Version 0x%4X"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2C    
   \              0x20 0x56    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: Failed to eras...">`:
   \   00000000   0x45 0x72          DC8 "Error: Failed to erase old temp data."
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x65    
   \              0x72 0x61    
   \              0x73 0x65    
   \              0x20 0x6F    
   \              0x6C 0x64    
   \              0x20 0x74    
   \              0x65 0x6D    
   \              0x70 0x20    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x2E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p returned 0x%X.  No...">`:
   \   00000000   0x25 0x70          DC8 "%p returned 0x%X.  No new image to download."
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x2E 0x20    
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p too short (%d < %d)">`:
   \   00000000   0x25 0x70          DC8 "%p too short (%d < %d)"
   \              0x20 0x74    
   \              0x6F 0x6F    
   \              0x20 0x73    
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x28    
   \              0x25 0x64    
   \              0x20 0x3C    
   \              0x20 0x25    
   \              0x64 0x29    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: New image is avai...">`:
   \   00000000   0x25 0x70          DC8 "%p: New image is available for download."
   \              0x3A 0x20    
   \              0x4E 0x65    
   \              0x77 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x69 0x73    
   \              0x20 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x64    
   \              0x6F 0x77    
   \              0x6E 0x6C    
   \              0x6F 0x61    
   \              0x64 0x2E    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p is not using my im...">`:
   \   00000000   0x25 0x70          DC8 "%p is not using my image info."
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x6D 0x79    
   \              0x20 0x69    
   \              0x6D 0x61    
   \              0x67 0x65    
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x2E    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ERROR: Next Image is ...">`:
   \   00000000   0x45 0x52          DC8 45H, 52H, 52H, 4FH, 52H, 3AH, 20H, 4EH
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \   00000008   0x65 0x78          DC8 65H, 78H, 74H, 20H, 49H, 6DH, 61H, 67H
   \              0x74 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \   00000010   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 74H, 6FH, 6FH
   \              0x69 0x73    
   \              0x20 0x74    
   \              0x6F 0x6F    
   \   00000018   0x20 0x62          DC8 20H, 62H, 69H, 67H, 20H, 74H, 6FH, 20H
   \              0x69 0x67    
   \              0x20 0x74    
   \              0x6F 0x20    
   \   00000020   0x73 0x74          DC8 73H, 74H, 6FH, 72H, 65H, 20H, 28H, 30H
   \              0x6F 0x72    
   \              0x65 0x20    
   \              0x28 0x30    
   \   00000028   0x78 0x25          DC8 78H, 25H, 34H, 58H, 20H, 3EH, 20H, 30H
   \              0x34 0x58    
   \              0x20 0x3E    
   \              0x20 0x30    
   \   00000030   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 0
   \              0x34 0x58    
   \              0x29 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sending Upgrade End r...">`:
   \   00000000   0x53 0x65          DC8 "Sending Upgrade End request."
   \              0x6E 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x45 0x6E    
   \              0x64 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: invalid cmdId 0x%x">`:
   \   00000000   0x25 0x70          DC8 "%p: invalid cmdId 0x%x"
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x63 0x6D    
   \              0x64 0x49    
   \              0x64 0x20    
   \              0x30 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error:  Failed to sen...">`:
   \   00000000   0x45 0x72          DC8 45H, 72H, 72H, 6FH, 72H, 3AH, 20H, 20H
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x20    
   \   00000008   0x46 0x61          DC8 46H, 61H, 69H, 6CH, 65H, 64H, 20H, 74H
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000010   0x6F 0x20          DC8 6FH, 20H, 73H, 65H, 6EH, 64H, 20H, 4FH
   \              0x73 0x65    
   \              0x6E 0x64    
   \              0x20 0x4F    
   \   00000018   0x54 0x41          DC8 54H, 41H, 20H, 63H, 6FH, 6DH, 6DH, 61H
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \   00000020   0x6E 0x64          DC8 6EH, 64H, 20H, 30H, 78H, 25H, 58H, 2CH
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x2C    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 75H, 73H, 3AH
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3A    
   \   00000030   0x20 0x30          DC8 20H, 30H, 78H, 25H, 58H, 0
   \              0x78 0x25    
   \              0x58 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Server unknown, falli...">`:
   \   00000000   0x53 0x65          DC8 "Server unknown, falling back to discovery."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x75    
   \              0x6E 0x6B    
   \              0x6E 0x6F    
   \              0x77 0x6E    
   \              0x2C 0x20    
   \              0x66 0x61    
   \              0x6C 0x6C    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x64 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Maximum query errors ...">`:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x71 0x75          DC8 71H, 75H, 65H, 72H, 79H, 20H, 65H, 72H
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x65 0x72    
   \   00000010   0x72 0x6F          DC8 72H, 6FH, 72H, 73H, 20H, 68H, 69H, 74H
   \              0x72 0x73    
   \              0x20 0x68    
   \              0x69 0x74    
   \   00000018   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 2CH, 20H, 73H
   \              0x25 0x64    
   \              0x29 0x2C    
   \              0x20 0x73    
   \   00000020   0x74 0x61          DC8 74H, 61H, 72H, 74H, 69H, 6EH, 67H, 20H
   \              0x72 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000028   0x73 0x65          DC8 73H, 65H, 61H, 72H, 63H, 68H, 20H, 66H
   \              0x61 0x72    
   \              0x63 0x68    
   \              0x20 0x66    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 20H, 6EH, 65H, 77H, 20H, 4FH
   \              0x20 0x6E    
   \              0x65 0x77    
   \              0x20 0x4F    
   \   00000038   0x54 0x41          DC8 54H, 41H, 20H, 73H, 65H, 72H, 76H, 65H
   \              0x20 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \   00000040   0x72 0x2E          DC8 72H, 2EH, 0AH, 0
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Maximum number of dow...">`:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x6E 0x75          DC8 6EH, 75H, 6DH, 62H, 65H, 72H, 20H, 6FH
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x20 0x6F    
   \   00000010   0x66 0x20          DC8 66H, 20H, 64H, 6FH, 77H, 6EH, 6CH, 6FH
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \   00000018   0x61 0x64          DC8 61H, 64H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000020   0x73 0x20          DC8 73H, 20H, 72H, 65H, 61H, 63H, 68H, 20H
   \              0x72 0x65    
   \              0x61 0x63    
   \              0x68 0x20    
   \   00000028   0x28 0x25          DC8 28H, 25H, 64H, 29H, 2CH, 20H, 61H, 62H
   \              0x64 0x29    
   \              0x2C 0x20    
   \              0x61 0x62    
   \   00000030   0x6F 0x72          DC8 6FH, 72H, 74H, 69H, 6EH, 67H, 2EH, 0
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Client verification f...">`:
   \   00000000   0x43 0x6C          DC8 "Client verification failed."
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No signature verifica...">`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 73H, 69H, 67H, 6EH, 61H
   \              0x20 0x73    
   \              0x69 0x67    
   \              0x6E 0x61    
   \   00000008   0x74 0x75          DC8 74H, 75H, 72H, 65H, 20H, 76H, 65H, 72H
   \              0x72 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \   00000010   0x69 0x66          DC8 69H, 66H, 69H, 63H, 61H, 74H, 69H, 6FH
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 73H, 75H, 70H, 70H, 6FH, 72H
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \   00000020   0x74 0x2C          DC8 74H, 2CH, 20H, 61H, 73H, 73H, 75H, 6DH
   \              0x20 0x61    
   \              0x73 0x73    
   \              0x75 0x6D    
   \   00000028   0x69 0x6E          DC8 69H, 6EH, 67H, 20H, 69H, 6DH, 61H, 67H
   \              0x67 0x20    
   \              0x69 0x6D    
   \              0x61 0x67    
   \   00000030   0x65 0x20          DC8 65H, 20H, 69H, 73H, 20H, 6FH, 6BH, 61H
   \              0x69 0x73    
   \              0x20 0x6F    
   \              0x6B 0x61    
   \   00000038   0x79 0x2E          DC8 79H, 2EH, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p verification %p: 0x%X">`:
   \   00000000   0x25 0x70          DC8 "%p verification %p: 0x%X"
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Signature">`:
   \   00000000   0x53 0x69          DC8 "Signature"
   \              0x67 0x6E    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Custom">`:
   \   00000000   0x43 0x75          DC8 "Custom"
   \              0x73 0x74    
   \              0x6F 0x6D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Verifying Image">`:
   \   00000000   0x56 0x65          DC8 "Verifying Image"
   \              0x72 0x69    
   \              0x66 0x79    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Waiting for Upgrade m...">`:
   \   00000000   0x57 0x61          DC8 "Waiting for Upgrade message"
   \              0x69 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x6D 0x65    
   \              0x73 0x73    
   \              0x61 0x67    
   \              0x65 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Countdown to Upgrade">`:
   \   00000000   0x43 0x6F          DC8 "Countdown to Upgrade"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x55    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "passed">`:
   \   00000000   0x70 0x61          DC8 "passed"
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FAILED">`:
   \   00000000   0x46 0x41          DC8 "FAILED"
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Maximum upgrade reque...">`:
   \   00000000   0x4D 0x61          DC8 4DH, 61H, 78H, 69H, 6DH, 75H, 6DH, 20H
   \              0x78 0x69    
   \              0x6D 0x75    
   \              0x6D 0x20    
   \   00000008   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 20H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x20    
   \   00000010   0x72 0x65          DC8 72H, 65H, 71H, 75H, 65H, 73H, 74H, 73H
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x73    
   \   00000018   0x20 0x6D          DC8 20H, 6DH, 61H, 64H, 65H, 20H, 28H, 25H
   \              0x61 0x64    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000020   0x64 0x29          DC8 64H, 29H, 20H, 77H, 69H, 74H, 68H, 6FH
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x6F    
   \   00000028   0x75 0x74          DC8 75H, 74H, 20H, 72H, 65H, 73H, 70H, 6FH
   \              0x20 0x72    
   \              0x65 0x73    
   \              0x70 0x6F    
   \   00000030   0x6E 0x73          DC8 6EH, 73H, 65H, 20H, 66H, 72H, 6FH, 6DH
   \              0x65 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \   00000038   0x20 0x73          DC8 20H, 73H, 65H, 72H, 76H, 65H, 72H, 2EH
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x2E    
   \   00000040   0x00               DC8 0
   \   00000041   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Upgrading anyway">`:
   \   00000000   0x55 0x70          DC8 "Upgrading anyway"
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x61 0x6E    
   \              0x79 0x77    
   \              0x61 0x79    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Updating Min Block Re...">`:
   \   00000000   0x55 0x70          DC8 "Updating Min Block Request Period to %d seconds"
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x4D    
   \              0x69 0x6E    
   \              0x20 0x42    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x20 0x52    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x73 0x74    
   \              0x20 0x50    
   \              0x65 0x72    
   \              0x69 0x6F    
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Download delay by ser...">`:
   \   00000000   0x44 0x6F          DC8 "Download delay by server %d ms"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x61 0x79    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Download aborted by s...">`:
   \   00000000   0x44 0x6F          DC8 "Download aborted by server."
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x62    
   \              0x79 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Server doesn\\'t suppor...">`:
   \   00000000   0x53 0x65          DC8 53H, 65H, 72H, 76H, 65H, 72H, 20H, 64H
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x64    
   \   00000008   0x6F 0x65          DC8 6FH, 65H, 73H, 6EH, 27H, 74H, 20H, 73H
   \              0x73 0x6E    
   \              0x27 0x74    
   \              0x20 0x73    
   \   00000010   0x75 0x70          DC8 75H, 70H, 70H, 6FH, 72H, 74H, 20H, 70H
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x20 0x70    
   \   00000018   0x61 0x67          DC8 61H, 67H, 65H, 20H, 72H, 65H, 71H, 75H
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000020   0x65 0x73          DC8 65H, 73H, 74H, 2CH, 20H, 6FH, 6EH, 6CH
   \              0x74 0x2C    
   \              0x20 0x6F    
   \              0x6E 0x6C    
   \   00000028   0x79 0x20          DC8 79H, 20H, 75H, 73H, 69H, 6EH, 67H, 20H
   \              0x75 0x73    
   \              0x69 0x6E    
   \              0x67 0x20    
   \   00000030   0x62 0x6C          DC8 62H, 6CH, 6FH, 63H, 6BH, 20H, 72H, 65H
   \              0x6F 0x63    
   \              0x6B 0x20    
   \              0x72 0x65    
   \   00000038   0x71 0x75          DC8 71H, 75H, 65H, 73H, 74H, 2EH, 0
   \              0x65 0x73    
   \              0x74 0x2E    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Server returned \\'unsu...">`:
   \   00000000   0x53 0x65          DC8 "Server returned 'unsupported cluster command'."
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x65    
   \              0x64 0x20    
   \              0x27 0x75    
   \              0x6E 0x73    
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x6C 0x75    
   \              0x73 0x74    
   \              0x65 0x72    
   \              0x20 0x63    
   \              0x6F 0x6D    
   \              0x6D 0x61    
   \              0x6E 0x64    
   \              0x27 0x2E    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Unknown %p status cod...">`:
   \   00000000   0x55 0x6E          DC8 "Unknown %p status code 0x%X"
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x25 0x70    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x63 0x6F    
   \              0x64 0x65    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x58 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p has data size (%d)...">`:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 68H, 61H, 73H, 20H, 64H
   \              0x20 0x68    
   \              0x61 0x73    
   \              0x20 0x64    
   \   00000008   0x61 0x74          DC8 61H, 74H, 61H, 20H, 73H, 69H, 7AH, 65H
   \              0x61 0x20    
   \              0x73 0x69    
   \              0x7A 0x65    
   \   00000010   0x20 0x28          DC8 20H, 28H, 25H, 64H, 29H, 20H, 73H, 6DH
   \              0x25 0x64    
   \              0x29 0x20    
   \              0x73 0x6D    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 6CH, 65H, 72H, 20H, 74H, 68H
   \              0x6C 0x65    
   \              0x72 0x20    
   \              0x74 0x68    
   \   00000020   0x61 0x6E          DC8 61H, 6EH, 20H, 61H, 63H, 74H, 75H, 61H
   \              0x20 0x61    
   \              0x63 0x74    
   \              0x75 0x61    
   \   00000028   0x6C 0x20          DC8 6CH, 20H, 70H, 61H, 63H, 6BH, 65H, 74H
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \   00000030   0x20 0x73          DC8 20H, 73H, 69H, 7AH, 65H, 20H, 28H, 25H
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x28 0x25    
   \   00000038   0x64 0x29          DC8 64H, 29H, 2EH, 0
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p error: Expected of...">`:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 65H, 72H, 72H, 6FH, 72H
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \   00000008   0x3A 0x20          DC8 3AH, 20H, 45H, 78H, 70H, 65H, 63H, 74H
   \              0x45 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \   00000010   0x65 0x64          DC8 65H, 64H, 20H, 6FH, 66H, 66H, 73H, 65H
   \              0x20 0x6F    
   \              0x66 0x66    
   \              0x73 0x65    
   \   00000018   0x74 0x20          DC8 74H, 20H, 30H, 78H, 25H, 34H, 58H, 2CH
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x2C    
   \   00000020   0x20 0x62          DC8 20H, 62H, 75H, 74H, 20H, 67H, 6FH, 74H
   \              0x75 0x74    
   \              0x20 0x67    
   \              0x6F 0x74    
   \   00000028   0x20 0x30          DC8 20H, 30H, 78H, 25H, 34H, 58H, 2EH, 20H
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x2E 0x20    
   \   00000030   0x20 0x49          DC8 20H, 49H, 67H, 6EH, 6FH, 72H, 69H, 6EH
   \              0x67 0x6E    
   \              0x6F 0x72    
   \              0x69 0x6E    
   \   00000038   0x67 0x00          DC8 67H, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p info did not match...">`:
   \   00000000   0x25 0x70          DC8 25H, 70H, 20H, 69H, 6EH, 66H, 6FH, 20H
   \              0x20 0x69    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \   00000008   0x64 0x69          DC8 64H, 69H, 64H, 20H, 6EH, 6FH, 74H, 20H
   \              0x64 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \   00000010   0x6D 0x61          DC8 6DH, 61H, 74H, 63H, 68H, 20H, 6DH, 79H
   \              0x74 0x63    
   \              0x68 0x20    
   \              0x6D 0x79    
   \   00000018   0x20 0x65          DC8 20H, 65H, 78H, 70H, 65H, 63H, 74H, 65H
   \              0x78 0x70    
   \              0x65 0x63    
   \              0x74 0x65    
   \   00000020   0x64 0x20          DC8 64H, 20H, 69H, 6EH, 66H, 6FH, 2EH, 20H
   \              0x69 0x6E    
   \              0x66 0x6F    
   \              0x2E 0x20    
   \   00000028   0x20 0x44          DC8 20H, 44H, 72H, 6FH, 70H, 70H, 69H, 6EH
   \              0x72 0x6F    
   \              0x70 0x70    
   \              0x69 0x6E    
   \   00000030   0x67 0x2E          DC8 67H, 2EH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Failed to write to st...">`:
   \   00000000   0x46 0x61          DC8 "Failed to write to storage device!"
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x77 0x72    
   \              0x69 0x74    
   \              0x65 0x20    
   \              0x74 0x6F    
   \              0x20 0x73    
   \              0x74 0x6F    
   \              0x72 0x61    
   \              0x67 0x65    
   \              0x20 0x64    
   \              0x65 0x76    
   \              0x69 0x63    
   \              0x65 0x21    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Download">`:
   \   00000000   0x44 0x6F          DC8 "Download"
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Server aborted upgrad...">`:
   \   00000000   0x53 0x65          DC8 "Server aborted upgrade, status: 0x%X"
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x61    
   \              0x62 0x6F    
   \              0x72 0x74    
   \              0x65 0x64    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error: %p had invalid...">`:
   \   00000000   0x45 0x72          DC8 "Error: %p had invalid %p: "
   \              0x72 0x6F    
   \              0x72 0x3A    
   \              0x20 0x25    
   \              0x70 0x20    
   \              0x68 0x61    
   \              0x64 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x25 0x70    
   \              0x3A 0x20    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "manufacturer ID">`:
   \   00000000   0x6D 0x61          DC8 "manufacturer ID"
   \              0x6E 0x75    
   \              0x66 0x61    
   \              0x63 0x74    
   \              0x75 0x72    
   \              0x65 0x72    
   \              0x20 0x49    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0x%2X">`:
   \   00000000   0x30 0x78          DC8 "0x%2X"
   \              0x25 0x32    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "image type ID">`:
   \   00000000   0x69 0x6D          DC8 "image type ID"
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x49    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "file version">`:
   \   00000000   0x66 0x69          DC8 "file version"
   \              0x6C 0x65    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0x%4X">`:
   \   00000000   0x30 0x78          DC8 "0x%4X"
   \              0x25 0x34    
   \              0x58 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Adding %d ms. delay f...">`:
   \   00000000   0x41 0x64          DC8 "Adding %d ms. delay for immediate upgrade."
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x6D 0x73    
   \              0x2E 0x20    
   \              0x64 0x65    
   \              0x6C 0x61    
   \              0x79 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x69 0x6D    
   \              0x6D 0x65    
   \              0x64 0x69    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x75 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x2E    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Countdown to upgrade:...">`:
   \   00000000   0x43 0x6F          DC8 "Countdown to upgrade: %d ms"
   \              0x75 0x6E    
   \              0x74 0x64    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x6D    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%p: invalid offset cu...">`:
   \   00000000   0x25 0x70          DC8 25H, 70H, 3AH, 20H, 69H, 6EH, 76H, 61H
   \              0x3A 0x20    
   \              0x69 0x6E    
   \              0x76 0x61    
   \   00000008   0x6C 0x69          DC8 6CH, 69H, 64H, 20H, 6FH, 66H, 66H, 73H
   \              0x64 0x20    
   \              0x6F 0x66    
   \              0x66 0x73    
   \   00000010   0x65 0x74          DC8 65H, 74H, 20H, 63H, 75H, 72H, 72H, 65H
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \   00000018   0x6E 0x74          DC8 6EH, 74H, 54H, 69H, 6DH, 65H, 28H, 30H
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x28 0x30    
   \   00000020   0x78 0x25          DC8 78H, 25H, 34H, 58H, 29H, 20H, 3EH, 20H
   \              0x34 0x58    
   \              0x29 0x20    
   \              0x3E 0x20    
   \   00000028   0x75 0x70          DC8 75H, 70H, 67H, 72H, 61H, 64H, 65H, 54H
   \              0x67 0x72    
   \              0x61 0x64    
   \              0x65 0x54    
   \   00000030   0x69 0x6D          DC8 69H, 6DH, 65H, 28H, 30H, 78H, 25H, 34H
   \              0x65 0x28    
   \              0x30 0x78    
   \              0x25 0x34    
   \   00000038   0x58 0x29          DC8 58H, 29H, 0
   \              0x00         
   \   0000003B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "OTA Cluster: wait for...">`:
   \   00000000   0x4F 0x54          DC8 "OTA Cluster: wait for %d s"
   \              0x41 0x20    
   \              0x43 0x6C    
   \              0x75 0x73    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x20 0x77    
   \              0x61 0x69    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x73    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "RXed timeOut 0x%4X s,...">`:
   \   00000000   0x52 0x58          DC8 "RXed timeOut 0x%4X s, MAX timeOut 0x%4X s"
   \              0x65 0x64    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x4F    
   \              0x75 0x74    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x34 0x58    
   \              0x20 0x73    
   \              0x2C 0x20    
   \              0x4D 0x41    
   \              0x58 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x30 0x78    
   \              0x25 0x34    
   \              0x58 0x20    
   \              0x73 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Applying upgrade">`:
   \   00000000   0x41 0x70          DC8 "Applying upgrade"
   \              0x70 0x6C    
   \              0x79 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \              0x70 0x67    
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Image block request t...">`:
   \   00000000   0x49 0x6D          DC8 49H, 6DH, 61H, 67H, 65H, 20H, 62H, 6CH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x62 0x6C    
   \   00000008   0x6F 0x63          DC8 6FH, 63H, 6BH, 20H, 72H, 65H, 71H, 75H
   \              0x6B 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \   00000010   0x65 0x73          DC8 65H, 73H, 74H, 20H, 74H, 65H, 73H, 74H
   \              0x74 0x20    
   \              0x74 0x65    
   \              0x73 0x74    
   \   00000018   0x20 0x6F          DC8 20H, 6FH, 6EH, 6CH, 79H, 20H, 77H, 6FH
   \              0x6E 0x6C    
   \              0x79 0x20    
   \              0x77 0x6F    
   \   00000020   0x72 0x6B          DC8 72H, 6BH, 73H, 20H, 77H, 68H, 65H, 6EH
   \              0x73 0x20    
   \              0x77 0x68    
   \              0x65 0x6E    
   \   00000028   0x20 0x73          DC8 20H, 73H, 74H, 61H, 74H, 65H, 20H, 69H
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x69    
   \   00000030   0x73 0x20          DC8 73H, 20H, 42H, 4FH, 4FH, 54H, 4CH, 4FH
   \              0x42 0x4F    
   \              0x4F 0x54    
   \              0x4C 0x4F    
   \   00000038   0x41 0x44          DC8 41H, 44H, 5FH, 53H, 54H, 41H, 54H, 45H
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \   00000040   0x5F 0x4E          DC8 5FH, 4EH, 4FH, 4EH, 45H, 0
   \              0x4F 0x4E    
   \              0x45 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "yes">`:
   \   00000000   0x79 0x65          DC8 "yes"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "no">`:
   \   00000000   0x6E 0x6F          DC8 "no"
   \              0x00         
   \   00000003   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  askServerToRunUpgrade
              8 -> emberAfPrintln
              8 -> recordUpgradeStatus
              0 -> runUpgrade
              0 -> sendMessage
       16  calculateTimer
             16 -> emberAfPrintln
       16  commandParse
             16 -> emberAfPrintln
              0 -> imageBlockResponseParse
              0 -> imageNotifyParse
              0 -> queryNextImageResponseParse
              0 -> upgradeEndResponseParse
       24  continueImageDownload
             24 -> downloadAndVerifyFinish
             24 -> emAfGetCurrentPageRequestStatus
             24 -> emAfInitPageRequestClient
             24 -> emAfNextMissedBlockRequestOffset
             24 -> emberAfPrintln
             24 -> getCurrentOffset
             24 -> recordUpgradeStatus
             24 -> sendMessage
             24 -> setTimer
             24 -> updateCurrentOffset
       40  continueImageVerification
             40 -> downloadAndVerifyFinish
             40 -> emAfOtaImageSignatureVerify
             40 -> emberAfOtaClientCustomVerifyCallback
             40 -> emberAfOtaStorageCheckTempDataCallback
             40 -> emberAfPrintln
             40 -> recordUpgradeStatus
             40 -> setTimer
       32  determineDownloadFileStatus
             32 -> emAfPrintPercentageSetStartAndEnd
             32 -> emberAfOtaClientVersionInfoCallback
             32 -> emberAfOtaStorageCheckTempDataCallback
             32 -> emberAfPrintln
             32 -> updateCurrentOffset
       16  downloadAndVerifyFinish
             16 -> askServerToRunUpgrade
             16 -> emberAfOtaClientDownloadCompleteCallback
             16 -> emberAfPrintln
             16 -> queryNextImage
             16 -> sendMessage
        8  emAfOtaClientPrintState
              8 -> emAfCalculatePercentage
              0 -> emberAfPrintln
              8 -> emberAfPrintln
              8 -> getCurrentOffset
       16  emAfOtaClientServiceDiscoveryCallback
             16 -> emberAfFindIeeeAddress
             16 -> emberAfPrintln
             16 -> emberLookupEui64ByNodeId
             16 -> halCommonMemCopy
             16 -> recordServerEuiAndGoToNextState
             16 -> recordUpgradeStatus
             16 -> restartServerDiscoveryAfterDelay
        8  emAfOtaClientStop
              8 -> downloadAndVerifyFinish
              0 -> emberAfDeactivateClientTick
              8 -> recordUpgradeStatus
        0  emAfOtaVerifyStoredDataFinish
              0 -> continueImageVerification
        8  emAfSendImageBlockRequestTest
              0 -> emberAfPrintln
              0 -> sendMessage
              8 -> updateCurrentOffset
        0  emAfSetPageRequest
        0  emAfUsingPageRequest
        8  emberAfOtaBootloadClusterClientDefaultResponseCallback
              0 -> commandParse
              8 -> emberAfPrintln
       32  emberAfOtaBootloadClusterClientInitCallback
             32 -> emberAfOtaClientVersionInfoCallback
             32 -> emberAfOtaStorageInitCallback
        0  emberAfOtaBootloadClusterClientTickCallback
              0 -> otaClientTick
       16  emberAfOtaClientIncomingMessageRawCallback
             16 -> commandParse
             16 -> emberAfPrintln
             16 -> emberAfSendDefaultResponse
        0  emberAfOtaClientStartCallback
              0 -> startServerDiscovery
        0  emberAfPluginOtaClientStackStatusCallback
        0  emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
              0 -> downloadAndVerifyFinish
              0 -> otaClientTick
       24  getCurrentOffset
             24 -> emberAfReadAttribute
       64  imageBlockResponseParse
             64 -> calculateTimer
             64 -> continueImageDownload
             64 -> continueImageVerification
             64 -> downloadAndVerifyFinish
             64 -> emAfAbortPageRequest
             64 -> emAfGetCurrentPageRequestStatus
             64 -> emAfGetFinishedPageRequestOffset
             64 -> emAfGetPageRequestMissedPacketDelayMs
             64 -> emAfHandlingPageRequestClient
             64 -> emAfNoteReceivedBlockForPageRequestClient
             64 -> emAfOtaParseImageIdFromMessage
             64 -> emAfPrintPercentageUpdate
             64 -> emberAfGetInt16u
             64 -> emberAfGetInt32u
             64 -> emberAfOtaStorageFinishDownloadCallback
             64 -> emberAfOtaStorageWriteTempDataCallback
             64 -> emberAfPrintln
             64 -> getCurrentOffset
             64 -> halCommonMemCompare
             64 -> setTimer
             64 -> updateCurrentOffset
       64  imageNotifyParse
             64 -> emberAfGetInt16u
             64 -> emberAfGetInt32u
             64 -> emberAfOtaClientVersionInfoCallback
             64 -> emberAfPrintln
             64 -> halCommonGetRandom
             64 -> queryNextImage
       16  otaClientTick
              0 -> askServerToRunUpgrade
              0 -> continueImageDownload
              0 -> continueImageVerification
             16 -> emAfPageRequestTimerExpired
              0 -> emberAfOtaClientStartCallback
             16 -> emberAfPrintln
              0 -> queryNextImage
              0 -> restartServerDiscoveryAfterDelay
              0 -> runUpgrade
              0 -> setTimer
              0 -> startServerDiscovery
        8  putImageInfoInMessage
              8 -> emberAfPutInt16uInResp
              0 -> emberAfPutInt32uInResp
       16  queryNextImage
             16 -> emberAfOtaClientVersionInfoCallback
             16 -> emberAfPrintln
             16 -> recordUpgradeStatus
              0 -> restartServerDiscoveryAfterDelay
              0 -> sendMessage
              0 -> setTimer
       48  queryNextImageResponseParse
             48 -> emAfOtaParseImageIdFromMessage
             48 -> emberAfGetInt32u
             48 -> emberAfOtaStorageDriverMaxDownloadSizeCallback
             48 -> emberAfPrintln
             48 -> queryNextImage
             48 -> startDownload
       24  recordServerEuiAndGoToNextState
              0 -> askServerToRunUpgrade
             24 -> continueImageDownload
              0 -> continueImageVerification
             24 -> determineDownloadFileStatus
              0 -> downloadAndVerifyFinish
             24 -> emberAfOtaStorageDriverPrepareToResumeDownloadCallback
             24 -> emberAfPrintln
             24 -> emberAfWriteAttribute
              0 -> queryNextImage
             24 -> recordUpgradeStatus
       24  recordUpgradeStatus
             24 -> emberAfPrintln
             24 -> emberAfWriteAttribute
        8  restartServerDiscoveryAfterDelay
              0 -> recordUpgradeStatus
              8 -> setTimer
        8  runUpgrade
              8 -> emberAfOtaClientBootloadCallback
              8 -> emberAfPrintln
              0 -> queryNextImage
       40  sendMessage
             40 -> emberAfGetEui64
             40 -> emberAfIndexFromEndpoint
             40 -> emberAfNextSequence
             40 -> emberAfPrintln
             40 -> emberAfPutBlockInResp
             40 -> emberAfPutInt16uInResp
             40 -> emberAfPutInt32uInResp
             40 -> emberAfPutInt8uInResp
             40 -> emberAfSendCommandUnicast
             40 -> getCurrentOffset
             40 -> putImageInfoInMessage
             40 -> setTimer
       24  setTimer
             24 -> emAfGetCurrentPageRequestStatus
             24 -> emberAfScheduleClientTickExtended
       32  startDownload
             32 -> continueImageDownload
             32 -> downloadAndVerifyFinish
             32 -> emAfPrintPercentageSetStartAndEnd
             32 -> emberAfDeactivateClientTick
             32 -> emberAfIsOtaImageIdValid
             32 -> emberAfOtaStorageClearTempDataCallback
             32 -> emberAfOtaStorageDeleteImageCallback
             32 -> emberAfOtaStorageSearchCallback
             32 -> emberAfPrintln
             32 -> recordUpgradeStatus
             32 -> updateCurrentOffset
       16  startServerDiscovery
             16 -> emberAfFindDevicesByProfileAndCluster
             16 -> emberAfIndexFromEndpoint
             16 -> emberAfPrintln
             16 -> recordUpgradeStatus
              0 -> setTimer
       16  updateCurrentOffset
             16 -> emberAfWriteAttribute
       40  upgradeEndResponseParse
             40 -> calculateTimer
             40 -> downloadAndVerifyFinish
             40 -> emAfOtaParseImageIdFromMessage
             40 -> emberAfGetInt32u
             40 -> emberAfPrint
             40 -> emberAfPrintln
             40 -> recordUpgradeStatus
             40 -> setTimer


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant " Current Download Off...">
      28  ?<Constant " Next Event Timer: %d ms">
      16  ?<Constant " State:   %p">
      28  ?<Constant " Waiting for response...">
      40  ?<Constant "%p %p due to matching...">
      44  ?<Constant "%p %p due to non-matc...">
      40  ?<Constant "%p %p due to non-matc...">_1
      24  ?<Constant "%p %p payload type 0x%X">
      48  ?<Constant "%p %p, Rx\'d Jitter (0...">
      32  ?<Constant "%p %p: out of range j...">
      56  ?<Constant "%p %p: payload length...">
      60  ?<Constant "%p error: Expected of...">
      60  ?<Constant "%p has data size (%d)...">
      52  ?<Constant "%p info did not match...">
      32  ?<Constant "%p is not using my im...">
      48  ?<Constant "%p returned 0x%X.  No...">
      24  ?<Constant "%p too short (%d < %d)">
      24  ?<Constant "%p unicast, querying">
      28  ?<Constant "%p verification %p: 0x%X">
      44  ?<Constant "%p: New image is avai...">
      32  ?<Constant "%p: failed parsing OT...">
      24  ?<Constant "%p: invalid cmdId 0x%x">
      60  ?<Constant "%p: invalid offset cu...">
       8  ?<Constant "0x%2X">
       8  ?<Constant "0x%4X">
      44  ?<Constant "Adding %d ms. delay f...">
      20  ?<Constant "Applying upgrade">
      24  ?<Constant "Bad OTA command: 0x%X">
      20  ?<Constant "Bootload state: %p">
      28  ?<Constant "Client verification f...">
      24  ?<Constant "Countdown to Upgrade">
      28  ?<Constant "Countdown to upgrade:...">
       8  ?<Constant "Custom">
      24  ?<Constant "Discovering OTA Server">
      28  ?<Constant "Download aborted by s...">
      32  ?<Constant "Download delay by ser...">
      12  ?<Constant "Download">
      20  ?<Constant "Downloading Image">
      56  ?<Constant "ERROR: Next Image is ...">
       8  ?<Constant "Error">
      56  ?<Constant "Error:  Failed to sen...">
      28  ?<Constant "Error: %p had invalid...">
      40  ?<Constant "Error: Failed to eras...">
       8  ?<Constant "FAILED">
      40  ?<Constant "Failed to initiate se...">
      36  ?<Constant "Failed to write to st...">
      60  ?<Constant "File in storage is sa...">
      84  ?<Constant "Found file in storage...">
      56  ?<Constant "Found fully downloade...">
      20  ?<Constant "Get OTA Server EUI">
      32  ?<Constant "Got unexpected %p.  I...">
      12  ?<Constant "Ignoring">
      72  ?<Constant "Image block request t...">
      24  ?<Constant "Image block response">
      24  ?<Constant "Image notify command">
      16  ?<Constant "Image notify">
       8  ?<Constant "Invalid">
      56  ?<Constant "Maximum number of dow...">
      68  ?<Constant "Maximum query errors ...">
      68  ?<Constant "Maximum upgrade reque...">
      28  ?<Constant "No image found in sto...">
      60  ?<Constant "No signature verifica...">
       8  ?<Constant "None">
      52  ?<Constant "OTA Cluster: setting ...">
      28  ?<Constant "OTA Cluster: wait for...">
      56  ?<Constant "OTA Default response ...">
      48  ?<Constant "OTA command 0x%X too ...">
      68  ?<Constant "OTA command from unre...">
      16  ?<Constant "Obtain link key">
      60  ?<Constant "Partial file download...">
      28  ?<Constant "Query next image resp...">
      20  ?<Constant "Querying Next Image">
      44  ?<Constant "RXed timeOut 0x%4X s,...">
      28  ?<Constant "Random Delay before s...">
      32  ?<Constant "Sending Upgrade End r...">
      40  ?<Constant "Server aborted upgrad...">
      64  ?<Constant "Server doesn\'t suppor...">
      48  ?<Constant "Server returned \'unsu...">
      44  ?<Constant "Server unknown, falli...">
      28  ?<Constant "Setting OTA Server to...">
      12  ?<Constant "Signature">
      36  ?<Constant "Starting download, Ve...">
      32  ?<Constant "Timeout waiting for m...">
      28  ?<Constant "Unknown %p status cod...">
      48  ?<Constant "Updating Min Block Re...">
      24  ?<Constant "Upgrade end response">
      20  ?<Constant "Upgrading anyway">
      16  ?<Constant "Verifying Image">
      28  ?<Constant "Waiting for Upgrade m...">
      16  ?<Constant "file version">
      16  ?<Constant "image type ID">
      16  ?<Constant "manufacturer ID">
       4  ?<Constant "no">
       8  ?<Constant "passed">
       4  ?<Constant "yes">
       4  ??DataTable111
       4  ??DataTable111_1
       4  ??DataTable122
       4  ??DataTable123
       4  ??DataTable123_1
       4  ??DataTable124
       4  ??DataTable126
       4  ??DataTable129
       4  ??DataTable129_1
       4  ??DataTable129_2
       4  ??DataTable129_3
       4  ??DataTable129_4
       4  ??DataTable129_5
       4  ??DataTable129_6
       4  ??DataTable129_7
       4  ??DataTable129_8
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
       6  ?Subroutine3
       6  ?Subroutine4
      16  ?Subroutine5
       8  ?Subroutine6
      12  ?Subroutine7
      58  askServerToRunUpgrade
      12  bootloadStateToExternalState
      74  calculateTimer
     226  commandParse
     106  continueImageDownload
     190  continueImageVerification
      80  currentBootloadState
          myEndpoint
          serverEndpoint
          errors
          waitingForResponse
          usePageRequest
          customVerifyStatus
          currentDownloadFile
          serverNodeId
          hardwareVersion
          minBlockRequestPeriod
          bootloadStateNames
          totalImageSize
          nextEventTimer
     120  determineDownloadFileStatus
      94  downloadAndVerifyFinish
      88  emAfOtaClientPrintState
     122  emAfOtaClientServiceDiscoveryCallback
      34  emAfOtaClientStop
       1  emAfOtaClientStopDownloadPercentage
      14  emAfOtaVerifyStoredDataFinish
      50  emAfSendImageBlockRequestTest
       6  emAfSetPageRequest
       6  emAfUsingPageRequest
      44  emberAfOtaBootloadClusterClientDefaultResponseCallback
      36  emberAfOtaBootloadClusterClientInitCallback
       2  emberAfOtaBootloadClusterClientTickCallback
      46  emberAfOtaClientIncomingMessageRawCallback
      18  emberAfOtaClientStartCallback
       2  emberAfPluginOtaClientStackStatusCallback
      26  emberAfPluginOtaStorageSimpleEepromEraseCompleteCallback
      34  getCurrentOffset
     510  imageBlockResponseParse
     256  imageNotifyParse
       4  imageNotifyPayloadLengths
     154  otaClientTick
      28  putImageInfoInMessage
     112  queryNextImage
     202  queryNextImageResponseParse
     134  recordServerEuiAndGoToNextState
      62  recordUpgradeStatus
      18  restartServerDiscoveryAfterDelay
      26  runUpgrade
     296  sendMessage
      80  setTimer
     134  startDownload
      84  startServerDiscovery
      22  updateCurrentOffset
     266  upgradeEndResponseParse
       8  zclStatusFromResult

 
    81 bytes in section .data
   212 bytes in section .rodata
 6 914 bytes in section .text
 
 6 914 bytes of CODE  memory
   212 bytes of CONST memory
    81 bytes of DATA  memory

Errors: none
Warnings: 1
