###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     19/Feb/2015  10:52:22 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client-policy\ota-client- #
#                    policy.c                                                 #
#    Command line =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client-policy\ota-client- #
#                    policy.c -D "GENERATED_TOKEN_HEADER=\"app/builder/Aurora #
#                    _dimmer/Aurora_dimmer_tokens.h\"" -D                     #
#                    "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_ #
#                    dimmer.h\"" -D APP_BTL -D "BOARD_HEADER=\"app/builder/Au #
#                    rora_dimmer/Aurora_dimmer_board_1.h\"" -D                #
#                    "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  #
#                    -D CORTEXM3 -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357    #
#                    -D PHY_EM3XX -D "APPLICATION_TOKEN_HEADER=\"app/framewor #
#                    k/util/tokens.h\"" -D "CONFIGURATION_HEADER=\"app/framew #
#                    ork/util/config.h\"" -D "ATTRIBUTE_STORAGE_CONFIGURATION #
#                    =\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_conf #
#                    ig.h\"" -D "__SOURCEFILE__=\"ota-client-policy.c\"" -lC  #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --diag_suppress Pa050 -o      #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ --debug --endian=little       #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\framework\plugin\ota-client-policy\ -I         #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\ -I                      #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\ -I             #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\i #
#                    nclude\ -I C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZN #
#                    et5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\ -I  #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\stack\ -I       #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\ -I         #
#                    C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\app\builder\Aurora_dimmer\..\..\..\hal\..\ -Ohz    #
#                    --use_c++_inline                                         #
#    List file    =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ota-client-policy.lst          #
#    Object file  =  C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\ #
#                    em35x\build\Aurora_dimmer\ota-client-policy.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\PROJECTS\Prj_Aurora\trunk\Firmware\EmberZNet5.3.0-GA\em35x\app\framework\plugin\ota-client-policy\ota-client-policy.c
      1          // *****************************************************************************
      2          // * ota-client-policy.c
      3          // *
      4          // * This file handle how the application can configure and interact with the OTA
      5          // * cluster.
      6          // * 
      7          // * Copyright 2009 by Ember Corporation. All rights reserved.              *80*
      8          // *****************************************************************************
      9          
     10          
     11          #include "app/framework/include/af.h"
     12          #include "callback.h"
     13          #include "app/framework/plugin/ota-common/ota.h"
     14          #include "app/framework/plugin/ota-storage-common/ota-storage.h"
     15          #include "app/framework/util/util.h"
     16          #include "app/framework/util/common.h"
     17          
     18          #include "ota-client-policy.h"
     19          
     20          #if defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLIENT)
     21          
     22          // Right now this sample policy only supports a single set of version 
     23          // information for the device, which will be supplied to the OTA cluster in 
     24          // order to query and download a new image when it is available.  This does not 
     25          // support multiple products with multiple download images.
     26          
     27          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_INCLUDE_HARDWARE_VERSION)
     28            #define HARDWARE_VERSION EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_HARDWARE_VERSION
     29          #else
     30            #define HARDWARE_VERSION EMBER_AF_INVALID_HARDWARE_VERSION
     31          #endif
     32          
     33          //------------------------------------------------------------------------------
     34          // Globals
     35          
     36          //------------------------------------------------------------------------------
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void emberAfOtaClientVersionInfoCallback(EmberAfOtaImageId* currentImageInfo,
     39                                                   int16u* hardwareVersion)
     40          {
   \                     emberAfOtaClientVersionInfoCallback:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
     41            // This callback is fired when a new query and download is initiated.
     42            // The application will fill in the currentImageInfo with their manufacturer 
     43            // ID, image type ID, and current software version number to use in that
     44            // query. The deviceSpecificFileEui64 can be ignored.
     45          
     46            // It may be necessary to dynamically determine this data by talking to
     47            // another device, as is the case with a host talking to an NCP device.
     48          
     49            // The OTA client plugin will cache the data returned by this callback
     50            // and use it for the subsequent transaction, which could be a query
     51            // or a query and download.  Therefore it is possible to instruct the 
     52            // OTA client cluster code to query about multiple images by returning
     53            // different values.
     54          
     55            MEMSET(currentImageInfo, 0, sizeof(EmberAfOtaImageId));
   \   00000006   0x2210             MOVS     R2,#+16
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       halCommonMemSet
     56            currentImageInfo->manufacturerId  = EMBER_AF_MANUFACTURER_CODE;
   \   0000000E   0xF241 0x0010      MOVW     R0,#+4112
   \   00000012   0x8020             STRH     R0,[R4, #+0]
     57            currentImageInfo->imageTypeId     = EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_IMAGE_TYPE_ID;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x8060             STRH     R0,[R4, #+2]
     58            currentImageInfo->firmwareVersion = EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_FIRMWARE_VERSION;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x6060             STR      R0,[R4, #+4]
     59          
     60            if (hardwareVersion != NULL) {
   \   0000001C   0xB115             CBZ.N    R5,??emberAfOtaClientVersionInfoCallback_0
     61              *hardwareVersion = HARDWARE_VERSION;
   \   0000001E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000022   0x8028             STRH     R0,[R5, #+0]
     62            }
     63          }
   \                     ??emberAfOtaClientVersionInfoCallback_0:
   \   00000024   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     64          

   \                                 In section .text, align 2, keep-with-next
     65          EmberAfImageVerifyStatus emberAfOtaClientCustomVerifyCallback(boolean newVerification,
     66                                                                        const EmberAfOtaImageId* id)
     67          {
   \                     emberAfOtaClientCustomVerifyCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
     68            // Manufacturing specific checks can be made to the image in this function to
     69            // determine if it is valid.  This function is called AFTER cryptographic 
     70            // checks have passed.  If the cryptographic checks failed, this function will
     71            // never be called.
     72          
     73            // The function shall return one of the following based on its own 
     74            // verification process.
     75            // 1) EMBER_AF_IMAGE_GOOD - the image has passed all checks
     76            // 2) EMBER_AF_IMAGE_BAD  - the image is not valid 
     77            // 3) EMBER_AF_IMAGE_VERIFY_IN_PROGRESS - the image is valid so far, but more
     78            //      checks are needed.  This callback shall be re-executed later to 
     79            //      continue verification.  This allows other code in the framework to run.
     80          
     81            // Note that EBL verification is an SoC-only feature.
     82          
     83          #if !defined(EZSP_HOST) && defined(EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_EBL_VERIFICATION)
     84            int16u pages;
     85          
     86            // For sleepies, we must re-initalize the EEPROM / bootloader
     87            // after each nap/hibernate.  This call will only re-initalize the EEPROM
     88            // if that is the case.
     89            emberAfEepromInitCallback();
   \   00000004   0x.... 0x....      BL       emberAfEepromInitCallback
     90          
     91            if (newVerification) {
   \   00000008   0xB12C             CBZ.N    R4,??emberAfOtaClientCustomVerifyCallback_0
     92              otaPrintln("Starting EBL verification");
   \   0000000A   0x.... 0x....      ADR.W    R1,`?<Constant "Starting EBL verifica...">`
   \   0000000E   0x.... 0x....      BL       ?Subroutine0
     93              halAppBootloaderImageIsValidReset();
   \                     ??CrossCallReturnLabel_4:
   \   00000012   0x.... 0x....      BL       halAppBootloaderImageIsValidReset
     94            }
     95            pages = halAppBootloaderImageIsValid();
   \                     ??emberAfOtaClientCustomVerifyCallback_0:
   \   00000016   0x.... 0x....      BL       halAppBootloaderImageIsValid
     96            if (pages == BL_IMAGE_IS_VALID_CONTINUE) {
   \   0000001A   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000001E   0x4288             CMP      R0,R1
   \   00000020   0xD101             BNE.N    ??emberAfOtaClientCustomVerifyCallback_1
     97              return EMBER_AF_IMAGE_VERIFY_IN_PROGRESS;
   \   00000022   0x2002             MOVS     R0,#+2
   \   00000024   0xBD10             POP      {R4,PC}
     98            } else if (pages == 0) {
   \                     ??emberAfOtaClientCustomVerifyCallback_1:
   \   00000026   0xB928             CBNZ.N   R0,??emberAfOtaClientCustomVerifyCallback_2
     99              otaPrintln("EBL failed verification.");
   \   00000028   0x.... 0x....      ADR.W    R1,`?<Constant "EBL failed verification.">`
   \   0000002C   0x.... 0x....      BL       ?Subroutine0
    100              return EMBER_AF_IMAGE_BAD;
   \                     ??CrossCallReturnLabel_3:
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xBD10             POP      {R4,PC}
    101            }
    102            otaPrintln("EBL passed verification.");
   \                     ??emberAfOtaClientCustomVerifyCallback_2:
   \   00000034   0x.... 0x....      ADR.W    R1,`?<Constant "EBL passed verification.">`
   \   00000038   0x.... 0x....      BL       ?Subroutine0
    103          #endif
    104          
    105            return EMBER_AF_IMAGE_GOOD;
   \                     ??CrossCallReturnLabel_2:
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
    106          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2040             MOVS     R0,#+64
   \   00000002   0x.... 0x....      B.W      emberAfPrintln
    107          

   \                                 In section .text, align 2, keep-with-next
    108          boolean emberAfOtaClientDownloadCompleteCallback(EmberAfOtaDownloadResult result,
    109                                                           const EmberAfOtaImageId* id)
    110          {
   \                     emberAfOtaClientDownloadCompleteCallback:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    111            // At this point the image has been completely downloaded and cryptographic 
    112            // checks (if applicable) have been performed.
    113            // Manufacturer verification callback has also been called and passed.
    114          
    115            if (result != EMBER_AF_OTA_DOWNLOAD_AND_VERIFY_SUCCESS) {
   \   00000004   0xD00D             BEQ.N    ??emberAfOtaClientDownloadCompleteCallback_0
    116              emberAfOtaBootloadClusterPrintln("Download failed.");
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "Download failed.">`
   \   0000000A   0x.... 0x....      BL       ?Subroutine0
    117          
    118          #if defined(EMBER_AF_PLUGIN_OTA_CLIENT_POLICY_DELETE_FAILED_DOWNLOADS)
    119              if (result != EMBER_AF_OTA_ERASE_FAILED) {
   \                     ??CrossCallReturnLabel_1:
   \   0000000E   0x2C05             CMP      R4,#+5
   \   00000010   0xD007             BEQ.N    ??emberAfOtaClientDownloadCompleteCallback_0
    120                EmberAfOtaStorageStatus status = emberAfOtaStorageClearTempDataCallback();
   \   00000012   0x.... 0x....      BL       emberAfOtaStorageClearTempDataCallback
    121                emberAfOtaBootloadClusterPrintln("Deleting failed download, status: 0x%X",
    122                                                 status);
   \   00000016   0x4602             MOV      R2,R0
   \   00000018   0x.... 0x....      ADR.W    R1,`?<Constant "Deleting failed downl...">`
   \   0000001C   0x2040             MOVS     R0,#+64
   \   0000001E   0x.... 0x....      BL       emberAfPrintln
    123              }
    124          #endif
    125          
    126              return TRUE;   // return value is ignored
    127            }
    128          
    129            // If the client wants to abort for some reason then it can do so here
    130            // and return FALSE.  Otherwise it should give the "go ahead" by returning
    131            // TRUE.
    132            
    133            return TRUE;
   \                     ??emberAfOtaClientDownloadCompleteCallback_0:
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
    134          }
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void emberAfOtaClientBootloadCallback(const EmberAfOtaImageId* id)
    137          {
   \                     emberAfOtaClientBootloadCallback:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    138            // OTA Server has told us to bootload.
    139            // Any final preperation prior to the bootload should be done here.
    140            // It is assumed that the device will reset in most all cases.
    141          
    142            int32u offset;
    143            int32u endOffset;
    144          
    145            if (EMBER_AF_OTA_STORAGE_SUCCESS
    146                != emAfOtaStorageGetTagOffsetAndSize(id,
    147                                                     OTA_TAG_UPGRADE_IMAGE,
    148                                                     &offset,
    149                                                     &endOffset)) {
   \   00000004   0xAB00             ADD      R3,SP,#+0
   \   00000006   0xAA01             ADD      R2,SP,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       emAfOtaStorageGetTagOffsetAndSize
   \   0000000E   0xB130             CBZ.N    R0,??emberAfOtaClientBootloadCallback_0
    150              emberAfCoreFlush();
    151            otaPrintln("Image does not contain an Upgrade Image Tag (0x%2X).  Skipping upgrade.", 
    152                       OTA_TAG_UPGRADE_IMAGE);
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "Image does not contai...">`
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       emberAfPrintln
    153            return;
   \   0000001C   0xBD13             POP      {R0,R1,R4,PC}
    154          }
    155          
    156          otaPrintln("Executing bootload callback.");
   \                     ??emberAfOtaClientBootloadCallback_0:
   \   0000001E   0x.... 0x....      ADR.W    R1,`?<Constant "Executing bootload ca...">`
   \   00000022   0x.... 0x....      BL       ?Subroutine0
    157          emberSerialWaitSend(APP_SERIAL);
   \                     ??CrossCallReturnLabel_0:
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       emberSerialWaitSend
    158          
    159            // This routine will NOT return unless we failed to launch the bootloader.
    160          emberAfOtaBootloadCallback(id, OTA_TAG_UPGRADE_IMAGE);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       emberAfOtaBootloadCallback
    161          }
   \   00000034   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Starting EBL verifica...">`:
   \   00000000   0x53 0x74          DC8 "Starting EBL verification"
   \              0x61 0x72    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x45    
   \              0x42 0x4C    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EBL failed verification.">`:
   \   00000000   0x45 0x42          DC8 "EBL failed verification."
   \              0x4C 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EBL passed verification.">`:
   \   00000000   0x45 0x42          DC8 "EBL passed verification."
   \              0x4C 0x20    
   \              0x70 0x61    
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x2E    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Download failed.">`:
   \   00000000   0x44 0x6F          DC8 "Download failed."
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x2E    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Deleting failed downl...">`:
   \   00000000   0x44 0x65          DC8 "Deleting failed download, status: 0x%X"
   \              0x6C 0x65    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x64 0x6F    
   \              0x77 0x6E    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x2C 0x20    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3A 0x20    
   \              0x30 0x78    
   \              0x25 0x58    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Image does not contai...">`:
   \   00000000   0x49 0x6D          DC8 49H, 6DH, 61H, 67H, 65H, 20H, 64H, 6FH
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x64 0x6F    
   \   00000008   0x65 0x73          DC8 65H, 73H, 20H, 6EH, 6FH, 74H, 20H, 63H
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x63    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 74H, 61H, 69H, 6EH, 20H, 61H
   \              0x74 0x61    
   \              0x69 0x6E    
   \              0x20 0x61    
   \   00000018   0x6E 0x20          DC8 6EH, 20H, 55H, 70H, 67H, 72H, 61H, 64H
   \              0x55 0x70    
   \              0x67 0x72    
   \              0x61 0x64    
   \   00000020   0x65 0x20          DC8 65H, 20H, 49H, 6DH, 61H, 67H, 65H, 20H
   \              0x49 0x6D    
   \              0x61 0x67    
   \              0x65 0x20    
   \   00000028   0x54 0x61          DC8 54H, 61H, 67H, 20H, 28H, 30H, 78H, 25H
   \              0x67 0x20    
   \              0x28 0x30    
   \              0x78 0x25    
   \   00000030   0x32 0x58          DC8 32H, 58H, 29H, 2EH, 20H, 20H, 53H, 6BH
   \              0x29 0x2E    
   \              0x20 0x20    
   \              0x53 0x6B    
   \   00000038   0x69 0x70          DC8 69H, 70H, 70H, 69H, 6EH, 67H, 20H, 75H
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x75    
   \   00000040   0x70 0x67          DC8 70H, 67H, 72H, 61H, 64H, 65H, 2EH, 0
   \              0x72 0x61    
   \              0x64 0x65    
   \              0x2E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Executing bootload ca...">`:
   \   00000000   0x45 0x78          DC8 "Executing bootload callback."
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x20 0x63    
   \              0x61 0x6C    
   \              0x6C 0x62    
   \              0x61 0x63    
   \              0x6B 0x2E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    162          
    163          #endif // defined(ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLIENT)

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  emberAfOtaClientBootloadCallback
             16 -> emAfOtaStorageGetTagOffsetAndSize
             16 -> emberAfOtaBootloadCallback
             16 -> emberAfPrintln
             16 -> emberSerialWaitSend
        8  emberAfOtaClientCustomVerifyCallback
              8 -> emberAfEepromInitCallback
              8 -> emberAfPrintln
              8 -> halAppBootloaderImageIsValid
              8 -> halAppBootloaderImageIsValidReset
        8  emberAfOtaClientDownloadCompleteCallback
              8 -> emberAfOtaStorageClearTempDataCallback
              8 -> emberAfPrintln
       16  emberAfOtaClientVersionInfoCallback
             16 -> halCommonMemSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "Deleting failed downl...">
      20  ?<Constant "Download failed.">
      28  ?<Constant "EBL failed verification.">
      28  ?<Constant "EBL passed verification.">
      32  ?<Constant "Executing bootload ca...">
      72  ?<Constant "Image does not contai...">
      28  ?<Constant "Starting EBL verifica...">
       6  ?Subroutine0
      54  emberAfOtaClientBootloadCallback
      64  emberAfOtaClientCustomVerifyCallback
      38  emberAfOtaClientDownloadCompleteCallback
      38  emberAfOtaClientVersionInfoCallback

 
 448 bytes in section .text
 
 448 bytes of CODE memory

Errors: none
Warnings: none
