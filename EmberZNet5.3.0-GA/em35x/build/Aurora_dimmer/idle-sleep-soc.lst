###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:17
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\idle-sleep\idle-sleep-soc.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\idle-sleep\idle-sleep-soc.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"idle-sleep-soc.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\idle-sleep\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\idle-sleep-soc.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\idle-sleep-soc.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\idle-sleep\idle-sleep-soc.c
      1          // Copyright 2013 Silicon Laboratories, Inc.
      2          
      3          #include "app/framework/include/af.h"
      4          #include "app/framework/util/af-event.h"
      5          #include "idle-sleep.h"
      6          
      7          #if defined(EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK) && defined(EMBER_NO_IDLE_SUPPORT)
      8            #warning Idling and sleeping is not available on SoCs with RX-on-when-idle networks that do not support idling.
      9          #else
     10            #define IDLE_AND_SLEEP_SUPPORTED
     11          #endif
     12          
     13          #ifdef IDLE_AND_SLEEP_SUPPORTED
     14          
     15          enum {
     16            AWAKE,
     17            IDLE,
     18            SLEEP,
     19          };
     20          
     21          #ifndef EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK
     22          static int32u fullSleep(int32u sleepDurationMS, int8u eventIndex)
     23          {
     24            int32u sleepDurationAttemptedMS = sleepDurationMS;
     25          
     26            emAfPrintSleepDuration(sleepDurationMS, eventIndex);
     27          
     28            emberAfEepromShutdownCallback();
     29          
     30            // turn off the radio
     31            emberStackPowerDown();
     32          
     33            ATOMIC(
     34              // turn off board and peripherals
     35              halPowerDown();
     36              // turn micro to power save mode - wakes on external interrupt
     37              // or when the time specified expires
     38              halSleepForMilliseconds(&sleepDurationMS);
     39              // power up board and peripherals
     40              halPowerUp();
     41            );
     42            // power up radio
     43            emberStackPowerUp();
     44          
     45            emberAfEepromNoteInitializedStateCallback(FALSE);
     46          
     47            // Allow the stack to time out any of its events and check on its
     48            // own network state.
     49            emberTick();
     50          
     51            // Inform the application how long we have slept, sleepDuration has
     52            // been decremented by the call to halSleepForMilliseconds() by the amount
     53            // of time that we slept.  To get the actual sleep time we must determine
     54            // the delta between the amount we asked for and the amount of sleep time
     55            // LEFT in our request value.
     56            emberAfDebugPrintln("wakeup %l ms",
     57                                (sleepDurationAttemptedMS - sleepDurationMS));
     58          
     59            emAfPrintForceAwakeStatus();
     60          
     61            return (sleepDurationAttemptedMS - sleepDurationMS);
     62          }
     63          #endif
     64          

   \                                 In section .text, align 4, keep-with-next
     65          int32u emberAfCheckForSleepCallback(void)
     66          {
   \                     emberAfCheckForSleepCallback: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
     67            if (emberOkToNap() && emAfOkToIdleOrSleep()) {
   \   00000002   0x.... 0x....      BL       emberCurrentStackTasks
   \   00000006   0x2107             MOVS     R1,#+7
   \   00000008   0x4208             TST      R0,R1
   \   0000000A   0xD119             BNE.N    ??emberAfCheckForSleepCallback_0
   \   0000000C   0x.... 0x....      BL       emAfOkToIdleOrSleep
   \   00000010   0xB1B0             CBZ.N    R0,??emberAfCheckForSleepCallback_0
     68          #ifndef EMBER_AF_HAS_RX_ON_WHEN_IDLE_NETWORK
     69              // If the stack says not to hibernate, it is because it has events that
     70              // need to be serviced and therefore we need to consider those events in
     71              // our sleep calculation.
     72              int8u nextEventIndex;
     73              int32u durationMs = emberAfMsToNextEventExtended((emberOkToHibernate()
     74                                                                ? MAX_INT32U_VALUE
     75                                                                : emberMsToNextStackEvent()),
     76                                                               &nextEventIndex);
     77              if (durationMs != 0
     78                  && emberAfPluginIdleSleepOkToSleepCallback(durationMs)
     79                  && !emberAfPreGoToSleepCallback(durationMs)) { // deprecated
     80                durationMs = fullSleep(durationMs, nextEventIndex);
     81                emberAfPluginIdleSleepWakeUpCallback(durationMs);
     82                emberAfPostWakeUpCallback(durationMs); // deprecated
     83                return durationMs;
     84              }
     85          #endif
     86          #ifndef EMBER_NO_IDLE_SUPPORT
     87              ATOMIC(
     88                if (emberSerialReadAvailable(APP_SERIAL) == 0
     89                    && emberAfPluginIdleSleepOkToIdleCallback()) {
     90                  if (emberMarkTaskIdle(emAfTaskId)) {
     91                    emberAfPluginIdleSleepActiveCallback();
     92                  }
     93                }
     94              )
   \   00000012   0x.... 0x....      BL       _disableBasePri
   \   00000016   0x4604             MOV      R4,R0
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       emberSerialReadAvailable
   \   0000001E   0x4D09             LDR.N    R5,??emberAfCheckForSleepCallback_1
   \   00000020   0xB940             CBNZ.N   R0,??emberAfCheckForSleepCallback_2
   \   00000022   0x.... 0x....      BL       emberAfPluginIdleSleepOkToIdleCallback
   \   00000026   0xB128             CBZ.N    R0,??emberAfCheckForSleepCallback_2
   \   00000028   0x7828             LDRB     R0,[R5, #+0]
   \   0000002A   0x.... 0x....      BL       emberMarkTaskIdle
   \   0000002E   0xB108             CBZ.N    R0,??emberAfCheckForSleepCallback_2
   \   00000030   0x.... 0x....      BL       emberAfPluginIdleSleepActiveCallback
   \                     ??emberAfCheckForSleepCallback_2: (+1)
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       _writeBasePri
     95              emberMarkTaskActive(emAfTaskId);
   \   0000003A   0x7828             LDRB     R0,[R5, #+0]
   \   0000003C   0x.... 0x....      BL       emMarkTaskActive
     96          #endif
     97            }
     98            return 0;
   \                     ??emberAfCheckForSleepCallback_0: (+1)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   \                     ??emberAfCheckForSleepCallback_1:
   \   00000044   0x........         DC32     emAfTaskId
     99          }
    100          
    101          #else // !IDLE_AND_SLEEP_SUPPORTED
    102          
    103          int32u emberAfCheckForSleepCallback(void)
    104          {
    105            return 0;
    106          }
    107          
    108          #endif // IDLE_AND_SLEEP_SUPPORTED

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   emberAfCheckForSleepCallback
        16   -> _disableBasePri
        16   -> _writeBasePri
        16   -> emAfOkToIdleOrSleep
        16   -> emMarkTaskActive
        16   -> emberAfPluginIdleSleepActiveCallback
        16   -> emberAfPluginIdleSleepOkToIdleCallback
        16   -> emberCurrentStackTasks
        16   -> emberMarkTaskIdle
        16   -> emberSerialReadAvailable


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  emberAfCheckForSleepCallback

 
 72 bytes in section .text
 
 72 bytes of CODE memory

Errors: none
Warnings: none
