###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:34:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"callback-stub.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\callback-stub.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\callback-stub.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\callback-stub.c
      1          // This file is generated by Ember Desktop.  Please do not edit manually.
      2          //
      3          //
      4          
      5          // This c file provides stubs for all callbacks. These stubs
      6          // will be used in the case where user defined implementations
      7          // of the callbacks have not been provided.
      8          #include "app/framework/include/af.h"
      9          
     10          /** @brief Add To Current App Tasks
     11           *
     12           * This function is only useful to sleepy end devices.  This function will note
     13           * the passed item as part of a set of tasks the application has outstanding
     14           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
     15           * application behaves with regard to sleeping and polling.  Until the
     16           * outstanding task is completed, the device may poll more frequently and sleep
     17           * less often.
     18           *
     19           * @param tasks   Ver.: always
     20           */

   \                                 In section .text, align 2, keep-with-next
     21          void emberAfAddToCurrentAppTasksCallback(EmberAfApplicationTask tasks)
     22          {
     23          }
   \                     emberAfAddToCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     24          
     25          /** @brief Allow Network Write Attribute
     26           *
     27           * This function is called by the application framework before it writes an
     28           * attribute in response to a write attribute request from an external device.
     29           * The value passed into this callback is the value to which the attribute is to
     30           * be set by the framework.
     31                  Example:	In mirroring simple metering data
     32           * on an Energy Services Interface (ESI) (formerly called Energy Service Portal
     33           * (ESP) in SE 1.0).), a mirrored simple meter needs to write read-only
     34           * attributes on its mirror. The-meter-mirror sample application, located in
     35           * app/framework/sample-apps, uses this callback to allow the mirrored device to
     36           * write simple metering attributes on the mirror regardless of the fact that
     37           * most simple metering attributes are defined as read-only by the ZigBee
     38           * specification.
     39                  Note:	The ZCL specification does not (as of this
     40           * writing) specify any permission-level security for writing writeable
     41           * attributes. As far as the ZCL specification is concerned, if an attribute is
     42           * writeable, any device that has a link key for the device should be able to
     43           * write that attribute. Furthermore if an attribute is read only, it should not
     44           * be written over the air. Thus, if you implement permissions for writing
     45           * attributes as a feature, you MAY be operating outside the specification. This
     46           * is unlikely to be a problem for writing read-only attributes, but it may be a
     47           * problem for attributes that are writeable according to the specification but
     48           * restricted by the application implementing this callback.
     49           *
     50           * @param endpoint   Ver.: always
     51           * @param clusterId   Ver.: always
     52           * @param attributeId   Ver.: always
     53           * @param mask   Ver.: always
     54           * @param manufacturerCode   Ver.: always
     55           * @param value   Ver.: always
     56           * @param type   Ver.: always
     57           */

   \                                 In section .text, align 2, keep-with-next
     58          EmberAfAttributeWritePermission emberAfAllowNetworkWriteAttributeCallback(int8u endpoint,
     59                                                                                    EmberAfClusterId clusterId,
     60                                                                                    EmberAfAttributeId attributeId,
     61                                                                                    int8u mask,
     62                                                                                    int16u manufacturerCode,
     63                                                                                    int8u* value,
     64                                                                                    int8u type)
     65          {
     66            return EMBER_ZCL_ATTRIBUTE_WRITE_PERMISSION_ALLOW_WRITE_NORMAL; // Default
   \                     emberAfAllowNetworkWriteAttributeCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
     67          }
     68          
     69          /** @brief Clear Report Table
     70           *
     71           * This function is called by the framework when the application should clear
     72           * the report table.
     73           *
     74           */

   \                                 In section .text, align 2, keep-with-next
     75          EmberStatus emberAfClearReportTableCallback(void)
     76          {
     77            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfClearReportTableCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
     78          }
     79          
     80          /** @brief Key establishment Cluster Client Command Received
     81           *
     82           * This function is called by the application framework when a server-to-client
     83           * key establishment command is received but has yet to be handled by the
     84           * framework code.  This function should return a boolean value indicating
     85           * whether the command has been handled by the application code and should not
     86           * be further processed by the framework.
     87           *
     88           * @param cmd   Ver.: always
     89           */

   \                                 In section .text, align 2, keep-with-next
     90          boolean emberAfKeyEstablishmentClusterClientCommandReceivedCallback(EmberAfClusterCommand *cmd)
     91          {
     92            return FALSE;
   \                     emberAfKeyEstablishmentClusterClientCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
     93          }
     94          
     95          /** @brief Cluster Init
     96           *
     97           * This function is called when a specific cluster is initialized. It gives the
     98           * application an opportunity to take care of cluster initialization procedures.
     99           * It is called exactly once for each endpoint where cluster is present.
    100           *
    101           * @param endpoint   Ver.: always
    102           * @param clusterId   Ver.: always
    103           */

   \                                 In section .text, align 2, keep-with-next
    104          void emberAfClusterInitCallback(int8u endpoint,
    105                                          EmberAfClusterId clusterId)
    106          {
    107          }
   \                     emberAfClusterInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    108          
    109          /** @brief Cluster Security Custom
    110           *
    111           * This callback is fired when determining if APS encryption is required for a
    112           * cluster outside of the specification's required clusters.  In other words,
    113           * for the Smart Energy profile this would be a cluster beyond the list that
    114           * normally requires APS encryption.
    115           *
    116           * @param profileId The profile ID  Ver.: always
    117           * @param clusterId The cluster ID  Ver.: always
    118           * @param incoming Whether this is an incoming or outgoing message.  Ver.:
    119           * always
    120           * @param commandId The ZCL command ID being sent/received.  Ver.: always
    121           */

   \                                 In section .text, align 2, keep-with-next
    122          boolean emberAfClusterSecurityCustomCallback(EmberAfProfileId profileId,
    123                                                       EmberAfClusterId clusterId,
    124                                                       boolean incoming,
    125                                                       int8u commandId)
    126          {
    127            // By default, assume APS encryption is not required.
    128            return FALSE;
   \                     emberAfClusterSecurityCustomCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    129          }
    130          
    131          /** @brief Configure Reporting Command
    132           *
    133           * This function is called by the application framework when a Configure
    134           * Reporting command is received from an external device.  The Configure
    135           * Reporting command contains a series of attribute reporting configuration
    136           * records.  The application should return TRUE if the message was processed or
    137           * FALSE if it was not.
    138           *
    139           * @param cmd   Ver.: always
    140           */

   \                                 In section .text, align 2, keep-with-next
    141          boolean emberAfConfigureReportingCommandCallback(const EmberAfClusterCommand *cmd)
    142          {
    143            return FALSE;
   \                     emberAfConfigureReportingCommandCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    144          }
    145          
    146          /** @brief Configure Reporting Response
    147           *
    148           * This function is called by the application framework when a Configure
    149           * Reporting Response command is received from an external device.  The
    150           * application should return TRUE if the message was processed or FALSE if it
    151           * was not.
    152           *
    153           * @param clusterId The cluster identifier of this response.  Ver.: always
    154           * @param buffer Buffer containing the list of attribute status records.  Ver.:
    155           * always
    156           * @param bufLen The length in bytes of the list.  Ver.: always
    157           */

   \                                 In section .text, align 2, keep-with-next
    158          boolean emberAfConfigureReportingResponseCallback(EmberAfClusterId clusterId,
    159                                                            int8u *buffer,
    160                                                            int16u bufLen)
    161          {
    162            return FALSE;
   \                     emberAfConfigureReportingResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    163          }
    164          
    165          /** @brief Default Response
    166           *
    167           * This function is called by the application framework when a Default Response
    168           * command is received from an external device.  The application should return
    169           * TRUE if the message was processed or FALSE if it was not.
    170           *
    171           * @param clusterId The cluster identifier of this response.  Ver.: always
    172           * @param commandId The command identifier to which this is a response.  Ver.:
    173           * always
    174           * @param status Specifies either SUCCESS or the nature of the error that was
    175           * detected in the received command.  Ver.: always
    176           */

   \                                 In section .text, align 2, keep-with-next
    177          boolean emberAfDefaultResponseCallback(EmberAfClusterId clusterId,
    178                                                 int8u commandId,
    179                                                 EmberAfStatus status)
    180          {
    181            return FALSE;
   \                     emberAfDefaultResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    182          }
    183          
    184          /** @brief Delivery Status
    185           *
    186           * @deprecated This callback has been deprecated and will be removed in a future
    187           * release. In lieu, the plugin-specific MessageSent callback or the main
    188           * MessageSent callback should be utilized.
    189           *
    190           * @param type   Ver.: always
    191           * @param status   Ver.: always
    192           */

   \                                 In section .text, align 2, keep-with-next
    193          void emberAfDeliveryStatusCallback(EmberOutgoingMessageType type,
    194                                             EmberStatus status)
    195          {
    196          }
   \                     emberAfDeliveryStatusCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    197          
    198          /** @brief Discover Attributes Response
    199           *
    200           * This function is called by the application framework when a Discover
    201           * Attributes Response or Discover Attributes Extended Response command is
    202           * received from an external device.  The Discover Attributes Response command
    203           * contains a boolean indicating if discovery is complete and a list of zero or
    204           * more attribute identifier/type records. The final argument indicates whether
    205           * the response is in the extended format or not.  The application should return
    206           * TRUE if the message was processed or FALSE if it was not.
    207           *
    208           * @param clusterId The cluster identifier of this response.  Ver.: always
    209           * @param discoveryComplete Indicates whether there are more attributes to be
    210           * discovered.  TRUE if there are no more attributes to be discovered.  Ver.:
    211           * always
    212           * @param buffer Buffer containing the list of attribute identifier/type
    213           * records.  Ver.: always
    214           * @param bufLen The length in bytes of the list.  Ver.: always
    215           * @param extended Indicates whether the response is in the extended format or
    216           * not.  Ver.: always
    217           */

   \                                 In section .text, align 2, keep-with-next
    218          boolean emberAfDiscoverAttributesResponseCallback(EmberAfClusterId clusterId,
    219                                                            boolean discoveryComplete,
    220                                                            int8u *buffer,
    221                                                            int16u bufLen,
    222                                                            boolean extended)
    223          {
    224            return FALSE;
   \                     emberAfDiscoverAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    225          }
    226          
    227          /** @brief Discover Commands Generated Response
    228           *
    229           * This function is called by the framework when Discover Commands Generated
    230           * Response is received.
    231           *
    232           * @param clusterId The cluster identifier of this response.  Ver.: always
    233           * @param manufacturerCode Manufacturer code  Ver.: always
    234           * @param discoveryComplete Indicates whether there are more commands to be
    235           * discovered.  Ver.: always
    236           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    237           * always
    238           * @param commandIdCount The length of bytes of the list, whish is the same as
    239           * the number of identifiers.  Ver.: always
    240           */

   \                                 In section .text, align 2, keep-with-next
    241          boolean emberAfDiscoverCommandsGeneratedResponseCallback(EmberAfClusterId clusterId,
    242                                                                   int16u manufacturerCode,
    243                                                                   boolean discoveryComplete,
    244                                                                   int8u *commandIds,
    245                                                                   int16u commandIdCount)
    246          {
    247            return FALSE;
   \                     emberAfDiscoverCommandsGeneratedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    248          }
    249          
    250          /** @brief Discover Commands Received Response
    251           *
    252           * This function is called by the framework when Discover Commands Received
    253           * Response is received.
    254           *
    255           * @param clusterId The cluster identifier of this response.  Ver.: always
    256           * @param manufacturerCode Manufacturer code  Ver.: always
    257           * @param discoveryComplete Indicates whether there are more commands to be
    258           * discovered.  Ver.: always
    259           * @param commandIds Buffer containing the list of command identifiers.  Ver.:
    260           * always
    261           * @param commandIdCount The length of bytes of the list, whish is the same as
    262           * the number of identifiers.  Ver.: always
    263           */

   \                                 In section .text, align 2, keep-with-next
    264          boolean emberAfDiscoverCommandsReceivedResponseCallback(EmberAfClusterId clusterId,
    265                                                                  int16u manufacturerCode,
    266                                                                  boolean discoveryComplete,
    267                                                                  int8u *commandIds,
    268                                                                  int16u commandIdCount)
    269          {
    270            return FALSE;
   \                     emberAfDiscoverCommandsReceivedResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    271          }
    272          
    273          /** @brief External Attribute Read
    274           *
    275           * Like emberAfExternalAttributeWriteCallback above, this function is called
    276           * when the framework needs to read an attribute that is not stored within the
    277           * Application Framework's data structures.
    278                  All of the important
    279           * information about the attribute itself is passed as a pointer to an
    280           * EmberAfAttributeMetadata struct, which is stored within the application and
    281           * used to manage the attribute. A complete description of the
    282           * EmberAfAttributeMetadata struct is provided in
    283           * app/framework/include/af-types.h
    284                  This function assumes that the
    285           * application is able to read the attribute, write it into the passed buffer,
    286           * and return immediately. Any attributes that require a state machine for
    287           * reading and writing are not really candidates for externalization at the
    288           * present time. The Application Framework does not currently include a state
    289           * machine for reading or writing attributes that must take place across a
    290           * series of application ticks. Attributes that cannot be read in a timely
    291           * manner should be stored within the Application Framework and updated
    292           * occasionally by the application code from within the
    293           * emberAfMainTickCallback.
    294                  If the application was successfully able to
    295           * read the attribute and write it into the passed buffer, it should return a
    296           * value of EMBER_ZCL_STATUS_SUCCESS. Any other return value indicates the
    297           * application was not able to read the attribute.
    298           *
    299           * @param endpoint   Ver.: always
    300           * @param clusterId   Ver.: always
    301           * @param attributeMetadata   Ver.: always
    302           * @param manufacturerCode   Ver.: always
    303           * @param buffer   Ver.: always
    304           */

   \                                 In section .text, align 2, keep-with-next
    305          EmberAfStatus emberAfExternalAttributeReadCallback(int8u endpoint,
    306                                                             EmberAfClusterId clusterId,
    307                                                             EmberAfAttributeMetadata *attributeMetadata,
    308                                                             int16u manufacturerCode,
    309                                                             int8u *buffer)
    310          {
    311            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeReadCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    312          }
    313          
    314          /** @brief External Attribute Write
    315           *
    316           * This function is called whenever the Application Framework needs to write an
    317           * attribute which is not stored within the data structures of the Application
    318           * Framework itself. One of the new features in Version 2 is the ability to
    319           * store attributes outside the Framework. This is particularly useful for
    320           * attributes that do not need to be stored because they can be read off the
    321           * hardware when they are needed, or are stored in some central location used by
    322           * many modules within the system. In this case, you can indicate that the
    323           * attribute is stored externally. When the framework needs to write an external
    324           * attribute, it makes a call to this callback.
    325                  This callback is very
    326           * useful for host micros which need to store attributes in persistent memory.
    327           * Because each host micro (used with an Ember NCP) has its own type of
    328           * persistent memory storage, the Application Framework does not include the
    329           * ability to mark attributes as stored in flash the way that it does for Ember
    330           * SoCs like the EM35x. On a host micro, any attributes that need to be stored
    331           * in persistent memory should be marked as external and accessed through the
    332           * external read and write callbacks. Any host code associated with the
    333           * persistent storage should be implemented within this callback.
    334                  All of
    335           * the important information about the attribute itself is passed as a pointer
    336           * to an EmberAfAttributeMetadata struct, which is stored within the application
    337           * and used to manage the attribute. A complete description of the
    338           * EmberAfAttributeMetadata struct is provided in
    339           * app/framework/include/af-types.h.
    340                  This function assumes that the
    341           * application is able to write the attribute and return immediately. Any
    342           * attributes that require a state machine for reading and writing are not
    343           * candidates for externalization at the present time. The Application Framework
    344           * does not currently include a state machine for reading or writing attributes
    345           * that must take place across a series of application ticks. Attributes that
    346           * cannot be written immediately should be stored within the Application
    347           * Framework and updated occasionally by the application code from within the
    348           * emberAfMainTickCallback.
    349                  If the application was successfully able to
    350           * write the attribute, it returns a value of EMBER_ZCL_STATUS_SUCCESS. Any
    351           * other return value indicates the application was not able to write the
    352           * attribute.
    353           *
    354           * @param endpoint   Ver.: always
    355           * @param clusterId   Ver.: always
    356           * @param attributeMetadata   Ver.: always
    357           * @param manufacturerCode   Ver.: always
    358           * @param buffer   Ver.: always
    359           */

   \                                 In section .text, align 2, keep-with-next
    360          EmberAfStatus emberAfExternalAttributeWriteCallback(int8u endpoint,
    361                                                              EmberAfClusterId clusterId,
    362                                                              EmberAfAttributeMetadata *attributeMetadata,
    363                                                              int16u manufacturerCode,
    364                                                              int8u *buffer)
    365          {
    366            return EMBER_ZCL_STATUS_FAILURE;
   \                     emberAfExternalAttributeWriteCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    367          }
    368          
    369          /** @brief Get Current App Tasks
    370           *
    371           * This function is only useful to sleepy end devices.  This function will
    372           * return the set of tasks the application has outstanding.  These tasks affect
    373           * how the application behaves with regard to sleeping and polling.
    374           *
    375           */

   \                                 In section .text, align 2, keep-with-next
    376          EmberAfApplicationTask emberAfGetCurrentAppTasksCallback(void)
    377          {
    378            return 0;
   \                     emberAfGetCurrentAppTasksCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    379          }
    380          
    381          /** @brief Get Current Poll Control
    382           *
    383           * This function will retrieve the current poll control that the system is using
    384           * for the current network.  This is determined by examining all the scheduled
    385           * events and obtaining the most restrictive poll control context across all
    386           * events.  The most restrictive poll control is EMBER_AF_SHORT_POLL followed by
    387           * EMBER_AF_LONG_POLL.
    388           *
    389           */

   \                                 In section .text, align 2, keep-with-next
    390          EmberAfEventPollControl emberAfGetCurrentPollControlCallback(void)
    391          {
    392            return EMBER_AF_LONG_POLL;
   \                     emberAfGetCurrentPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    393          }
    394          
    395          /** @brief Get Current Poll Interval Ms
    396           *
    397           * This function is only useful to end devices.  This function will return the
    398           * current poll interval (in milliseconds) for the current network.  This
    399           * interval is the maximum amount of time a child is currently waiting between
    400           * polls of its parent.
    401           *
    402           */

   \                                 In section .text, align 2, keep-with-next
    403          int32u emberAfGetCurrentPollIntervalMsCallback(void)
    404          {
    405            return 0;
   \                     emberAfGetCurrentPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    406          }
    407          
    408          /** @brief Get Current Poll Interval Qs
    409           *
    410           * This function is only useful to end devices.  This function will return the
    411           * current poll interval (in quarter seconds) for the current network.  This
    412           * interval is the maximum amount of time a child is currently waiting between
    413           * polls of its parent.
    414           *
    415           */

   \                                 In section .text, align 2, keep-with-next
    416          int32u emberAfGetCurrentPollIntervalQsCallback(void)
    417          {
    418            return 0;
   \                     emberAfGetCurrentPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    419          }
    420          
    421          /** @brief Get Current Time
    422           *
    423           * This callback is called when device attempts to get current time from the
    424           * hardware. If this device has means to retrieve exact time, then this method
    425           * should implement it. If the callback can't provide the exact time it should
    426           * return 0 to indicate failure. Default action is to return 0, which indicates
    427           * that device does not have access to real time.
    428           *
    429           */

   \                                 In section .text, align 2, keep-with-next
    430          int32u emberAfGetCurrentTimeCallback(void)
    431          {
    432            return 0;
   \                     emberAfGetCurrentTimeCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    433          }
    434          
    435          /** @brief Get Default Poll Control
    436           *
    437           * This function will retrieve the default poll control for the current network
    438           * as previously set by emberAfSetDefaultPollControlCallback().  The default
    439           * poll control will limit whether the network can long poll.
    440           *
    441           */

   \                                 In section .text, align 2, keep-with-next
    442          EmberAfEventPollControl emberAfGetDefaultPollControlCallback(void)
    443          {
    444            return EMBER_AF_LONG_POLL;
   \                     emberAfGetDefaultPollControlCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    445          }
    446          
    447          /** @brief Get Long Poll Interval Ms
    448           *
    449           * This function is only useful to end devices.  This function will return the
    450           * long poll interval (in milliseconds) for the current network.  This interval
    451           * is the maximum amount of time a child will wait between polls of its parent
    452           * when it is not expecting data.
    453           *
    454           */

   \                                 In section .text, align 2, keep-with-next
    455          int32u emberAfGetLongPollIntervalMsCallback(void)
    456          {
    457            return 0;
   \                     emberAfGetLongPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    458          }
    459          
    460          /** @brief Get Long Poll Interval Qs
    461           *
    462           * This function is only useful to end devices.  This function will return the
    463           * long poll interval (in quarter seconds) for the current network.  This
    464           * interval is the maximum amount of time a child will wait between polls of its
    465           * parent when it is not expecting data.
    466           *
    467           */

   \                                 In section .text, align 2, keep-with-next
    468          int32u emberAfGetLongPollIntervalQsCallback(void)
    469          {
    470            return 0;
   \                     emberAfGetLongPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    471          }
    472          
    473          /** @brief Get Short Poll Interval Ms
    474           *
    475           * This function is only useful to sleepy end devices.  This function will
    476           * return the short poll interval (in milliseconds) for the current network. 
    477           * This interval is the maximum amount of time a child will wait between polls
    478           * of its parent when it is expecting data.
    479           *
    480           */

   \                                 In section .text, align 2, keep-with-next
    481          int16u emberAfGetShortPollIntervalMsCallback(void)
    482          {
    483            return 0;
   \                     emberAfGetShortPollIntervalMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    484          }
    485          
    486          /** @brief Get Short Poll Interval Qs
    487           *
    488           * This function is only useful to sleepy end devices.  This function will
    489           * return the short poll interval (in quarter seconds) for the current network. 
    490           * This interval is the maximum amount of time a child will wait between polls
    491           * of its parent when it is expecting data.
    492           *
    493           */

   \                                 In section .text, align 2, keep-with-next
    494          int16u emberAfGetShortPollIntervalQsCallback(void)
    495          {
    496            return 0;
   \                     emberAfGetShortPollIntervalQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    497          }
    498          
    499          /** @brief Get Wake Timeout Bitmask
    500           *
    501           * This function is only useful to sleepy end devices.  This function will
    502           * return the wake timeout bitmask for the current network.  The bitmask
    503           * determines which tasks will timeout automatically and which tasks require
    504           * manual removal from the task list.
    505           *
    506           */

   \                                 In section .text, align 2, keep-with-next
    507          EmberAfApplicationTask emberAfGetWakeTimeoutBitmaskCallback(void)
    508          {
    509            return 0;
   \                     emberAfGetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    510          }
    511          
    512          /** @brief Get Wake Timeout Ms
    513           *
    514           * This function is only useful to sleepy end devices.  This function will
    515           * return the wake timeout (in milliseconds) for the current network.  This
    516           * timeout is the maximum amount of time a child will wait for a task in the
    517           * wake bitmask to finish.  While waiting, the device will short poll.
    518           *
    519           */

   \                                 In section .text, align 2, keep-with-next
    520          int16u emberAfGetWakeTimeoutMsCallback(void)
    521          {
    522            return 0;
   \                     emberAfGetWakeTimeoutMsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    523          }
    524          
    525          /** @brief Get Wake Timeout Qs
    526           *
    527           * This function is only useful to sleepy end devices.  This function will
    528           * return the wake timeout (in quarter seconds) for the current network.  This
    529           * timeout is the maximum amount of time a child will wait for a task in the
    530           * wake bitmask to finish.  While waiting, the device will short poll.
    531           *
    532           */

   \                                 In section .text, align 2, keep-with-next
    533          int16u emberAfGetWakeTimeoutQsCallback(void)
    534          {
    535            return 0;
   \                     emberAfGetWakeTimeoutQsCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    536          }
    537          
    538          /** @brief Initiate Inter Pan Key Establishment
    539           *
    540           * This function is called by the framework to initiate key establishment with a
    541           * remote device on a different PAN.  The application should return
    542           * EMBER_SUCCESS if key establishment was initiated successfully.  The
    543           * application should call ::emberAfInterPanKeyEstablishmentCallback as events
    544           * occur.
    545           *
    546           * @param panId The PAN id of the remote device.  Ver.: always
    547           * @param eui64 The EUI64 of the remote device.  Ver.: always
    548           */

   \                                 In section .text, align 2, keep-with-next
    549          EmberStatus emberAfInitiateInterPanKeyEstablishmentCallback(EmberPanId panId,
    550                                                                      const EmberEUI64 eui64)
    551          {
    552            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    553          }
    554          
    555          /** @brief Initiate Key Establishment
    556           *
    557           * This function is called by the framework to initiate key establishment with a
    558           * remote device.  The application should return EMBER_SUCCESS if key
    559           * establishment was initiated successfully.  The application should call
    560           * ::emberAfKeyEstablishmentCallback as events occur.
    561           *
    562           * @param nodeId The node id of the remote device.  Ver.: always
    563           * @param endpoint The endpoint on the remote device.  Ver.: always
    564           */

   \                                 In section .text, align 2, keep-with-next
    565          EmberStatus emberAfInitiateKeyEstablishmentCallback(EmberNodeId nodeId,
    566                                                              int8u endpoint)
    567          {
    568            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiateKeyEstablishmentCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    569          }
    570          
    571          /** @brief Initiate Partner Link Key Exchange
    572           *
    573           * This function is called by the framework to initiate a partner link key
    574           * exchange with a remote device.  The application should return EMBER_SUCCESS
    575           * if the partner link key exchange was initiated successfully.  When the
    576           * partner link key exchange completes, the application should call the given
    577           * callback.
    578           *
    579           * @param target The node id of the remote device.  Ver.: always
    580           * @param endpoint The key establishment endpoint of the remote device.  Ver.:
    581           * always
    582           * @param callback The callback that should be called when the partner link key
    583           * exchange completse.  Ver.: always
    584           */

   \                                 In section .text, align 2, keep-with-next
    585          EmberStatus emberAfInitiatePartnerLinkKeyExchangeCallback(EmberNodeId target,
    586                                                                    int8u endpoint,
    587                                                                    EmberAfPartnerLinkKeyExchangeCallback *callback)
    588          {
    589            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInitiatePartnerLinkKeyExchangeCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    590          }
    591          
    592          /** @brief Inter Pan Key Establishment
    593           *
    594           * A callback by the key-establishment code to indicate an event has occurred. 
    595           * For error codes this is purely a notification.  For non-error status codes
    596           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    597           * disallow the operation.  If the application returns TRUE then the key
    598           * establishment is allowed to proceed.  If it returns FALSE, then key
    599           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    600           *
    601           * @param status   Ver.: always
    602           * @param amInitiator   Ver.: always
    603           * @param panId   Ver.: always
    604           * @param eui64   Ver.: always
    605           * @param delayInSeconds   Ver.: always
    606           */

   \                                 In section .text, align 2, keep-with-next
    607          boolean emberAfInterPanKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    608                                                          boolean amInitiator,
    609                                                          EmberPanId panId,
    610                                                          const EmberEUI64 eui64,
    611                                                          int8u delayInSeconds)
    612          {
    613            return TRUE;
   \                     emberAfInterPanKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    614          }
    615          
    616          /** @brief Interpan Send Message
    617           *
    618           * This function will send a raw MAC message with interpan frame format using
    619           * the passed parameters.
    620           *
    621           * @param header Interpan header info  Ver.: always
    622           * @param messageLength The length of the message received or to send  Ver.:
    623           * always
    624           * @param message The message data received or to send.  Ver.: always
    625           */

   \                                 In section .text, align 2, keep-with-next
    626          EmberStatus emberAfInterpanSendMessageCallback(EmberAfInterpanHeader* header,
    627                                                         int16u messageLength,
    628                                                         int8u* message)
    629          {
    630            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfInterpanSendMessageCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    631          }
    632          
    633          /** @brief Key Establishment
    634           *
    635           * A callback by the key-establishment code to indicate an event has occurred. 
    636           * For error codes this is purely a notification.  For non-error status codes
    637           * (besides LINK_KEY_ESTABLISHED), it is the application's chance to allow or
    638           * disallow the operation.  If the application returns TRUE then the key
    639           * establishment is allowed to proceed.  If it returns FALSE, then key
    640           * establishment is aborted.  LINK_KEY_ESTABLISHED is a notification of success.
    641           *
    642           * @param status   Ver.: always
    643           * @param amInitiator   Ver.: always
    644           * @param partnerShortId   Ver.: always
    645           * @param delayInSeconds   Ver.: always
    646           */

   \                                 In section .text, align 2, keep-with-next
    647          boolean emberAfKeyEstablishmentCallback(EmberAfKeyEstablishmentNotifyMessage status,
    648                                                  boolean amInitiator,
    649                                                  EmberNodeId partnerShortId,
    650                                                  int8u delayInSeconds)
    651          {
    652            return TRUE;
   \                     emberAfKeyEstablishmentCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
    653          }
    654          
    655          /** @brief Message Sent
    656           *
    657           * This function is called by the application framework from the message sent
    658           * handler, when it is informed by the stack regarding the message sent status.
    659           * All of the values passed to the emberMessageSentHandler are passed on to this
    660           * callback. This provides an opportunity for the application to verify that its
    661           * message has been sent successfully and take the appropriate action. This
    662           * callback should return a boolean value of TRUE or FALSE. A value of TRUE
    663           * indicates that the message sent notification has been handled and should not
    664           * be handled by the application framework.
    665           *
    666           * @param type   Ver.: always
    667           * @param indexOrDestination   Ver.: always
    668           * @param apsFrame   Ver.: always
    669           * @param msgLen   Ver.: always
    670           * @param message   Ver.: always
    671           * @param status   Ver.: always
    672           */

   \                                 In section .text, align 2, keep-with-next
    673          boolean emberAfMessageSentCallback(EmberOutgoingMessageType type,
    674                                             int16u indexOrDestination,
    675                                             EmberApsFrame* apsFrame,
    676                                             int16u msgLen,
    677                                             int8u* message,
    678                                             EmberStatus status)
    679          {
    680            return FALSE;
   \                     emberAfMessageSentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    681          }
    682          
    683          /** @brief Ncp Init
    684           *
    685           * This callback is used for initializing the network coprocessor either at
    686           * startup, or upon reset. It is should be used to perform any kind of EZSP
    687           * initialization and is called twice every time when NCP is reset. In the first
    688           * invocation, memoryAllocation will be TRUE and the application should only
    689           * issue EZSP commands that affect memory allocation on the NCP.  In the second
    690           * invocation, memoryAllocation will be FALSE and the application should only
    691           * issue EZSP commands that do not affect memory allocation on the NCP.  In an
    692           * SOC environment, this callbacks is not used.
    693           *
    694           * @param memoryAllocation   Ver.: always
    695           */

   \                                 In section .text, align 2, keep-with-next
    696          void emberAfNcpInitCallback(boolean memoryAllocation)
    697          {
    698          }
   \                     emberAfNcpInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    699          
    700          /** @brief Network Key Update Complete
    701           *
    702           * This is called by the framework when a network key update operation started
    703           * by the trust center is complete.
    704           *
    705           * @param status   Ver.: always
    706           */

   \                                 In section .text, align 2, keep-with-next
    707          void emberAfNetworkKeyUpdateCompleteCallback(EmberStatus status)
    708          {
    709          }
   \                     emberAfNetworkKeyUpdateCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    710          
    711          /** @brief Ota Page Request Server Policy
    712           *
    713           * This callback is called by the OTA server page request code when it wants to
    714           * determine if it is allowed for an OTA client to make a page request.  It is
    715           * only called if page request support has been enabled on the server.  It
    716           * should return EMBER_ZCL_STATUS_SUCCESS if it allows the page request, and
    717           * EMBER_ZCL_STATUS_UNSUP_CLUSTER_COMMAND if it does not want to allow it.
    718           *
    719           */

   \                                 In section .text, align 2, keep-with-next
    720          int8u emberAfOtaPageRequestServerPolicyCallback(void)
    721          {
    722            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaPageRequestServerPolicyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    723          }
    724          
    725          /** @brief Ota Server Block Size
    726           *
    727           * This function provides a way for the server to adjust the block size of its
    728           * response to an Image block request by a client.
    729           *
    730           * @param clientNodeId The node Id of OTA client making an image block request. 
    731           * Ver.: always
    732           */

   \                                 In section .text, align 2, keep-with-next
    733          int8u emberAfOtaServerBlockSizeCallback(EmberNodeId clientNodeId)
    734          {
   \                     emberAfOtaServerBlockSizeCallback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x4604             MOV      R4,R0
    735            // This function provides a way for the server to potentially
    736            // adjust the block size based on the client who is requesting.
    737            // In other words if we are using source routing we will limit
    738            // data returned by enough to put a source route into the message.
    739          
    740            // Image Block Response Message Format
    741            // Status Code: 1-byte
    742            // Manuf Code:  2-bytes
    743            // Image Type:  2-bytes
    744            // File Ver:    4-bytes
    745            // File Offset: 4-bytes
    746            // Data Size:   1-byte
    747            // Data:        variable
    748            const int8u IMAGE_BLOCK_RESPONSE_OVERHEAD = (EMBER_AF_ZCL_OVERHEAD + 14);
    749          
    750            EmberApsFrame apsFrame;
    751            int8u maxSize;
    752            apsFrame.options = EMBER_APS_OPTION_NONE;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    753          
    754            if (emberAfIsCurrentSecurityProfileSmartEnergy()) {
   \   0000000C   0x.... 0x....      BL       emberAfIsCurrentSecurityProfileSmartEnergy
   \   00000010   0xB128             CBZ.N    R0,??emberAfOtaServerBlockSizeCallback_0
    755              apsFrame.options |= EMBER_APS_OPTION_ENCRYPTION;
   \   00000012   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000016   0xF040 0x0020      ORR      R0,R0,#0x20
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    756            }
    757          
    758            maxSize = emberAfMaximumApsPayloadLength(EMBER_OUTGOING_DIRECT,
    759                                                     clientNodeId,
    760                                                     &apsFrame);
    761            maxSize -= IMAGE_BLOCK_RESPONSE_OVERHEAD;
    762            return maxSize;
   \                     ??emberAfOtaServerBlockSizeCallback_0: (+1)
   \   0000001E   0xAA00             ADD      R2,SP,#+0
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       emberAfMaximumApsPayloadLength
   \   00000028   0x3811             SUBS     R0,R0,#+17
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
    763          }
    764          
    765          /** @brief Ota Server Image Block Request
    766           *
    767           * This function is called when the server application receives an image block
    768           * request by a client.
    769           *
    770           * @param data A struct containing the details of the image block response and
    771           * values that can be returned by the application to effect the behavior of the
    772           * server's response.  Ver.: always
    773           */

   \                                 In section .text, align 2, keep-with-next
    774          int8u emberAfOtaServerImageBlockRequestCallback(EmberAfImageBlockRequestCallbackStruct* data)
    775          {
    776            // This function should return one of the following:
    777            //   EMBER_ZCL_STATUS_SUCCESS - This indicates that the OTA server code should
    778            //     respond to the image block request normally.
    779            //   EMBER_ZCL_STATUS_ABORT - This indicates to the OTA server that it should
    780            //     tell the client to abort the download and make no more image block requests.
    781            //   EMBER_ZCL_STATUS_WAIT_FOR_DATA - This indicates to the OTA server to tell
    782            //     the client it should delay before asking for that data block again.
    783            //     The 'waitTimeInMinutesResponse' value should be filled in with the delay value.
    784            return EMBER_ZCL_STATUS_SUCCESS;
   \                     emberAfOtaServerImageBlockRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    785          }
    786          
    787          /** @brief Ota Server Incoming Message Raw
    788           *
    789           * This callback is for processing incoming messages for the Over-the-air
    790           * bootload cluster server.  ZCL will not process the message and instead hand
    791           * the raw over the air data to the callback for its own processing.
    792           *
    793           * @param message A pointer to the structure containing the message buffer and
    794           * other information about it.  Ver.: always
    795           */

   \                                 In section .text, align 2, keep-with-next
    796          boolean emberAfOtaServerIncomingMessageRawCallback(EmberAfClusterCommand *message)
    797          {
    798            return FALSE;
   \                     emberAfOtaServerIncomingMessageRawCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    799          }
    800          
    801          /** @brief Ota Server Query
    802           *
    803           * This callback is fired when the OTA server receives a query request by the
    804           * client.  The callback lets the server application indicate to the client what
    805           * the 'next' version of software is for the device, or if there is not one
    806           * available.
    807           *
    808           * @param currentImageId This is the current software image that the client
    809           * hase.  Ver.: always
    810           * @param hardwareVersion If this value is non-NULL, it indicates the hardware
    811           * version of the client device.  If NULL, the client did not specify a hardware
    812           * version.  Ver.: always
    813           * @param nextUpgradeImageId This is a pointer to a data structure containing
    814           * the 'next' software version for the client to download.  Ver.: always
    815           */

   \                                 In section .text, align 2, keep-with-next
    816          int8u emberAfOtaServerQueryCallback(const EmberAfOtaImageId* currentImageId,
    817                                              int16u* hardwareVersion,
    818                                              EmberAfOtaImageId* nextUpgradeImageId)
    819          {
    820            // If a new software image is available, this function should return EMBER_ZCL_STATUS_SUCCESS
    821            // and populate the 'nextUpgradeImageId' structure with the appropriate values.
    822            // If no new software image is available (i.e. the client should not download a firmware image)
    823            // then the server should return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE.
    824            return EMBER_ZCL_STATUS_NO_IMAGE_AVAILABLE;
   \                     emberAfOtaServerQueryCallback: (+1)
   \   00000000   0x2098             MOVS     R0,#+152
   \   00000002   0x4770             BX       LR               ;; return
    825          }
    826          
    827          /** @brief Ota Server Send Image Notify
    828           *
    829           * This callback is an indication to the OTA server that it should send out
    830           * notification about an OTA file that is available for download.
    831           *
    832           * @param dest The destination of the image notify message.  May be a broadcast
    833           * address.  Ver.: always
    834           * @param endpoint The destination endpoint of the image notify message.  May be
    835           * a broadcast endpoint.  Ver.: always
    836           * @param payloadType The type of data the image notify message will contain.  0
    837           * = no data.  1 = Manufacturer ID.  2 = Manufacturer ID and the image type ID. 
    838           * 3 = Manufacturer ID, image type ID, and firmware version.  Ver.: always
    839           * @param queryJitter The percentage of nodes that should respond to this
    840           * message, from 1-100.  On receipt of this message, each recipient will
    841           * randomly choose a percentage and only query the server if their percentage is
    842           * below this value.  Ver.: always
    843           * @param id The image information that will be put in the message.  The data
    844           * within this struct that will be appended to the message is determined by the
    845           * previous 'payloadType' argument.  Ver.: always
    846           */

   \                                 In section .text, align 2, keep-with-next
    847          boolean emberAfOtaServerSendImageNotifyCallback(EmberNodeId dest,
    848                                                          int8u endpoint,
    849                                                          int8u payloadType,
    850                                                          int8u queryJitter,
    851                                                          const EmberAfOtaImageId* id)
    852          {
    853            return FALSE;
   \                     emberAfOtaServerSendImageNotifyCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    854          }
    855          
    856          /** @brief Ota Server Upgrade End Request
    857           *
    858           * This function is called when the OTA server receives a request an upgrade end
    859           * request.  If the request indicated a successful download by the client, the
    860           * server must tell the client when and if to upgrade to the downloaded image.
    861           *
    862           * @param source The node ID of the device that sent the upgrade end request. 
    863           * Ver.: always
    864           * @param status This is the ZCL status sent by the client indicating the result
    865           * of its attempt to download the new upgrade image.  If the status is not
    866           * EMBER_ZCL_STATUS_SUCCESS then this callback is merely informative and no
    867           * response mesasge will be generated by the server.  Ver.: always
    868           * @param returnValue If the server returns TRUE indicating that the client
    869           * should apply the upgrade, this time value indicates when in the future the
    870           * client should apply the upgrade.  Ver.: always
    871           * @param imageId This variable indicates the software version that the client
    872           * successfully downloaded and is asking to upgrade to.  Ver.: always
    873           */

   \                                 In section .text, align 2, keep-with-next
    874          boolean emberAfOtaServerUpgradeEndRequestCallback(EmberNodeId source,
    875                                                            int8u status,
    876                                                            int32u* returnValue,
    877                                                            const EmberAfOtaImageId* imageId)
    878          {
    879            // If the status value is not EMBER_ZCL_STATUS_SUCCESS, then this callback is
    880            // merely informative and no response message will be generated by the server.
    881            // If the server wants the client to NOT apply the upgrade, then it should
    882            // return FALSE.
    883            // If the server wants the client to apply the upgrade, it should return TRUE
    884            // and set the 'returnValue' parameter to when it wants the client to
    885            // apply the upgrade.  There are three possible values:
    886            //   0               =  Apply the upgrade now
    887            //   0xFFFFFFFF      =  Don't apply yet, ask again later.
    888            //   (anything-else) =  Apply the upgrade X minutes from now.
    889            *returnValue = 0;
   \                     emberAfOtaServerUpgradeEndRequestCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x6010             STR      R0,[R2, #+0]
    890            return TRUE;
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4770             BX       LR               ;; return
    891          }
    892          
    893          /** @brief Ota Storage Close
    894           *
    895           * This callback shuts down the ZigBee Over-the-air storage module.
    896           *
    897           */

   \                                 In section .text, align 2, keep-with-next
    898          void emberAfOtaStorageCloseCallback(void)
    899          {
    900            // Please implement me.
    901            assert(FALSE);
   \                     emberAfOtaStorageCloseCallback: (+1)
   \   00000000   0xF240 0x3185      MOVW     R1,#+901
   \   00000004   0x.... 0x....      ADR.W    R0,?_0
   \   00000008   0x.... 0x....      B.W      halInternalAssertFailed
    902          }
    903          
    904          /** @brief Partner Link Key Exchange Request
    905           *
    906           * This function is called by the framework on SOC platforms when a remote node
    907           * requests a partner link key exchange.  The application should return
    908           * EMBER_SUCCESS to accept the request or any other status to reject it.  On
    909           * network coprocessor platforms, this function will not be called because the
    910           * NCP handles partner link key exchange requests based on the binding policy.
    911           *
    912           * @param partner The EUI of the remote node.  Ver.: always
    913           */

   \                                 In section .text, align 2, keep-with-next
    914          EmberStatus emberAfPartnerLinkKeyExchangeRequestCallback(EmberEUI64 partner)
    915          {
    916            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfPartnerLinkKeyExchangeRequestCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
    917          }
    918          
    919          /** @brief Partner Link Key Exchange Response
    920           *
    921           * This function is called by the framework when a remote node requests a
    922           * partner link key exchange.  The application should return TRUE to accept the
    923           * request or FALSE to reject it.  On network coprocessor platforms, this
    924           * function will not be called because the NCP handles partner link key exchange
    925           * requests based on the binding policy.
    926           *
    927           * @param sender The EUI of the remote node.  Ver.: always
    928           * @param status The ZDO response status.  Ver.: always
    929           */

   \                                 In section .text, align 2, keep-with-next
    930          void emberAfPartnerLinkKeyExchangeResponseCallback(EmberNodeId sender,
    931                                                             EmberZdoStatus status)
    932          {
    933          }
   \                     emberAfPartnerLinkKeyExchangeResponseCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    934          
    935          /** @brief Performing Key Establishment
    936           *
    937           * This function is called by the framework to determine if the device is
    938           * performing key establishment.  The application should return TRUE if key
    939           * establishment is in progress.
    940           *
    941           */

   \                                 In section .text, align 2, keep-with-next
    942          boolean emberAfPerformingKeyEstablishmentCallback(void)
    943          {
    944            return FALSE;
   \                     emberAfPerformingKeyEstablishmentCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    945          }
    946          
    947          /** @brief Data Error
    948           *
    949           * This function is called by the Tunneling server plugin whenever a data error
    950           * occurs on a tunnel.  Errors occur if a device attempts to send data on tunnel
    951           * that is no longer active or if the tunneling does not belong to the device.
    952           *
    953           * @param tunnelId The identifier of the tunnel on which this data error
    954           * occurred.  Ver.: always
    955           * @param transferDataStatus The error that occurred.  Ver.: always
    956           */

   \                                 In section .text, align 2, keep-with-next
    957          void emberAfPluginAuroraTunnelingServerDataErrorCallback(int16u tunnelId,
    958                                                                   EmberAfTunnelingTransferDataStatus transferDataStatus)
    959          {
    960          }
   \                     emberAfPluginAuroraTunnelingServerDataErrorCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    961          
    962          /** @brief Broadcast Sent
    963           *
    964           * This function is called when a new MTORR broadcast has been successfully sent
    965           * by the concentrator plugin.
    966           *
    967           */

   \                                 In section .text, align 2, keep-with-next
    968          void emberAfPluginConcentratorBroadcastSentCallback(void)
    969          {
    970          }
   \                     emberAfPluginConcentratorBroadcastSentCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    971          
    972          /** @brief Rollover
    973           *
    974           * This function is called every time a counter exceeds its threshold.
    975           *
    976           * @param type The counter that rolled over  Ver.: always
    977           */

   \                                 In section .text, align 2, keep-with-next
    978          void emberAfPluginCountersRolloverCallback(EmberCounterType type)
    979          {
    980          }
   \                     emberAfPluginCountersRolloverCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    981          
    982          /** @brief Client Complete
    983           *
    984           * This function is called by the EZ-Mode Commissioning plugin when client
    985           * commissioning completes.
    986           *
    987           * @param bindingIndex The binding index that was created or
    988           * ::EMBER_NULL_BINDING if an error occurred.  Ver.: always
    989           */

   \                                 In section .text, align 2, keep-with-next
    990          void emberAfPluginEzmodeCommissioningClientCompleteCallback(int8u bindingIndex)
    991          {
    992          }
   \                     emberAfPluginEzmodeCommissioningClientCompleteCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    993          
    994          /** @brief Get Group Name
    995           *
    996           * This function returns the name of a group with the provided group ID, should
    997           * it exist.
    998           *
    999           * @param endpoint Endpoint  Ver.: always
   1000           * @param groupId Group ID  Ver.: always
   1001           * @param groupName Group Name  Ver.: always
   1002           */

   \                                 In section .text, align 2, keep-with-next
   1003          void emberAfPluginGroupsServerGetGroupNameCallback(int8u endpoint,
   1004                                                             int16u groupId,
   1005                                                             int8u *groupName)
   1006          {
   1007          }
   \                     emberAfPluginGroupsServerGetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1008          
   1009          /** @brief Group Names Supported
   1010           *
   1011           * This function returns whether or not group names are supported.
   1012           *
   1013           * @param endpoint Endpoint  Ver.: always
   1014           */

   \                                 In section .text, align 2, keep-with-next
   1015          boolean emberAfPluginGroupsServerGroupNamesSupportedCallback(int8u endpoint)
   1016          {
   1017            return FALSE;
   \                     emberAfPluginGroupsServerGroupNamesSupportedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1018          }
   1019          
   1020          /** @brief Set Group Name
   1021           *
   1022           * This function sets the name of a group with the provided group ID.
   1023           *
   1024           * @param endpoint Endpoint  Ver.: always
   1025           * @param groupId Group ID  Ver.: always
   1026           * @param groupName Group Name  Ver.: always
   1027           */

   \                                 In section .text, align 2, keep-with-next
   1028          void emberAfPluginGroupsServerSetGroupNameCallback(int8u endpoint,
   1029                                                             int16u groupId,
   1030                                                             int8u *groupName)
   1031          {
   1032          }
   \                     emberAfPluginGroupsServerSetGroupNameCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1033          
   1034          /** @brief Start Feedback
   1035           *
   1036           * This function is called by the Identify plugin when identification begins. It
   1037           * informs the Identify Feedback plugin that it should begin providing its
   1038           * implemented feedback functionality (e.g. LED blinking, buzzer sounding, etc.)
   1039           * until the Identify plugin tells it to stop. The identify time is purely a
   1040           * matter of informational convenience; this plugin does not need to know how
   1041           * long it will identify (the Identify plugin will perform the necessary
   1042           * timekeeping.)
   1043           *
   1044           * @param endpoint The identifying endpoint  Ver.: always
   1045           * @param identifyTime The identify time  Ver.: always
   1046           */

   \                                 In section .text, align 2, keep-with-next
   1047          void emberAfPluginIdentifyStartFeedbackCallback(int8u endpoint,
   1048                                                          int16u identifyTime)
   1049          {
   1050          }
   \                     emberAfPluginIdentifyStartFeedbackCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1051          
   1052          /** @brief Stop Feedback
   1053           *
   1054           * This function is called by the Identify plugin when identification is
   1055           * finished. It tells the Identify Feedback plugin to stop providing its
   1056           * implemented feedback functionality.
   1057           *
   1058           * @param endpoint The identifying endpoint  Ver.: always
   1059           */

   \                                 In section .text, align 2, keep-with-next
   1060          void emberAfPluginIdentifyStopFeedbackCallback(int8u endpoint)
   1061          {
   1062          }
   \                     emberAfPluginIdentifyStopFeedbackCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1063          
   1064          /** @brief Active
   1065           *
   1066           * This function is called by the Idle/Sleep plugin after idling.
   1067           *
   1068           */

   \                                 In section .text, align 2, keep-with-next
   1069          void emberAfPluginIdleSleepActiveCallback(void)
   1070          {
   1071          }
   \                     emberAfPluginIdleSleepActiveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1072          
   1073          /** @brief Ok To Idle
   1074           *
   1075           * This function is called by the Idle/Sleep plugin before idling.  The
   1076           * application should return TRUE if the device may idle or FALSE otherwise.
   1077           *
   1078           */

   \                                 In section .text, align 2, keep-with-next
   1079          boolean emberAfPluginIdleSleepOkToIdleCallback(void)
   1080          {
   1081            return TRUE;
   \                     emberAfPluginIdleSleepOkToIdleCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1082          }
   1083          
   1084          /** @brief Ok To Sleep
   1085           *
   1086           * This function is called by the Idle/Sleep plugin before sleeping.  The
   1087           * application should return TRUE if the device may sleep or FALSE otherwise.
   1088           *
   1089           * @param durationMs The maximum duration in milliseconds that the device will
   1090           * sleep.  Ver.: always
   1091           */

   \                                 In section .text, align 2, keep-with-next
   1092          boolean emberAfPluginIdleSleepOkToSleepCallback(int32u durationMs)
   1093          {
   1094            return TRUE;
   \                     emberAfPluginIdleSleepOkToSleepCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1095          }
   1096          
   1097          /** @brief Wake Up
   1098           *
   1099           * This function is called by the Idle/Sleep plugin after sleeping.
   1100           *
   1101           * @param durationMs The duration in milliseconds that the device slept.  Ver.:
   1102           * always
   1103           */

   \                                 In section .text, align 2, keep-with-next
   1104          void emberAfPluginIdleSleepWakeUpCallback(int32u durationMs)
   1105          {
   1106          }
   \                     emberAfPluginIdleSleepWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1107          
   1108          /** @brief Get Radio Power For Channel
   1109           *
   1110           * This callback is called by the framework when it is setting the radio power
   1111           * during the discovery process. The framework will set the radio power
   1112           * depending on what is returned by this callback.
   1113           *
   1114           * @param channel   Ver.: always
   1115           */

   \                                 In section .text, align 2, keep-with-next
   1116          int8s emberAfPluginNetworkFindGetRadioPowerForChannelCallback(int8u channel)
   1117          {
   1118            return EMBER_AF_PLUGIN_NETWORK_FIND_RADIO_TX_POWER;
   \                     emberAfPluginNetworkFindGetRadioPowerForChannelCallback: (+1)
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x4770             BX       LR               ;; return
   1119          }
   1120          
   1121          /** @brief Join
   1122           *
   1123           * This callback is called by the plugin when a joinable network has been found.
   1124           *  If the application returns TRUE, the plugin will attempt to join the
   1125           * network.  Otherwise, the plugin will ignore the network and continue
   1126           * searching.  Applications can use this callback to implement a network
   1127           * blacklist.
   1128           *
   1129           * @param networkFound   Ver.: always
   1130           * @param lqi   Ver.: always
   1131           * @param rssi   Ver.: always
   1132           */

   \                                 In section .text, align 2, keep-with-next
   1133          boolean emberAfPluginNetworkFindJoinCallback(EmberZigbeeNetwork *networkFound,
   1134                                                       int8u lqi,
   1135                                                       int8s rssi)
   1136          {
   1137            return TRUE;
   \                     emberAfPluginNetworkFindJoinCallback: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x4770             BX       LR               ;; return
   1138          }
   1139          
   1140          /** @brief Post Attribute Change
   1141           *
   1142           * This function is called by the application framework after it changes an
   1143           * attribute value. The value passed into this callback is the value to which
   1144           * the attribute was set by the framework.
   1145           *
   1146           * @param endpoint   Ver.: always
   1147           * @param clusterId   Ver.: always
   1148           * @param attributeId   Ver.: always
   1149           * @param mask   Ver.: always
   1150           * @param manufacturerCode   Ver.: always
   1151           * @param type   Ver.: always
   1152           * @param size   Ver.: always
   1153           * @param value   Ver.: always
   1154           */

   \                                 In section .text, align 2, keep-with-next
   1155          void emberAfPostAttributeChangeCallback(int8u endpoint,
   1156                                                  EmberAfClusterId clusterId,
   1157                                                  EmberAfAttributeId attributeId,
   1158                                                  int8u mask,
   1159                                                  int16u manufacturerCode,
   1160                                                  int8u type,
   1161                                                  int8u size,
   1162                                                  int8u* value)
   1163          {
   1164          }
   \                     emberAfPostAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1165          
   1166          /** @brief Post Wake Up
   1167           *
   1168           * @deprecated This callback has been deprecated and will be removed in a future
   1169           * release.  Customers should use the new ::emberAfPluginIdleSleepWakeUpCallback
   1170           * instead.
   1171           *
   1172           * @param sleepDuration   Ver.: always
   1173           */

   \                                 In section .text, align 2, keep-with-next
   1174          void emberAfPostWakeUpCallback(int32u sleepDuration)
   1175          {
   1176          }
   \                     emberAfPostWakeUpCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1177          
   1178          /** @brief Pre Attribute Change
   1179           *
   1180           * This function is called by the application framework before it changes an
   1181           * attribute value. The value passed into this callback is the value to which
   1182           * the attribute is to be set by the framework.
   1183           *
   1184           * @param endpoint   Ver.: always
   1185           * @param clusterId   Ver.: always
   1186           * @param attributeId   Ver.: always
   1187           * @param mask   Ver.: always
   1188           * @param manufacturerCode   Ver.: always
   1189           * @param type   Ver.: always
   1190           * @param size   Ver.: always
   1191           * @param value   Ver.: always
   1192           */

   \                                 In section .text, align 2, keep-with-next
   1193          void emberAfPreAttributeChangeCallback(int8u endpoint,
   1194                                                 EmberAfClusterId clusterId,
   1195                                                 EmberAfAttributeId attributeId,
   1196                                                 int8u mask,
   1197                                                 int16u manufacturerCode,
   1198                                                 int8u type,
   1199                                                 int8u size,
   1200                                                 int8u* value)
   1201          {
   1202          }
   \                     emberAfPreAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1203          
   1204          /** @brief Pre Command Received
   1205           *
   1206           * This callback is the second in the Application Framework's message processing
   1207           * chain. At this point in the processing of incoming over-the-air messages, the
   1208           * application has determined that the incoming message is a ZCL command. It
   1209           * parses enough of the message to populate an EmberAfClusterCommand struct. The
   1210           * Application Framework defines this struct value in a local scope to the
   1211           * command processing but also makes it available through a global pointer
   1212           * called emberAfCurrentCommand, in app/framework/util/util.c. When command
   1213           * processing is complete, this pointer is cleared.
   1214           *
   1215           * @param cmd   Ver.: always
   1216           */

   \                                 In section .text, align 2, keep-with-next
   1217          boolean emberAfPreCommandReceivedCallback(EmberAfClusterCommand* cmd)
   1218          {
   1219            return FALSE;
   \                     emberAfPreCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1220          }
   1221          
   1222          /** @brief Pre Go To Sleep
   1223           *
   1224           * @deprecated This callback has been deprecated and will be removed in a future
   1225           * release.  Customers should use the new
   1226           * ::emberAfPluginIdleSleepOkToSleepCallback instead.  The application will only
   1227           * deep sleep if this callback returns FALSE.
   1228           *
   1229           * @param sleepDurationAttempt   Ver.: always
   1230           */

   \                                 In section .text, align 2, keep-with-next
   1231          boolean emberAfPreGoToSleepCallback(int32u sleepDurationAttempt)
   1232          {
   1233            return FALSE;
   \                     emberAfPreGoToSleepCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1234          }
   1235          
   1236          /** @brief Pre Message Received
   1237           *
   1238           * This callback is the first in the Application Framework's message processing
   1239           * chain. The Application Framework calls it when a message has been received
   1240           * over the air but has not yet been parsed by the ZCL command-handling code. If
   1241           * you wish to parse some messages that are completely outside the ZCL
   1242           * specification or are not handled by the Application Framework's command
   1243           * handling code, you should intercept them for parsing in this callback. 
   1244               
   1245           *   This callback returns a Boolean value indicating whether or not the message
   1246           * has been handled. If the callback returns a value of TRUE, then the
   1247           * Application Framework assumes that the message has been handled and it does
   1248           * nothing else with it. If the callback returns a value of FALSE, then the
   1249           * application framework continues to process the message as it would with any
   1250           * incoming message.
   1251                  Note: 	This callback receives a pointer to an
   1252           * incoming message struct. This struct allows the application framework to
   1253           * provide a unified interface between both Host devices, which receive their
   1254           * message through the ezspIncomingMessageHandler, and SoC devices, which
   1255           * receive their message through emberIncomingMessageHandler.
   1256           *
   1257           * @param incomingMessage   Ver.: always
   1258           */

   \                                 In section .text, align 2, keep-with-next
   1259          boolean emberAfPreMessageReceivedCallback(EmberAfIncomingMessage* incomingMessage)
   1260          {
   1261            return FALSE;
   \                     emberAfPreMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1262          }
   1263          
   1264          /** @brief Pre Ncp Reset
   1265           *
   1266           * This function will be called prior to the reset of the NCP by the host.
   1267           *
   1268           */

   \                                 In section .text, align 2, keep-with-next
   1269          void emberAfPreNcpResetCallback(void)
   1270          {
   1271          }
   \                     emberAfPreNcpResetCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1272          
   1273          /** @brief Pre ZDO Message Received
   1274           *
   1275           * This function passes the application an incoming ZDO message and gives the
   1276           * appictation the opportunity to handle it. By default, this callback returns
   1277           * FALSE indicating that the incoming ZDO message has not been handled and
   1278           * should be handled by the Application Framework.
   1279           *
   1280           * @param emberNodeId   Ver.: always
   1281           * @param apsFrame   Ver.: always
   1282           * @param message   Ver.: always
   1283           * @param length   Ver.: always
   1284           */

   \                                 In section .text, align 2, keep-with-next
   1285          boolean emberAfPreZDOMessageReceivedCallback(EmberNodeId emberNodeId,
   1286                                                       EmberApsFrame* apsFrame,
   1287                                                       int8u* message,
   1288                                                       int16u length)
   1289          {
   1290            return FALSE;
   \                     emberAfPreZDOMessageReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1291          }
   1292          
   1293          /** @brief Read Attributes Response
   1294           *
   1295           * This function is called by the application framework when a Read Attributes
   1296           * Response command is received from an external device.  The application should
   1297           * return TRUE if the message was processed or FALSE if it was not.
   1298           *
   1299           * @param clusterId The cluster identifier of this response.  Ver.: always
   1300           * @param buffer Buffer containing the list of read attribute status records. 
   1301           * Ver.: always
   1302           * @param bufLen The length in bytes of the list.  Ver.: always
   1303           */

   \                                 In section .text, align 2, keep-with-next
   1304          boolean emberAfReadAttributesResponseCallback(EmberAfClusterId clusterId,
   1305                                                        int8u *buffer,
   1306                                                        int16u bufLen)
   1307          {
   1308            return FALSE;
   \                     emberAfReadAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1309          }
   1310          
   1311          /** @brief Read Reporting Configuration Command
   1312           *
   1313           * This function is called by the application framework when a Read Reporting
   1314           * Configuration command is received from an external device.  The application
   1315           * should return TRUE if the message was processed or FALSE if it was not.
   1316           *
   1317           * @param cmd   Ver.: always
   1318           */

   \                                 In section .text, align 2, keep-with-next
   1319          boolean emberAfReadReportingConfigurationCommandCallback(const EmberAfClusterCommand *cmd)
   1320          {
   1321            return FALSE;
   \                     emberAfReadReportingConfigurationCommandCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1322          }
   1323          
   1324          /** @brief Read Reporting Configuration Response
   1325           *
   1326           * This function is called by the application framework when a Read Reporting
   1327           * Configuration Response command is received from an external device.  The
   1328           * application should return TRUE if the message was processed or FALSE if it
   1329           * was not.
   1330           *
   1331           * @param clusterId The cluster identifier of this response.  Ver.: always
   1332           * @param buffer Buffer containing the list of attribute reporting configuration
   1333           * records.  Ver.: always
   1334           * @param bufLen The length in bytes of the list.  Ver.: always
   1335           */

   \                                 In section .text, align 2, keep-with-next
   1336          boolean emberAfReadReportingConfigurationResponseCallback(EmberAfClusterId clusterId,
   1337                                                                    int8u *buffer,
   1338                                                                    int16u bufLen)
   1339          {
   1340            return FALSE;
   \                     emberAfReadReportingConfigurationResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1341          }
   1342          
   1343          /** @brief Registration Abort
   1344           *
   1345           * This callback is called when the device should abort the registration
   1346           * process.
   1347           *
   1348           */

   \                                 In section .text, align 2, keep-with-next
   1349          void emberAfRegistrationAbortCallback(void)
   1350          {
   1351          }
   \                     emberAfRegistrationAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1352          
   1353          /** @brief Registration
   1354           *
   1355           * This callback is called when the device joins a network and the process of
   1356           * registration is complete. This callback provides a success value of TRUE if
   1357           * the registration process was successful and a value of FALSE if registration
   1358           * failed.
   1359           *
   1360           * @param success TRUE if registration succeeded, FALSE otherwise.  Ver.: always
   1361           */

   \                                 In section .text, align 2, keep-with-next
   1362          void emberAfRegistrationCallback(boolean success)
   1363          {
   1364          }
   \                     emberAfRegistrationCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1365          
   1366          /** @brief Registration Start
   1367           *
   1368           * This callback is called when the device joins a network and the registration
   1369           * process should begin.  The application should return EMBER_SUCCESS if the
   1370           * registration process started successfully.  When registration is complete,
   1371           * the application should call emberAfRegistrationCallback with an indication of
   1372           * success or failure.
   1373           *
   1374           */

   \                                 In section .text, align 2, keep-with-next
   1375          EmberStatus emberAfRegistrationStartCallback(void)
   1376          {
   1377            return EMBER_LIBRARY_NOT_PRESENT;
   \                     emberAfRegistrationStartCallback: (+1)
   \   00000000   0x20B5             MOVS     R0,#+181
   \   00000002   0x4770             BX       LR               ;; return
   1378          }
   1379          
   1380          /** @brief Remote Delete Binding Permission
   1381           *
   1382           * This function is called by the framework to request permission to service the
   1383           * remote delete binding request. Return EMBER_SUCCESS to allow request,
   1384           * anything else to disallow request.
   1385           *
   1386           * @param index index to an Ember binding table entry  Ver.: always
   1387           */

   \                                 In section .text, align 2, keep-with-next
   1388          EmberStatus emberAfRemoteDeleteBindingPermissionCallback(int8u index)
   1389          {
   1390            return EMBER_SUCCESS; // default
   \                     emberAfRemoteDeleteBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1391          }
   1392          
   1393          /** @brief Remote Set Binding Permission
   1394           *
   1395           * This function is called by the framework to request permission to service the
   1396           * remote set binding request. Return EMBER_SUCCESS to allow request, anything
   1397           * else to disallow request.
   1398           *
   1399           * @param entry Ember Binding Tablet Entry  Ver.: always
   1400           */

   \                                 In section .text, align 2, keep-with-next
   1401          EmberStatus emberAfRemoteSetBindingPermissionCallback(const EmberBindingTableEntry *entry)
   1402          {
   1403            return EMBER_SUCCESS; // default
   \                     emberAfRemoteSetBindingPermissionCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1404          }
   1405          
   1406          /** @brief Remove From Current App Tasks
   1407           *
   1408           * This function is only useful to sleepy end devices.  This function will
   1409           * remove the passed item from the set of tasks the application has outstanding
   1410           * (e.g. message sent requiring APS acknwoledgement).  This will affect how the
   1411           * application behaves with regard to sleeping and polling.  Removing the item
   1412           * from the list of outstanding tasks may allow the device to sleep longer and
   1413           * poll less frequently.  If there are other outstanding tasks the system may
   1414           * still have to stay away and poll more often.
   1415           *
   1416           * @param tasks   Ver.: always
   1417           */

   \                                 In section .text, align 2, keep-with-next
   1418          void emberAfRemoveFromCurrentAppTasksCallback(EmberAfApplicationTask tasks)
   1419          {
   1420          }
   \                     emberAfRemoveFromCurrentAppTasksCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1421          
   1422          /** @brief Report Attributes
   1423           *
   1424           * This function is called by the application framework when a Report Attributes
   1425           * command is received from an external device.  The application should return
   1426           * TRUE if the message was processed or FALSE if it was not.
   1427           *
   1428           * @param clusterId The cluster identifier of this command.  Ver.: always
   1429           * @param buffer Buffer containing the list of attribute report records.  Ver.:
   1430           * always
   1431           * @param bufLen The length in bytes of the list.  Ver.: always
   1432           */

   \                                 In section .text, align 2, keep-with-next
   1433          boolean emberAfReportAttributesCallback(EmberAfClusterId clusterId,
   1434                                                  int8u *buffer,
   1435                                                  int16u bufLen)
   1436          {
   1437            return FALSE;
   \                     emberAfReportAttributesCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1438          }
   1439          
   1440          /** @brief Reporting Attribute Change
   1441           *
   1442           * This function is called by the framework when an attribute managed by the
   1443           * framework changes.  The application should call this function when an
   1444           * externally-managed attribute changes.  The application should use the change
   1445           * notification to inform its reporting decisions.
   1446           *
   1447           * @param endpoint   Ver.: always
   1448           * @param clusterId   Ver.: always
   1449           * @param attributeId   Ver.: always
   1450           * @param mask   Ver.: always
   1451           * @param manufacturerCode   Ver.: always
   1452           * @param type   Ver.: always
   1453           * @param data   Ver.: always
   1454           */

   \                                 In section .text, align 2, keep-with-next
   1455          void emberAfReportingAttributeChangeCallback(int8u endpoint,
   1456                                                       EmberAfClusterId clusterId,
   1457                                                       EmberAfAttributeId attributeId,
   1458                                                       int8u mask,
   1459                                                       int16u manufacturerCode,
   1460                                                       EmberAfAttributeType type,
   1461                                                       int8u *data)
   1462          {
   1463          }
   \                     emberAfReportingAttributeChangeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1464          
   1465          /** @brief Schedule Poll Event
   1466           *
   1467           * This is called by the framework when it wants to schedule a poll event if the
   1468           * device is a ZigBee End Device (sleepy or non-sleepy).
   1469           *
   1470           */

   \                                 In section .text, align 2, keep-with-next
   1471          void emberAfSchedulePollEventCallback(void)
   1472          {
   1473          }
   \                     emberAfSchedulePollEventCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1474          
   1475          /** @brief Security Init
   1476           *
   1477           * This callback is called by the framework to give the application a chance to
   1478           * modify the security settings of the node during network initialization. 
   1479           * Depending on the context when this callback is called, the pointer to the
   1480           * initial security state may be NULL, which means the initial security state
   1481           * can no longer be modified as the node is already operating on the network.
   1482           *
   1483           * @param state   Ver.: always
   1484           * @param extended   Ver.: always
   1485           * @param trustCenter   Ver.: always
   1486           */

   \                                 In section .text, align 2, keep-with-next
   1487          void emberAfSecurityInitCallback(EmberInitialSecurityState *state,
   1488                                           EmberExtendedSecurityBitmask *extended,
   1489                                           boolean trustCenter)
   1490          {
   1491          }
   \                     emberAfSecurityInitCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1492          
   1493          /** @brief Key establishment Cluster Server Command Received
   1494           *
   1495           * This function is called by the application framework when a client-to-server
   1496           * key establishment command is received but has yet to be handled by the
   1497           * framework code.  This function should return a boolean value indicating
   1498           * whether the command has been handled by the application code and should not
   1499           * be further processed by the framework.
   1500           *
   1501           * @param cmd   Ver.: always
   1502           */

   \                                 In section .text, align 2, keep-with-next
   1503          boolean emberAfKeyEstablishmentClusterServerCommandReceivedCallback(EmberAfClusterCommand *cmd)
   1504          {
   1505            return FALSE;
   \                     emberAfKeyEstablishmentClusterServerCommandReceivedCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1506          }
   1507          
   1508          /** @brief Set Default Poll Control
   1509           *
   1510           * This function will set the default poll control for the current network to
   1511           * control whether or not it can long poll.
   1512           *
   1513           * @param control   Ver.: always
   1514           */

   \                                 In section .text, align 2, keep-with-next
   1515          void emberAfSetDefaultPollControlCallback(EmberAfEventPollControl control)
   1516          {
   1517          }
   \                     emberAfSetDefaultPollControlCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1518          
   1519          /** @brief Set Long Poll Interval Ms
   1520           *
   1521           * This function is only useful to end devices.  This function will set the long
   1522           * poll interval (in milliseconds) for the current network.  This interval is
   1523           * the maximum amount of time a child will wait between polls of its parent when
   1524           * it is not expecting data.
   1525           *
   1526           * @param longPollIntervalMs   Ver.: always
   1527           */

   \                                 In section .text, align 2, keep-with-next
   1528          void emberAfSetLongPollIntervalMsCallback(int32u longPollIntervalMs)
   1529          {
   1530          }
   \                     emberAfSetLongPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1531          
   1532          /** @brief Set Long Poll Interval Qs
   1533           *
   1534           * This function is only useful to end devices.  This function will set the long
   1535           * poll interval (in quarter seconds) for the current network.  This interval is
   1536           * the maximum amount of time a child will wait between polls of its parent when
   1537           * it is not expecting data.
   1538           *
   1539           * @param longPollIntervalQs   Ver.: always
   1540           */

   \                                 In section .text, align 2, keep-with-next
   1541          void emberAfSetLongPollIntervalQsCallback(int32u longPollIntervalQs)
   1542          {
   1543          }
   \                     emberAfSetLongPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1544          
   1545          /** @brief Set Short Poll Interval Ms
   1546           *
   1547           * This function is only useful to sleepy end devices.  This function will set
   1548           * the short poll interval (in milliseconds) for the current network.  This
   1549           * interval is the maximum amount of time a child will wait between polls of its
   1550           * parent when it is expecting data.
   1551           *
   1552           * @param shortPollIntervalMs   Ver.: always
   1553           */

   \                                 In section .text, align 2, keep-with-next
   1554          void emberAfSetShortPollIntervalMsCallback(int16u shortPollIntervalMs)
   1555          {
   1556          }
   \                     emberAfSetShortPollIntervalMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1557          
   1558          /** @brief Set Short Poll Interval Qs
   1559           *
   1560           * This function is only useful to sleepy end devices.  This function will set
   1561           * the short poll interval (in quarter seconds) for the current network.  This
   1562           * interval is the maximum amount of time a child will wait between polls of its
   1563           * parent when it is expecting data.
   1564           *
   1565           * @param shortPollIntervalQs   Ver.: always
   1566           */

   \                                 In section .text, align 2, keep-with-next
   1567          void emberAfSetShortPollIntervalQsCallback(int16u shortPollIntervalQs)
   1568          {
   1569          }
   \                     emberAfSetShortPollIntervalQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1570          
   1571          /** @brief Set Time
   1572           *
   1573           * This callback should be implemented, if the device has access to real time
   1574           * clock, and has an ability to update that clock. The application framework
   1575           * expects to be passed the utcTime which is the number of seconds since the
   1576           * year 2000. Default implementation does nothing. Note: This function used to
   1577           * take time in year, month, day, hour, min, sec. We have changed this to
   1578           * utcTime in order to conserve code space.
   1579           *
   1580           * @param utcTime   Ver.: always
   1581           */

   \                                 In section .text, align 2, keep-with-next
   1582          void emberAfSetTimeCallback(int32u utcTime)
   1583          {
   1584          }
   \                     emberAfSetTimeCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1585          
   1586          /** @brief Set Wake Timeout Bitmask
   1587           *
   1588           * This function is only useful to sleepy end devices.  This function will set
   1589           * the wake timeout bitmask for the current network.  The bitmask determines
   1590           * which tasks will timeout automatically and which tasks require manual removal
   1591           * from the task list.
   1592           *
   1593           * @param tasks   Ver.: always
   1594           */

   \                                 In section .text, align 2, keep-with-next
   1595          void emberAfSetWakeTimeoutBitmaskCallback(EmberAfApplicationTask tasks)
   1596          {
   1597          }
   \                     emberAfSetWakeTimeoutBitmaskCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1598          
   1599          /** @brief Set Wake Timeout Ms
   1600           *
   1601           * This function is only useful to sleepy end devices.  This function will set
   1602           * the wake timeout (in milliseconds) for the current network.  This timeout is
   1603           * the maximum amount of time a child will wait for a task in the wake bitmask
   1604           * to finish.  While waiting, the device will short poll.
   1605           *
   1606           * @param wakeTimeoutMs   Ver.: always
   1607           */

   \                                 In section .text, align 2, keep-with-next
   1608          void emberAfSetWakeTimeoutMsCallback(int16u wakeTimeoutMs)
   1609          {
   1610          }
   \                     emberAfSetWakeTimeoutMsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1611          
   1612          /** @brief Set Wake Timeout Qs
   1613           *
   1614           * This function is only useful to sleepy end devices.  This function will set
   1615           * the wake timeout (in quarter seconds) for the current network.  This timeout
   1616           * is the maximum amount of time a child will wait for a task in the wake
   1617           * bitmask to finish.  While waiting, the device will short poll.
   1618           *
   1619           * @param wakeTimeoutQs   Ver.: always
   1620           */

   \                                 In section .text, align 2, keep-with-next
   1621          void emberAfSetWakeTimeoutQsCallback(int16u wakeTimeoutQs)
   1622          {
   1623          }
   \                     emberAfSetWakeTimeoutQsCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1624          
   1625          /** @brief Start Move
   1626           *
   1627           * This function is called to initiate the process for a device to move (rejoin)
   1628           * to a new parent.
   1629           *
   1630           */

   \                                 In section .text, align 2, keep-with-next
   1631          boolean emberAfStartMoveCallback(void)
   1632          {
   1633            return FALSE;
   \                     emberAfStartMoveCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1634          }
   1635          
   1636          /** @brief Stop Move
   1637           *
   1638           * This function is called to cancel a previously scheduled move (rejoin) to a
   1639           * new parent.
   1640           *
   1641           */

   \                                 In section .text, align 2, keep-with-next
   1642          void emberAfStopMoveCallback(void)
   1643          {
   1644          }
   \                     emberAfStopMoveCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1645          
   1646          /** @brief Trust Center Join
   1647           *
   1648           * This callback is called from within the application framework's
   1649           * implementation of emberTrustCenterJoinHandler or ezspTrustCenterJoinHandler.
   1650           * This callback provides the same arguments passed to the
   1651           * TrustCenterJoinHandler. For more information about the TrustCenterJoinHandler
   1652           * please see documentation included in stack/include/trust-center.h.
   1653           *
   1654           * @param newNodeId   Ver.: always
   1655           * @param newNodeEui64   Ver.: always
   1656           * @param parentOfNewNode   Ver.: always
   1657           * @param status   Ver.: always
   1658           * @param decision   Ver.: always
   1659           */

   \                                 In section .text, align 2, keep-with-next
   1660          void emberAfTrustCenterJoinCallback(EmberNodeId newNodeId,
   1661                                              EmberEUI64 newNodeEui64,
   1662                                              EmberNodeId parentOfNewNode,
   1663                                              EmberDeviceUpdate status,
   1664                                              EmberJoinDecision decision)
   1665          {
   1666          }
   \                     emberAfTrustCenterJoinCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1667          
   1668          /** @brief Trust Center Keepalive Abort
   1669           *
   1670           * This callback is called when the device should abort the trust center
   1671           * keepalive process.
   1672           *
   1673           */

   \                                 In section .text, align 2, keep-with-next
   1674          void emberAfTrustCenterKeepaliveAbortCallback(void)
   1675          {
   1676          }
   \                     emberAfTrustCenterKeepaliveAbortCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1677          
   1678          /** @brief Trust Center Keepalive Update
   1679           *
   1680           * This callback is called when the device finishes registration (successfully
   1681           * or otherwise) and the trust center keepalive process must be updated.  If the
   1682           * keepalive process has not been started, then it is started.  Otherwise if the
   1683           * keepalive is in the process of searching for the TC, it will process the
   1684           * result of that Trust Center search operation.
   1685           *
   1686           * @param registrationComplete   Ver.: always
   1687           */

   \                                 In section .text, align 2, keep-with-next
   1688          void emberAfTrustCenterKeepaliveUpdateCallback(boolean registrationComplete)
   1689          {
   1690          }
   \                     emberAfTrustCenterKeepaliveUpdateCallback: (+1)
   \   00000000   0x4770             BX       LR               ;; return
   1691          
   1692          /** @brief Write Attributes Response
   1693           *
   1694           * This function is called by the application framework when a Write Attributes
   1695           * Response command is received from an external device.  The application should
   1696           * return TRUE if the message was processed or FALSE if it was not.
   1697           *
   1698           * @param clusterId The cluster identifier of this response.  Ver.: always
   1699           * @param buffer Buffer containing the list of write attribute status records. 
   1700           * Ver.: always
   1701           * @param bufLen The length in bytes of the list.  Ver.: always
   1702           */

   \                                 In section .text, align 2, keep-with-next
   1703          boolean emberAfWriteAttributesResponseCallback(EmberAfClusterId clusterId,
   1704                                                         int8u *buffer,
   1705                                                         int16u bufLen)
   1706          {
   1707            return FALSE;
   \                     emberAfWriteAttributesResponseCallback: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1708          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x63 0x61          DC8 "callback-stub.c"
   \              0x6C 0x6C    
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x2D 0x73    
   \              0x74 0x75    
   \              0x62 0x2E    
   \              0x63 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   emberAfAddToCurrentAppTasksCallback
       0   emberAfAllowNetworkWriteAttributeCallback
       0   emberAfClearReportTableCallback
       0   emberAfClusterInitCallback
       0   emberAfClusterSecurityCustomCallback
       0   emberAfConfigureReportingCommandCallback
       0   emberAfConfigureReportingResponseCallback
       0   emberAfDefaultResponseCallback
       0   emberAfDeliveryStatusCallback
       0   emberAfDiscoverAttributesResponseCallback
       0   emberAfDiscoverCommandsGeneratedResponseCallback
       0   emberAfDiscoverCommandsReceivedResponseCallback
       0   emberAfExternalAttributeReadCallback
       0   emberAfExternalAttributeWriteCallback
       0   emberAfGetCurrentAppTasksCallback
       0   emberAfGetCurrentPollControlCallback
       0   emberAfGetCurrentPollIntervalMsCallback
       0   emberAfGetCurrentPollIntervalQsCallback
       0   emberAfGetCurrentTimeCallback
       0   emberAfGetDefaultPollControlCallback
       0   emberAfGetLongPollIntervalMsCallback
       0   emberAfGetLongPollIntervalQsCallback
       0   emberAfGetShortPollIntervalMsCallback
       0   emberAfGetShortPollIntervalQsCallback
       0   emberAfGetWakeTimeoutBitmaskCallback
       0   emberAfGetWakeTimeoutMsCallback
       0   emberAfGetWakeTimeoutQsCallback
       0   emberAfInitiateInterPanKeyEstablishmentCallback
       0   emberAfInitiateKeyEstablishmentCallback
       0   emberAfInitiatePartnerLinkKeyExchangeCallback
       0   emberAfInterPanKeyEstablishmentCallback
       0   emberAfInterpanSendMessageCallback
       0   emberAfKeyEstablishmentCallback
       0   emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       0   emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       0   emberAfMessageSentCallback
       0   emberAfNcpInitCallback
       0   emberAfNetworkKeyUpdateCompleteCallback
       0   emberAfOtaPageRequestServerPolicyCallback
      24   emberAfOtaServerBlockSizeCallback
        24   -> emberAfIsCurrentSecurityProfileSmartEnergy
        24   -> emberAfMaximumApsPayloadLength
       0   emberAfOtaServerImageBlockRequestCallback
       0   emberAfOtaServerIncomingMessageRawCallback
       0   emberAfOtaServerQueryCallback
       0   emberAfOtaServerSendImageNotifyCallback
       0   emberAfOtaServerUpgradeEndRequestCallback
       0   emberAfOtaStorageCloseCallback
         0   -> halInternalAssertFailed
       0   emberAfPartnerLinkKeyExchangeRequestCallback
       0   emberAfPartnerLinkKeyExchangeResponseCallback
       0   emberAfPerformingKeyEstablishmentCallback
       0   emberAfPluginAuroraTunnelingServerDataErrorCallback
       0   emberAfPluginConcentratorBroadcastSentCallback
       0   emberAfPluginCountersRolloverCallback
       0   emberAfPluginEzmodeCommissioningClientCompleteCallback
       0   emberAfPluginGroupsServerGetGroupNameCallback
       0   emberAfPluginGroupsServerGroupNamesSupportedCallback
       0   emberAfPluginGroupsServerSetGroupNameCallback
       0   emberAfPluginIdentifyStartFeedbackCallback
       0   emberAfPluginIdentifyStopFeedbackCallback
       0   emberAfPluginIdleSleepActiveCallback
       0   emberAfPluginIdleSleepOkToIdleCallback
       0   emberAfPluginIdleSleepOkToSleepCallback
       0   emberAfPluginIdleSleepWakeUpCallback
       0   emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       0   emberAfPluginNetworkFindJoinCallback
       0   emberAfPostAttributeChangeCallback
       0   emberAfPostWakeUpCallback
       0   emberAfPreAttributeChangeCallback
       0   emberAfPreCommandReceivedCallback
       0   emberAfPreGoToSleepCallback
       0   emberAfPreMessageReceivedCallback
       0   emberAfPreNcpResetCallback
       0   emberAfPreZDOMessageReceivedCallback
       0   emberAfReadAttributesResponseCallback
       0   emberAfReadReportingConfigurationCommandCallback
       0   emberAfReadReportingConfigurationResponseCallback
       0   emberAfRegistrationAbortCallback
       0   emberAfRegistrationCallback
       0   emberAfRegistrationStartCallback
       0   emberAfRemoteDeleteBindingPermissionCallback
       0   emberAfRemoteSetBindingPermissionCallback
       0   emberAfRemoveFromCurrentAppTasksCallback
       0   emberAfReportAttributesCallback
       0   emberAfReportingAttributeChangeCallback
       0   emberAfSchedulePollEventCallback
       0   emberAfSecurityInitCallback
       0   emberAfSetDefaultPollControlCallback
       0   emberAfSetLongPollIntervalMsCallback
       0   emberAfSetLongPollIntervalQsCallback
       0   emberAfSetShortPollIntervalMsCallback
       0   emberAfSetShortPollIntervalQsCallback
       0   emberAfSetTimeCallback
       0   emberAfSetWakeTimeoutBitmaskCallback
       0   emberAfSetWakeTimeoutMsCallback
       0   emberAfSetWakeTimeoutQsCallback
       0   emberAfStartMoveCallback
       0   emberAfStopMoveCallback
       0   emberAfTrustCenterJoinCallback
       0   emberAfTrustCenterKeepaliveAbortCallback
       0   emberAfTrustCenterKeepaliveUpdateCallback
       0   emberAfWriteAttributesResponseCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?_0
       2  emberAfAddToCurrentAppTasksCallback
       4  emberAfAllowNetworkWriteAttributeCallback
       4  emberAfClearReportTableCallback
       2  emberAfClusterInitCallback
       4  emberAfClusterSecurityCustomCallback
       4  emberAfConfigureReportingCommandCallback
       4  emberAfConfigureReportingResponseCallback
       4  emberAfDefaultResponseCallback
       2  emberAfDeliveryStatusCallback
       4  emberAfDiscoverAttributesResponseCallback
       4  emberAfDiscoverCommandsGeneratedResponseCallback
       4  emberAfDiscoverCommandsReceivedResponseCallback
       4  emberAfExternalAttributeReadCallback
       4  emberAfExternalAttributeWriteCallback
       4  emberAfGetCurrentAppTasksCallback
       4  emberAfGetCurrentPollControlCallback
       4  emberAfGetCurrentPollIntervalMsCallback
       4  emberAfGetCurrentPollIntervalQsCallback
       4  emberAfGetCurrentTimeCallback
       4  emberAfGetDefaultPollControlCallback
       4  emberAfGetLongPollIntervalMsCallback
       4  emberAfGetLongPollIntervalQsCallback
       4  emberAfGetShortPollIntervalMsCallback
       4  emberAfGetShortPollIntervalQsCallback
       4  emberAfGetWakeTimeoutBitmaskCallback
       4  emberAfGetWakeTimeoutMsCallback
       4  emberAfGetWakeTimeoutQsCallback
       4  emberAfInitiateInterPanKeyEstablishmentCallback
       4  emberAfInitiateKeyEstablishmentCallback
       4  emberAfInitiatePartnerLinkKeyExchangeCallback
       4  emberAfInterPanKeyEstablishmentCallback
       4  emberAfInterpanSendMessageCallback
       4  emberAfKeyEstablishmentCallback
       4  emberAfKeyEstablishmentClusterClientCommandReceivedCallback
       4  emberAfKeyEstablishmentClusterServerCommandReceivedCallback
       4  emberAfMessageSentCallback
       2  emberAfNcpInitCallback
       2  emberAfNetworkKeyUpdateCompleteCallback
       4  emberAfOtaPageRequestServerPolicyCallback
      48  emberAfOtaServerBlockSizeCallback
       4  emberAfOtaServerImageBlockRequestCallback
       4  emberAfOtaServerIncomingMessageRawCallback
       4  emberAfOtaServerQueryCallback
       4  emberAfOtaServerSendImageNotifyCallback
       8  emberAfOtaServerUpgradeEndRequestCallback
      12  emberAfOtaStorageCloseCallback
       4  emberAfPartnerLinkKeyExchangeRequestCallback
       2  emberAfPartnerLinkKeyExchangeResponseCallback
       4  emberAfPerformingKeyEstablishmentCallback
       2  emberAfPluginAuroraTunnelingServerDataErrorCallback
       2  emberAfPluginConcentratorBroadcastSentCallback
       2  emberAfPluginCountersRolloverCallback
       2  emberAfPluginEzmodeCommissioningClientCompleteCallback
       2  emberAfPluginGroupsServerGetGroupNameCallback
       4  emberAfPluginGroupsServerGroupNamesSupportedCallback
       2  emberAfPluginGroupsServerSetGroupNameCallback
       2  emberAfPluginIdentifyStartFeedbackCallback
       2  emberAfPluginIdentifyStopFeedbackCallback
       2  emberAfPluginIdleSleepActiveCallback
       4  emberAfPluginIdleSleepOkToIdleCallback
       4  emberAfPluginIdleSleepOkToSleepCallback
       2  emberAfPluginIdleSleepWakeUpCallback
       4  emberAfPluginNetworkFindGetRadioPowerForChannelCallback
       4  emberAfPluginNetworkFindJoinCallback
       2  emberAfPostAttributeChangeCallback
       2  emberAfPostWakeUpCallback
       2  emberAfPreAttributeChangeCallback
       4  emberAfPreCommandReceivedCallback
       4  emberAfPreGoToSleepCallback
       4  emberAfPreMessageReceivedCallback
       2  emberAfPreNcpResetCallback
       4  emberAfPreZDOMessageReceivedCallback
       4  emberAfReadAttributesResponseCallback
       4  emberAfReadReportingConfigurationCommandCallback
       4  emberAfReadReportingConfigurationResponseCallback
       2  emberAfRegistrationAbortCallback
       2  emberAfRegistrationCallback
       4  emberAfRegistrationStartCallback
       4  emberAfRemoteDeleteBindingPermissionCallback
       4  emberAfRemoteSetBindingPermissionCallback
       2  emberAfRemoveFromCurrentAppTasksCallback
       4  emberAfReportAttributesCallback
       2  emberAfReportingAttributeChangeCallback
       2  emberAfSchedulePollEventCallback
       2  emberAfSecurityInitCallback
       2  emberAfSetDefaultPollControlCallback
       2  emberAfSetLongPollIntervalMsCallback
       2  emberAfSetLongPollIntervalQsCallback
       2  emberAfSetShortPollIntervalMsCallback
       2  emberAfSetShortPollIntervalQsCallback
       2  emberAfSetTimeCallback
       2  emberAfSetWakeTimeoutBitmaskCallback
       2  emberAfSetWakeTimeoutMsCallback
       2  emberAfSetWakeTimeoutQsCallback
       4  emberAfStartMoveCallback
       2  emberAfStopMoveCallback
       2  emberAfTrustCenterJoinCallback
       2  emberAfTrustCenterKeepaliveAbortCallback
       2  emberAfTrustCenterKeepaliveUpdateCallback
       4  emberAfWriteAttributesResponseCallback

 
 394 bytes in section .text
 
 394 bytes of CODE memory

Errors: none
Warnings: none
