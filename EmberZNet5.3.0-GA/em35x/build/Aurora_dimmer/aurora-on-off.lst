###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:33:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-on-off\aurora-on-off.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-on-off\aurora-on-off.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-on-off.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-on-off\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-on-off.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-on-off.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-on-off\aurora-on-off.c
      1          // *******************************************************************
      2          // * on-off.c
      3          // *
      4          // *
      5          // * Copyright 2007 by Ember Corporation. All rights reserved.              *80*
      6          // *******************************************************************
      7          
      8          #include "../../include/af.h"
      9          #include "../../util/common.h"
     10          #include "aurora-on-off.h"
     11          
     12          #ifdef EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
     13            #include "../aurora-level-control/aurora-level-control.h"
     14          #endif //EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
     15          
     16          #ifdef EMBER_AF_PLUGIN_SCENES
     17            #include "../scenes/scenes.h"
     18          #endif //EMBER_AF_PLUGIN_SCENES
     19          
     20          #ifdef EMBER_AF_PLUGIN_ZLL_ON_OFF_SERVER
     21            #include "../zll-on-off-server/zll-on-off-server.h"
     22          #endif
     23          
     24          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
     25            #include "../zll-level-control-server/zll-level-control-server.h"
     26          #endif
     27          

   \                                 In section .text, align 2, keep-with-next
     28          EmberAfStatus emberAfOnOffClusterSetValueCallback(int8u endpoint,
     29                                                            int8u command,
     30                                                            boolean initiatedByLevelChange)
     31          {
   \                     emberAfOnOffClusterSetValueCallback: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460E             MOV      R6,R1
   \   00000006   0x4615             MOV      R5,R2
   \   00000008   0xB085             SUB      SP,SP,#+20
     32            EmberAfStatus status;
     33            boolean currentValue, newValue;
     34          
     35            emberAfOnOffClusterPrintln("On/Off set value: %x %x", endpoint, command);
   \   0000000A   0x4633             MOV      R3,R6
   \   0000000C   0x4622             MOV      R2,R4
   \   0000000E   0x.... 0x....      ADR.W    R1,?_0
   \   00000012   0x2010             MOVS     R0,#+16
   \   00000014   0x.... 0x....      BL       emberAfPrintln
     36          
     37            // read current on/off value
     38            status = emberAfReadAttribute(endpoint,
     39                                          ZCL_ON_OFF_CLUSTER_ID,
     40                                          ZCL_ON_OFF_ATTRIBUTE_ID,
     41                                          CLUSTER_MASK_SERVER,
     42                                          (int8u *)&currentValue,
     43                                          sizeof(currentValue),
     44                                          NULL); // data type
   \   00000018   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_3: (+1)
   \   0000001C   0xF10D 0x000D      ADD      R0,SP,#+13
   \   00000020   0x9000             STR      R0,[SP, #+0]
   \   00000022   0x2106             MOVS     R1,#+6
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       emberAfReadAttribute
   \   0000002A   0x0007             MOVS     R7,R0
     45            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000002C   0xD007             BEQ.N    ??emberAfOnOffClusterSetValueCallback_0
     46              emberAfOnOffClusterPrintln("ERR: reading on/off %x", status);
   \   0000002E   0x463A             MOV      R2,R7
   \   00000030   0x.... 0x....      ADR.W    R1,?_1
   \   00000034   0x2010             MOVS     R0,#+16
   \   00000036   0x.... 0x....      BL       emberAfPrintln
     47              return status;
   \   0000003A   0x4638             MOV      R0,R7
   \   0000003C   0xE044             B.N      ??emberAfOnOffClusterSetValueCallback_1
     48            }
     49          
     50            // if the value is already what we want to set it to then do nothing
     51            if ((!currentValue && command == ZCL_OFF_COMMAND_ID) ||
     52                (currentValue && command == ZCL_ON_COMMAND_ID)) {
   \                     ??emberAfOnOffClusterSetValueCallback_0: (+1)
   \   0000003E   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   00000042   0x4330             ORRS     R0,R6,R0
   \   00000044   0xD004             BEQ.N    ??emberAfOnOffClusterSetValueCallback_2
   \   00000046   0xF89D 0x000D      LDRB     R0,[SP, #+13]
   \   0000004A   0xB138             CBZ.N    R0,??emberAfOnOffClusterSetValueCallback_3
   \   0000004C   0x2E01             CMP      R6,#+1
   \   0000004E   0xD107             BNE.N    ??emberAfOnOffClusterSetValueCallback_4
     53              emberAfOnOffClusterPrintln("On/off already set to new value");
   \                     ??emberAfOnOffClusterSetValueCallback_2: (+1)
   \   00000050   0x.... 0x....      ADR.W    R1,?_2
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0x.... 0x....      BL       emberAfPrintln
     54              return EMBER_ZCL_STATUS_SUCCESS;
   \   0000005A   0xE034             B.N      ??emberAfOnOffClusterSetValueCallback_5
     55            }
   \                     ??emberAfOnOffClusterSetValueCallback_3: (+1)
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xE000             B.N      ??emberAfOnOffClusterSetValueCallback_6
   \                     ??emberAfOnOffClusterSetValueCallback_4: (+1)
   \   00000060   0x2000             MOVS     R0,#+0
   \                     ??emberAfOnOffClusterSetValueCallback_6: (+1)
   \   00000062   0xF88D 0x000C      STRB     R0,[SP, #+12]
     56          
     57            // we either got a toggle, or an on when off, or an off when on,
     58            // so we need to swap the value
     59            newValue = !currentValue;
     60            emberAfOnOffClusterPrintln("Toggle on/off from %x to %x", currentValue, newValue);
   \   00000066   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \   0000006A   0xF89D 0x200D      LDRB     R2,[SP, #+13]
   \   0000006E   0x.... 0x....      ADR.W    R1,?_3
   \   00000072   0x2010             MOVS     R0,#+16
   \   00000074   0x.... 0x....      BL       emberAfPrintln
     61          
     62            // write the new on/off value
     63            status = emberAfWriteAttribute(endpoint,
     64                                           ZCL_ON_OFF_CLUSTER_ID,
     65                                           ZCL_ON_OFF_ATTRIBUTE_ID,
     66                                           CLUSTER_MASK_SERVER,
     67                                           (int8u *)&newValue,
     68                                           ZCL_BOOLEAN_ATTRIBUTE_TYPE);
   \   00000078   0x2010             MOVS     R0,#+16
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   \   0000007C   0x2340             MOVS     R3,#+64
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x2106             MOVS     R1,#+6
   \   00000086   0x4620             MOV      R0,R4
   \   00000088   0x.... 0x....      BL       emberAfWriteAttribute
   \   0000008C   0x0006             MOVS     R6,R0
     69            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000008E   0xD007             BEQ.N    ??emberAfOnOffClusterSetValueCallback_7
     70              emberAfOnOffClusterPrintln("ERR: writing on/off %x", status);
   \   00000090   0x4632             MOV      R2,R6
   \   00000092   0x.... 0x....      ADR.W    R1,?_4
   \   00000096   0x2010             MOVS     R0,#+16
   \   00000098   0x.... 0x....      BL       emberAfPrintln
     71              return status;
   \   0000009C   0x4630             MOV      R0,R6
   \   0000009E   0xE013             B.N      ??emberAfOnOffClusterSetValueCallback_1
     72            }
     73            
     74            //GB: Dont need this here - level control tick will pick up the new current level attr value
     75            // and change the level/colour  emberAfOnOffClusterSetNewValueCallback(newValue);
     76          
     77          #ifdef EMBER_AF_PLUGIN_ZLL_ON_OFF_SERVER
     78            if (initiatedByLevelChange) {
     79              emberAfPluginZllOnOffServerLevelControlZllExtensions(endpoint);
     80            }
     81          #endif
     82          
     83            if (!initiatedByLevelChange
     84                && emberAfContainsServer(endpoint, ZCL_LEVEL_CONTROL_CLUSTER_ID)) {
   \                     ??emberAfOnOffClusterSetValueCallback_7: (+1)
   \   000000A0   0xB94D             CBNZ.N   R5,??emberAfOnOffClusterSetValueCallback_8
   \   000000A2   0x2108             MOVS     R1,#+8
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       emberAfContainsServer
   \   000000AA   0xB120             CBZ.N    R0,??emberAfOnOffClusterSetValueCallback_8
     85              emberAfOnOffClusterLevelControlEffectCallback(endpoint, 
     86                                                            newValue);
   \   000000AC   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       emberAfOnOffClusterLevelControlEffectCallback
     87            }
     88          
     89            // the scene has been changed (the value of on/off has changed) so
     90            // the current scene as descibed in the attribute table is invalid,
     91            // so mark it as invalid (just writes the valid/invalid attribute)
     92            if (emberAfContainsServer(endpoint, ZCL_SCENES_CLUSTER_ID)) {
   \                     ??emberAfOnOffClusterSetValueCallback_8: (+1)
   \   000000B6   0x2105             MOVS     R1,#+5
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       emberAfContainsServer
   \   000000BE   0xB110             CBZ.N    R0,??emberAfOnOffClusterSetValueCallback_5
     93              emberAfScenesClusterMakeInvalidCallback(endpoint);
   \   000000C0   0x4620             MOV      R0,R4
   \   000000C2   0x.... 0x....      BL       emberAfScenesClusterMakeInvalidCallback
     94            }
     95          
     96            // The returned status is based solely on the On/Off cluster.  Errors in the
     97            // Level Control and/or Scenes cluster are ignored.
     98            return EMBER_ZCL_STATUS_SUCCESS;
   \                     ??emberAfOnOffClusterSetValueCallback_5: (+1)
   \   000000C6   0x2000             MOVS     R0,#+0
   \                     ??emberAfOnOffClusterSetValueCallback_1: (+1)
   \   000000C8   0xB005             ADD      SP,SP,#+20
   \   000000CA   0xBDF0             POP      {R4-R7,PC}       ;; return
     99          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9002             STR      R0,[SP, #+8]
   \   00000004   0x2340             MOVS     R3,#+64
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9001             STR      R0,[SP, #+4]
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x4770             BX       LR
    100          

   \                                 In section .text, align 2, keep-with-next
    101          boolean emberAfOnOffClusterOffCallback(void)
    102          {
   \                     emberAfOnOffClusterOffCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            EmberAfStatus status = emberAfOnOffClusterSetValueCallback(emberAfCurrentEndpoint(),
    104                                  ZCL_OFF_COMMAND_ID,
    105                                  FALSE);
   \   00000002   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x....             B.N      ?Subroutine0
    106            
    107          #ifdef EMBER_AF_PLUGIN_ZLL_ON_OFF_SERVER
    108            if (status == EMBER_ZCL_STATUS_SUCCESS) 
    109            {
    110              emberAfPluginZllOnOffServerOffZllExtensions(emberAfCurrentCommand());
    111            }
    112          #endif
    113            
    114            emberAfSendImmediateDefaultResponse(status);
    115            
    116            return TRUE;
    117          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x.... 0x....      BL       emberAfOnOffClusterSetValueCallback
   \   00000004   0x.... 0x....      BL       emberAfSendImmediateDefaultResponse
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable8
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x7940             LDRB     R0,[R0, #+5]
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x4770             BX       LR
    118          

   \                                 In section .text, align 2, keep-with-next
    119          boolean emberAfOnOffClusterOnCallback(void)
    120          {
   \                     emberAfOnOffClusterOnCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    121            EmberAfStatus status = emberAfOnOffClusterSetValueCallback(emberAfCurrentEndpoint(),
    122                                  ZCL_ON_COMMAND_ID,
    123                                  FALSE);
   \   00000002   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1: (+1)
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008                      REQUIRE ?Subroutine0
   \   00000008                      ;; // Fall through to label ?Subroutine0
    124          
    125          #ifdef EMBER_AF_PLUGIN_ZLL_ON_OFF_SERVER
    126            if (status == EMBER_ZCL_STATUS_SUCCESS) 
    127            {
    128              emberAfPluginZllOnOffServerOnZllExtensions(emberAfCurrentCommand());
    129            }
    130          #endif
    131            
    132            emberAfSendImmediateDefaultResponse(status);
    133            
    134            return TRUE;
    135          }
    136          

   \                                 In section .text, align 2, keep-with-next
    137          boolean emberAfOnOffClusterToggleCallback(void)
    138          {
   \                     emberAfOnOffClusterToggleCallback: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    139            EmberAfStatus status = emberAfOnOffClusterSetValueCallback(emberAfCurrentEndpoint(),
    140                                  ZCL_TOGGLE_COMMAND_ID,
    141                                  FALSE);
   \   00000002   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2: (+1)
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x....             B.N      ?Subroutine0
    142          #ifdef EMBER_AF_PLUGIN_ZLL_ON_OFF_SERVER
    143            if (status == EMBER_ZCL_STATUS_SUCCESS) 
    144            {
    145              emberAfPluginZllOnOffServerToggleZllExtensions(emberAfCurrentCommand());
    146            }
    147          #endif
    148            
    149            emberAfSendImmediateDefaultResponse(status);
    150            
    151            return TRUE;
    152          }
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void emberAfOnOffClusterLevelControlEffectCallback(int8u endpoint,
    155                                                             boolean newValue)
    156          {
   \                     emberAfOnOffClusterLevelControlEffectCallback: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x4604             MOV      R4,R0
    157            int8u currentLevel, newLevel = 0xFF;
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   0000000C   0x460D             MOV      R5,R1
    158            int16u transitionTime = 0xFFFF;
   \   0000000E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000012   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    159            boolean onLevel = FALSE;
    160            int8u minLevel=0x00;
    161            EmberAfStatus status;
    162          
    163          #ifdef EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER
    164            minLevel = EMBER_AF_PLUGIN_ZLL_LEVEL_CONTROL_SERVER_MINIMUM_LEVEL;
    165          #elif defined(EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL)
    166            minLevel = EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL_MINIMUM_LEVEL;
    167          #endif
    168          
    169          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_OFF_TRANSITION_TIME_ATTRIBUTE
    170            status = emberAfReadServerAttribute(emberAfCurrentEndpoint(),
    171                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    172                                                ZCL_ON_OFF_TRANSITION_TIME_ATTRIBUTE_ID,
    173                                                (int8u *)&transitionTime,
    174                                                sizeof(transitionTime));
   \   00000016   0xF10D 0x030E      ADD      R3,SP,#+14
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x2210             MOVS     R2,#+16
   \   00000020   0x....             LDR.N    R0,??DataTable8
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x7940             LDRB     R0,[R0, #+5]
   \   00000028   0x2108             MOVS     R1,#+8
   \   0000002A   0x.... 0x....      BL       emberAfReadServerAttribute
    175            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000002E   0xB128             CBZ.N    R0,??emberAfOnOffClusterLevelControlEffectCallback_0
    176              emberAfLevelControlClusterPrintln("ERR: reading on/off transition time %x",
    177                                                status);
   \   00000030   0x4602             MOV      R2,R0
   \   00000032   0x.... 0x....      ADR.W    R1,?_5
   \   00000036   0x2020             MOVS     R0,#+32
   \   00000038   0x.... 0x....      BL       emberAfPrintln
    178            }
    179          #endif
    180              
    181          #ifdef ZCL_USING_LEVEL_CONTROL_CLUSTER_ON_LEVEL_ATTRIBUTE
    182            onLevel = TRUE;
    183          #endif
    184          
    185            if (onLevel) 
    186            {
    187              status = emberAfReadAttribute(endpoint,
    188                                            ZCL_LEVEL_CONTROL_CLUSTER_ID,
    189                                            ZCL_ON_LEVEL_ATTRIBUTE_ID,
    190                                            CLUSTER_MASK_SERVER,
    191                                            (int8u *)&newLevel,
    192                                            sizeof(newLevel),
    193                                            NULL); // data type
    194              if (status != EMBER_ZCL_STATUS_SUCCESS) 
    195              {
    196                emberAfOnOffClusterPrintln("ERR: reading current level %x", status);
    197              } 
    198              else 
    199              {
    200                if (newLevel == 0xFF) 
    201                {
    202                  onLevel = FALSE;
    203                }
    204              }
    205            }
    206          
    207            status = emberAfReadAttribute(endpoint,
    208                                          ZCL_LEVEL_CONTROL_CLUSTER_ID,
    209                                          ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    210                                          CLUSTER_MASK_SERVER,
    211                                          (int8u *)&currentLevel,
    212                                          sizeof(currentLevel),
    213                                          NULL); // data type
   \                     ??emberAfOnOffClusterLevelControlEffectCallback_0: (+1)
   \   0000003C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000040   0xA803             ADD      R0,SP,#+12
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \   00000044   0x2108             MOVS     R1,#+8
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       emberAfReadAttribute
   \   0000004C   0x0002             MOVS     R2,R0
    214            if (status != EMBER_ZCL_STATUS_SUCCESS) {
   \   0000004E   0xD005             BEQ.N    ??emberAfOnOffClusterLevelControlEffectCallback_1
    215              emberAfOnOffClusterPrintln("ERR: reading current level %x", status);
   \   00000050   0x.... 0x....      ADR.W    R1,?_6
   \   00000054   0x2010             MOVS     R0,#+16
   \   00000056   0x.... 0x....      BL       emberAfPrintln
   \   0000005A   0xE01D             B.N      ??emberAfOnOffClusterLevelControlEffectCallback_2
    216            } else {
    217              // Off
    218              if (!newValue) {
   \                     ??emberAfOnOffClusterLevelControlEffectCallback_1: (+1)
   \   0000005C   0xB935             CBNZ.N   R5,??emberAfOnOffClusterLevelControlEffectCallback_3
    219                if (onLevel) {
    220          #ifdef EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
    221                  emAfPluginLevelControlClusterOnOffEffectHandler(ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID,
    222                                                                  newLevel, 
    223                                                                  TRUE,
    224                                                                  transitionTime);
    225          #endif
    226                }
    227                else {
    228          #ifdef EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
    229                  emAfPluginLevelControlClusterOnOffEffectHandler(ZCL_MOVE_TO_LEVEL_WITH_ON_OFF_COMMAND_ID,
    230                                                                  currentLevel,
    231                                                                  TRUE,
    232                                                                  transitionTime);
   \   0000005E   0xF8BD 0x300E      LDRH     R3,[SP, #+14]
   \   00000062   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000066   0x2201             MOVS     R2,#+1
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0xE013             B.N      ??emberAfOnOffClusterLevelControlEffectCallback_4
    233          #endif
    234                }
    235              }
    236              // On 
    237              else {
    238                newLevel = minLevel;
   \                     ??emberAfOnOffClusterLevelControlEffectCallback_3: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF88D 0x000D      STRB     R0,[SP, #+13]
    239                status = emberAfWriteAttribute(endpoint,
    240                                               ZCL_LEVEL_CONTROL_CLUSTER_ID,
    241                                               ZCL_CURRENT_LEVEL_ATTRIBUTE_ID,
    242                                               CLUSTER_MASK_SERVER,
    243                                               (int8u *)&newLevel,
    244                                               ZCL_INT8U_ATTRIBUTE_TYPE);
   \   00000072   0x2340             MOVS     R3,#+64
   \   00000074   0x2020             MOVS     R0,#+32
   \   00000076   0x9001             STR      R0,[SP, #+4]
   \   00000078   0x2200             MOVS     R2,#+0
   \   0000007A   0xF10D 0x000D      ADD      R0,SP,#+13
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \   00000080   0x2108             MOVS     R1,#+8
   \   00000082   0x4620             MOV      R0,R4
   \   00000084   0x.... 0x....      BL       emberAfWriteAttribute
    245                if (onLevel) {
    246                  status = emberAfReadAttribute(endpoint,
    247                                                ZCL_LEVEL_CONTROL_CLUSTER_ID,
    248                                                ZCL_ON_LEVEL_ATTRIBUTE_ID,
    249                                                CLUSTER_MASK_SERVER,
    250                                                (int8u *)&newLevel,
    251                                                sizeof(newLevel),
    252                                                NULL); // data type
    253                  if (status != EMBER_ZCL_STATUS_SUCCESS) {
    254                    emberAfOnOffClusterPrintln("ERR: reading on level %x", status);
    255                  }
    256                  else {
    257          #ifdef EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
    258                    emAfPluginLevelControlClusterOnOffEffectHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID, 
    259                                                                    newLevel, 
    260                                                                    FALSE,
    261                                                                    transitionTime);
    262          #endif
    263                  }
    264                } else {
    265          #ifdef EMBER_AF_PLUGIN_AURORA_LEVEL_CONTROL
    266                  emAfPluginLevelControlClusterOnOffEffectHandler(ZCL_MOVE_TO_LEVEL_COMMAND_ID,
    267                                                                  currentLevel,
    268                                                                  FALSE,
    269                                                                  transitionTime);
   \   00000088   0xF8BD 0x300E      LDRH     R3,[SP, #+14]
   \   0000008C   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x2000             MOVS     R0,#+0
   \                     ??emberAfOnOffClusterLevelControlEffectCallback_4: (+1)
   \   00000094   0x.... 0x....      BL       emAfPluginLevelControlClusterOnOffEffectHandler
    270          #endif
    271                }
    272              }
    273            }
    274          }
   \                     ??emberAfOnOffClusterLevelControlEffectCallback_2: (+1)
   \   00000098   0xB005             ADD      SP,SP,#+20
   \   0000009A   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     emAfCurrentCommand

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x4F 0x6E          DC8 "On/Off set value: %x %x"
   \              0x2F 0x4F    
   \              0x66 0x66    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x3A 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x45 0x52          DC8 "ERR: reading on/off %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x4F 0x6E          DC8 "On/off already set to new value"
   \              0x2F 0x6F    
   \              0x66 0x66    
   \              0x20 0x61    
   \              0x6C 0x72    
   \              0x65 0x61    
   \              0x64 0x79    
   \              0x20 0x73    
   \              0x65 0x74    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x6E 0x65    
   \              0x77 0x20    
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x54 0x6F          DC8 "Toggle on/off from %x to %x"
   \              0x67 0x67    
   \              0x6C 0x65    
   \              0x20 0x6F    
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x66 0x72    
   \              0x6F 0x6D    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x74 0x6F    
   \              0x20 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x45 0x52          DC8 "ERR: writing on/off %x"
   \              0x52 0x3A    
   \              0x20 0x77    
   \              0x72 0x69    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x45 0x52          DC8 "ERR: reading on/off transition time %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x6F    
   \              0x6E 0x2F    
   \              0x6F 0x66    
   \              0x66 0x20    
   \              0x74 0x72    
   \              0x61 0x6E    
   \              0x73 0x69    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x45 0x52          DC8 "ERR: reading current level %x"
   \              0x52 0x3A    
   \              0x20 0x72    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x20 0x63    
   \              0x75 0x72    
   \              0x72 0x65    
   \              0x6E 0x74    
   \              0x20 0x6C    
   \              0x65 0x76    
   \              0x65 0x6C    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   emberAfOnOffClusterLevelControlEffectCallback
        32   -> emAfPluginLevelControlClusterOnOffEffectHandler
        32   -> emberAfPrintln
        32   -> emberAfReadAttribute
        32   -> emberAfReadServerAttribute
        32   -> emberAfWriteAttribute
       8   emberAfOnOffClusterOffCallback
         8   -> emberAfOnOffClusterSetValueCallback
         8   -> emberAfSendImmediateDefaultResponse
       8   emberAfOnOffClusterOnCallback
         8   -> emberAfOnOffClusterSetValueCallback
         8   -> emberAfSendImmediateDefaultResponse
      40   emberAfOnOffClusterSetValueCallback
        40   -> emberAfContainsServer
        40   -> emberAfOnOffClusterLevelControlEffectCallback
        40   -> emberAfPrintln
        40   -> emberAfReadAttribute
        40   -> emberAfScenesClusterMakeInvalidCallback
        40   -> emberAfWriteAttribute
       8   emberAfOnOffClusterToggleCallback
         8   -> emberAfOnOffClusterSetValueCallback
         8   -> emberAfSendImmediateDefaultResponse


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
      12  ?Subroutine0
      12  ?Subroutine1
      14  ?Subroutine2
      24  ?_0
      24  ?_1
      32  ?_2
      28  ?_3
      24  ?_4
      40  ?_5
      32  ?_6
     156  emberAfOnOffClusterLevelControlEffectCallback
      10  emberAfOnOffClusterOffCallback
       8  emberAfOnOffClusterOnCallback
     204  emberAfOnOffClusterSetValueCallback
      10  emberAfOnOffClusterToggleCallback

 
 634 bytes in section .text
 
 634 bytes of CODE memory

Errors: none
Warnings: none
