###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Oct/2016  17:33:55
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-conversion.c
#    Command line =  
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-conversion.c"
#        -D
#        "GENERATED_TOKEN_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer_tokens.h\""
#        -D "ZA_GENERATED_HEADER=\"app/builder/Aurora_dimmer/Aurora_dimmer.h\""
#        -D APP_BTL -D "BOARD_HEADER=\"../../../16.10.14
#        v17/EmberZNet5.3.0-GA/em35x/app/builder/Aurora_dimmer/Aurora_dimmer_board.h\""
#        -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\"" -D CORTEXM3
#        -D CORTEXM3_EMBER_MICRO -D CORTEXM3_EM357 -D PHY_EM3XX -D
#        "APPLICATION_TOKEN_HEADER=\"app/framework/util/tokens.h\"" -D
#        "CONFIGURATION_HEADER=\"app/framework/util/config.h\"" -D
#        "ATTRIBUTE_STORAGE_CONFIGURATION=\"app/builder/Aurora_dimmer/Aurora_dimmer_endpoint_config.h\""
#        -D "__SOURCEFILE__=\"aurora-colour-conversion.c\"" -lC
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --diag_suppress Pa050 -o
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\app\framework\include\"
#        -I "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\stack\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\" -I
#        "C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\app\builder\Aurora_dimmer\..\..\..\..\..\..\16.09.23
#        Fixedonoff\EmberZNet5.3.0-GA\em35x\hal\..\" -Ohz --use_c++_inline
#    List file    =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-colour-conversion.lst
#    Object file  =  
#        C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH
#        ETRX357\16.10.14
#        v17\EmberZNet5.3.0-GA\em35x\build\Aurora_dimmer\aurora-colour-conversion.o
#
###############################################################################

C:\Users\matthew.shing\Documents\Projects\AONE ZigBee Dimmer\AUCH ETRX357\16.10.14 v17\EmberZNet5.3.0-GA\em35x\app\framework\plugin\aurora-colour-control\aurora-colour-conversion.c
      1          /******************************************************************************
      2            Copyright (c) 2010 Ryan Juckett
      3            http://www.ryanjuckett.com/
      4            
      5            This software is provided 'as-is', without any express or implied
      6            warranty. In no event will the authors be held liable for any damages
      7            arising from the use of this software.
      8            
      9            Permission is granted to anyone to use this software for any purpose,
     10            including commercial applications, and to alter it and redistribute it
     11            freely, subject to the following restrictions:
     12            
     13            1. The origin of this software must not be misrepresented; you must not
     14               claim that you wrote the original software. If you use this software
     15               in a product, an acknowledgment in the product documentation would be
     16               appreciated but is not required.
     17            
     18            2. Altered source versions must be plainly marked as such, and must not be
     19               misrepresented as being the original software.
     20            
     21            3. This notice may not be removed or altered from any source
     22               distribution.
     23          ******************************************************************************/
     24          #include "app/framework/include/af.h"
     25          #include "aurora-colour-conversion.h"
     26          #include "aurora-colour-conversion-table.h"

   \                                 In section .text, align 4, keep-with-next
   \   __absolute struct <unnamed> const GammaConversionTable[256]
   \                     GammaConversionTable:
   \   00000000   0x38D1B717         DC32 38D1B717H, 0H
   \              0x00000000   
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x3B7FFBCE         DC32 3B7FFBCEH, 3D4B71B9H
   \              0x3D4B71B9   
   \   00000014   0x0C 0x00          DC8 12, 0, 0, 0
   \              0x00 0x00    
   \   00000018   0x3BFFFBCE         DC32 3BFFFBCEH, 3DAD801BH
   \              0x3DAD801B   
   \   00000020   0x15 0x00          DC8 21, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x3C40010C         DC32 3C40010CH, 3DE22A2CH
   \              0x3DE22A2C   
   \   0000002C   0x1C 0x00          DC8 28, 0, 0, 0
   \              0x00 0x00    
   \   00000030   0x3C800000         DC32 3C800000H, 3E06A7ADH
   \              0x3E06A7AD   
   \   00000038   0x21 0x00          DC8 33, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x3C9FFF7A         DC32 3C9FFF7AH, 3E19435BH
   \              0x3E19435B   
   \   00000044   0x26 0x00          DC8 38, 0, 0, 0
   \              0x00 0x00    
   \   00000048   0x3CC0010C         DC32 3CC0010CH, 3E29CE07H
   \              0x3E29CE07   
   \   00000050   0x2A 0x00          DC8 42, 0, 0, 0
   \              0x00 0x00    
   \   00000054   0x3CE00086         DC32 3CE00086H, 3E38CE2DH
   \              0x3E38CE2D   
   \   0000005C   0x2E 0x00          DC8 46, 0, 0, 0
   \              0x00 0x00    
   \   00000060   0x3D000000         DC32 3D000000H, 3E469A0BH
   \              0x3E469A0B   
   \   00000068   0x31 0x00          DC8 49, 0, 0, 0
   \              0x00 0x00    
   \   0000006C   0x3D0FFFBD         DC32 3D0FFFBDH, 3E536C9CH
   \              0x3E536C9C   
   \   00000074   0x34 0x00          DC8 52, 0, 0, 0
   \              0x00 0x00    
   \   00000078   0x3D1FFF7A         DC32 3D1FFF7AH, 3E5F709BH
   \              0x3E5F709B   
   \   00000080   0x37 0x00          DC8 55, 0, 0, 0
   \              0x00 0x00    
   \   00000084   0x3D300043         DC32 3D300043H, 3E6AC604H
   \              0x3E6AC604   
   \   0000008C   0x3A 0x00          DC8 58, 0, 0, 0
   \              0x00 0x00    
   \   00000090   0x3D400000         DC32 3D400000H, 3E758538H
   \              0x3E758538   
   \   00000098   0x3D 0x00          DC8 61, 0, 0, 0
   \              0x00 0x00    
   \   0000009C   0x3D4FFFBD         DC32 3D4FFFBDH, 3E7FC1DFH
   \              0x3E7FC1DF   
   \   000000A4   0x3F 0x00          DC8 63, 0, 0, 0
   \              0x00 0x00    
   \   000000A8   0x3D600086         DC32 3D600086H, 3E84C597H
   \              0x3E84C597   
   \   000000B0   0x42 0x00          DC8 66, 0, 0, 0
   \              0x00 0x00    
   \   000000B4   0x3D700043         DC32 3D700043H, 3E897721H
   \              0x3E897721   
   \   000000BC   0x44 0x00          DC8 68, 0, 0, 0
   \              0x00 0x00    
   \   000000C0   0x3D800000         DC32 3D800000H, 3E8DFACAH
   \              0x3E8DFACA   
   \   000000C8   0x46 0x00          DC8 70, 0, 0, 0
   \              0x00 0x00    
   \   000000CC   0x3D87FFDE         DC32 3D87FFDEH, 3E925508H
   \              0x3E925508   
   \   000000D4   0x48 0x00          DC8 72, 0, 0, 0
   \              0x00 0x00    
   \   000000D8   0x3D8FFFBD         DC32 3D8FFFBDH, 3E9689A9H
   \              0x3E9689A9   
   \   000000E0   0x4A 0x00          DC8 74, 0, 0, 0
   \              0x00 0x00    
   \   000000E4   0x3D980022         DC32 3D980022H, 3E9A9BF1H
   \              0x3E9A9BF1   
   \   000000EC   0x4D 0x00          DC8 77, 0, 0, 0
   \              0x00 0x00    
   \   000000F0   0x3DA00000         DC32 3DA00000H, 3E9E8EC5H
   \              0x3E9E8EC5   
   \   000000F8   0x4E 0x00          DC8 78, 0, 0, 0
   \              0x00 0x00    
   \   000000FC   0x3DA7FFDE         DC32 3DA7FFDEH, 3EA2645EH
   \              0x3EA2645E   
   \   00000104   0x50 0x00          DC8 80, 0, 0, 0
   \              0x00 0x00    
   \   00000108   0x3DB00043         DC32 3DB00043H, 3EA61F19H
   \              0x3EA61F19   
   \   00000110   0x52 0x00          DC8 82, 0, 0, 0
   \              0x00 0x00    
   \   00000114   0x3DB80022         DC32 3DB80022H, 3EA9C0ECH
   \              0x3EA9C0EC   
   \   0000011C   0x54 0x00          DC8 84, 0, 0, 0
   \              0x00 0x00    
   \   00000120   0x3DC00000         DC32 3DC00000H, 3EAD4B6AH
   \              0x3EAD4B6A   
   \   00000128   0x56 0x00          DC8 86, 0, 0, 0
   \              0x00 0x00    
   \   0000012C   0x3DC7FFDE         DC32 3DC7FFDEH, 3EB0C027H
   \              0x3EB0C027   
   \   00000134   0x58 0x00          DC8 88, 0, 0, 0
   \              0x00 0x00    
   \   00000138   0x3DCFFFBD         DC32 3DCFFFBDH, 3EB42071H
   \              0x3EB42071   
   \   00000140   0x59 0x00          DC8 89, 0, 0, 0
   \              0x00 0x00    
   \   00000144   0x3DD80022         DC32 3DD80022H, 3EB76D76H
   \              0x3EB76D76   
   \   0000014C   0x5B 0x00          DC8 91, 0, 0, 0
   \              0x00 0x00    
   \   00000150   0x3DE00000         DC32 3DE00000H, 3EBAA887H
   \              0x3EBAA887   
   \   00000158   0x5C 0x00          DC8 92, 0, 0, 0
   \              0x00 0x00    
   \   0000015C   0x3DE7FFDE         DC32 3DE7FFDEH, 3EBDD28DH
   \              0x3EBDD28D   
   \   00000164   0x5E 0x00          DC8 94, 0, 0, 0
   \              0x00 0x00    
   \   00000168   0x3DF00043         DC32 3DF00043H, 3EC0EC74H
   \              0x3EC0EC74   
   \   00000170   0x60 0x00          DC8 96, 0, 0, 0
   \              0x00 0x00    
   \   00000174   0x3DF80022         DC32 3DF80022H, 3EC3F706H
   \              0x3EC3F706   
   \   0000017C   0x61 0x00          DC8 97, 0, 0, 0
   \              0x00 0x00    
   \   00000180   0x3E000000         DC32 3E000000H, 3EC6F30AH
   \              0x3EC6F30A   
   \   00000188   0x63 0x00          DC8 99, 0, 0, 0
   \              0x00 0x00    
   \   0000018C   0x3E03FFEF         DC32 3E03FFEFH, 3EC9E14CH
   \              0x3EC9E14C   
   \   00000194   0x64 0x00          DC8 100, 0, 0, 0
   \              0x00 0x00    
   \   00000198   0x3E07FFDE         DC32 3E07FFDEH, 3ECCC250H
   \              0x3ECCC250   
   \   000001A0   0x65 0x00          DC8 101, 0, 0, 0
   \              0x00 0x00    
   \   000001A4   0x3E0C0011         DC32 3E0C0011H, 3ECF96E1H
   \              0x3ECF96E1   
   \   000001AC   0x67 0x00          DC8 103, 0, 0, 0
   \              0x00 0x00    
   \   000001B0   0x3E100000         DC32 3E100000H, 3ED25F85H
   \              0x3ED25F85   
   \   000001B8   0x68 0x00          DC8 104, 0, 0, 0
   \              0x00 0x00    
   \   000001BC   0x3E13FFEF         DC32 3E13FFEFH, 3ED51C9FH
   \              0x3ED51C9F   
   \   000001C4   0x6A 0x00          DC8 106, 0, 0, 0
   \              0x00 0x00    
   \   000001C8   0x3E180022         DC32 3E180022H, 3ED7CEB8H
   \              0x3ED7CEB8   
   \   000001D0   0x6B 0x00          DC8 107, 0, 0, 0
   \              0x00 0x00    
   \   000001D4   0x3E1C0011         DC32 3E1C0011H, 3EDA7675H
   \              0x3EDA7675   
   \   000001DC   0x6C 0x00          DC8 108, 0, 0, 0
   \              0x00 0x00    
   \   000001E0   0x3E200000         DC32 3E200000H, 3EDD13F9H
   \              0x3EDD13F9   
   \   000001E8   0x6E 0x00          DC8 110, 0, 0, 0
   \              0x00 0x00    
   \   000001EC   0x3E23FFEF         DC32 3E23FFEFH, 3EDFA7CAH
   \              0x3EDFA7CA   
   \   000001F4   0x6F 0x00          DC8 111, 0, 0, 0
   \              0x00 0x00    
   \   000001F8   0x3E27FFDE         DC32 3E27FFDEH, 3EE2324DH
   \              0x3EE2324D   
   \   00000200   0x70 0x00          DC8 112, 0, 0, 0
   \              0x00 0x00    
   \   00000204   0x3E2C0011         DC32 3E2C0011H, 3EE4B3E5H
   \              0x3EE4B3E5   
   \   0000020C   0x71 0x00          DC8 113, 0, 0, 0
   \              0x00 0x00    
   \   00000210   0x3E300000         DC32 3E300000H, 3EE72CD8H
   \              0x3EE72CD8   
   \   00000218   0x73 0x00          DC8 115, 0, 0, 0
   \              0x00 0x00    
   \   0000021C   0x3E33FFEF         DC32 3E33FFEFH, 3EE99D67H
   \              0x3EE99D67   
   \   00000224   0x74 0x00          DC8 116, 0, 0, 0
   \              0x00 0x00    
   \   00000228   0x3E380022         DC32 3E380022H, 3EEC05D5H
   \              0x3EEC05D5   
   \   00000230   0x75 0x00          DC8 117, 0, 0, 0
   \              0x00 0x00    
   \   00000234   0x3E3C0011         DC32 3E3C0011H, 3EEE66AAH
   \              0x3EEE66AA   
   \   0000023C   0x76 0x00          DC8 118, 0, 0, 0
   \              0x00 0x00    
   \   00000240   0x3E400000         DC32 3E400000H, 3EF0BFE4H
   \              0x3EF0BFE4   
   \   00000248   0x77 0x00          DC8 119, 0, 0, 0
   \              0x00 0x00    
   \   0000024C   0x3E43FFEF         DC32 3E43FFEFH, 3EF311E8H
   \              0x3EF311E8   
   \   00000254   0x79 0x00          DC8 121, 0, 0, 0
   \              0x00 0x00    
   \   00000258   0x3E47FFDE         DC32 3E47FFDEH, 3EF55CD9H
   \              0x3EF55CD9   
   \   00000260   0x7A 0x00          DC8 122, 0, 0, 0
   \              0x00 0x00    
   \   00000264   0x3E4C0011         DC32 3E4C0011H, 3EF7A0F9H
   \              0x3EF7A0F9   
   \   0000026C   0x7B 0x00          DC8 123, 0, 0, 0
   \              0x00 0x00    
   \   00000270   0x3E500000         DC32 3E500000H, 3EF9DE8BH
   \              0x3EF9DE8B   
   \   00000278   0x7C 0x00          DC8 124, 0, 0, 0
   \              0x00 0x00    
   \   0000027C   0x3E53FFEF         DC32 3E53FFEFH, 3EFC15B1H
   \              0x3EFC15B1   
   \   00000284   0x7D 0x00          DC8 125, 0, 0, 0
   \              0x00 0x00    
   \   00000288   0x3E580022         DC32 3E580022H, 3EFE46AEH
   \              0x3EFE46AE   
   \   00000290   0x7E 0x00          DC8 126, 0, 0, 0
   \              0x00 0x00    
   \   00000294   0x3E5C0011         DC32 3E5C0011H, 3F0038C1H
   \              0x3F0038C1   
   \   0000029C   0x7F 0x00          DC8 127, 0, 0, 0
   \              0x00 0x00    
   \   000002A0   0x3E600000         DC32 3E600000H, 3F014B49H
   \              0x3F014B49   
   \   000002A8   0x80 0x00          DC8 128, 0, 0, 0
   \              0x00 0x00    
   \   000002AC   0x3E63FFEF         DC32 3E63FFEFH, 3F025AFFH
   \              0x3F025AFF   
   \   000002B4   0x81 0x00          DC8 129, 0, 0, 0
   \              0x00 0x00    
   \   000002B8   0x3E67FFDE         DC32 3E67FFDEH, 3F0367E4H
   \              0x3F0367E4   
   \   000002C0   0x82 0x00          DC8 130, 0, 0, 0
   \              0x00 0x00    
   \   000002C4   0x3E6C0011         DC32 3E6C0011H, 3F047219H
   \              0x3F047219   
   \   000002CC   0x83 0x00          DC8 131, 0, 0, 0
   \              0x00 0x00    
   \   000002D0   0x3E700000         DC32 3E700000H, 3F0579C0H
   \              0x3F0579C0   
   \   000002D8   0x84 0x00          DC8 132, 0, 0, 0
   \              0x00 0x00    
   \   000002DC   0x3E73FFEF         DC32 3E73FFEFH, 3F067EC8H
   \              0x3F067EC8   
   \   000002E4   0x85 0x00          DC8 133, 0, 0, 0
   \              0x00 0x00    
   \   000002E8   0x3E780022         DC32 3E780022H, 3F078162H
   \              0x3F078162   
   \   000002F0   0x86 0x00          DC8 134, 0, 0, 0
   \              0x00 0x00    
   \   000002F4   0x3E7C0011         DC32 3E7C0011H, 3F088180H
   \              0x3F088180   
   \   000002FC   0x87 0x00          DC8 135, 0, 0, 0
   \              0x00 0x00    
   \   00000300   0x3E800000         DC32 3E800000H, 3F097F52H
   \              0x3F097F52   
   \   00000308   0x88 0x00          DC8 136, 0, 0, 0
   \              0x00 0x00    
   \   0000030C   0x3E81FFF8         DC32 3E81FFF8H, 3F0A7AC8H
   \              0x3F0A7AC8   
   \   00000314   0x89 0x00          DC8 137, 0, 0, 0
   \              0x00 0x00    
   \   00000318   0x3E83FFEF         DC32 3E83FFEFH, 3F0B7404H
   \              0x3F0B7404   
   \   00000320   0x8A 0x00          DC8 138, 0, 0, 0
   \              0x00 0x00    
   \   00000324   0x3E860008         DC32 3E860008H, 3F0C6B16H
   \              0x3F0C6B16   
   \   0000032C   0x8B 0x00          DC8 139, 0, 0, 0
   \              0x00 0x00    
   \   00000330   0x3E880000         DC32 3E880000H, 3F0D5FFEH
   \              0x3F0D5FFE   
   \   00000338   0x8C 0x00          DC8 140, 0, 0, 0
   \              0x00 0x00    
   \   0000033C   0x3E89FFF8         DC32 3E89FFF8H, 3F0E52CEH
   \              0x3F0E52CE   
   \   00000344   0x8D 0x00          DC8 141, 0, 0, 0
   \              0x00 0x00    
   \   00000348   0x3E8C0011         DC32 3E8C0011H, 3F0F4396H
   \              0x3F0F4396   
   \   00000350   0x8E 0x00          DC8 142, 0, 0, 0
   \              0x00 0x00    
   \   00000354   0x3E8E0008         DC32 3E8E0008H, 3F103255H
   \              0x3F103255   
   \   0000035C   0x8F 0x00          DC8 143, 0, 0, 0
   \              0x00 0x00    
   \   00000360   0x3E900000         DC32 3E900000H, 3F111F2EH
   \              0x3F111F2E   
   \   00000368   0x90 0x00          DC8 144, 0, 0, 0
   \              0x00 0x00    
   \   0000036C   0x3E91FFF8         DC32 3E91FFF8H, 3F120A0FH
   \              0x3F120A0F   
   \   00000374   0x91 0x00          DC8 145, 0, 0, 0
   \              0x00 0x00    
   \   00000378   0x3E93FFEF         DC32 3E93FFEFH, 3F12F31BH
   \              0x3F12F31B   
   \   00000380   0x92 0x00          DC8 146, 0, 0, 0
   \              0x00 0x00    
   \   00000384   0x3E960008         DC32 3E960008H, 3F13DA51H
   \              0x3F13DA51   
   \   0000038C   0x93 0x00          DC8 147, 0, 0, 0
   \              0x00 0x00    
   \   00000390   0x3E980000         DC32 3E980000H, 3F14BFB1H
   \              0x3F14BFB1   
   \   00000398   0x94 0x00          DC8 148, 0, 0, 0
   \              0x00 0x00    
   \   0000039C   0x3E99FFF8         DC32 3E99FFF8H, 3F15A35DH
   \              0x3F15A35D   
   \   000003A4   0x95 0x00          DC8 149, 0, 0, 0
   \              0x00 0x00    
   \   000003A8   0x3E9C0011         DC32 3E9C0011H, 3F168555H
   \              0x3F168555   
   \   000003B0   0x95 0x00          DC8 149, 0, 0, 0
   \              0x00 0x00    
   \   000003B4   0x3E9E0008         DC32 3E9E0008H, 3F176599H
   \              0x3F176599   
   \   000003BC   0x96 0x00          DC8 150, 0, 0, 0
   \              0x00 0x00    
   \   000003C0   0x3EA00000         DC32 3EA00000H, 3F184428H
   \              0x3F184428   
   \   000003C8   0x97 0x00          DC8 151, 0, 0, 0
   \              0x00 0x00    
   \   000003CC   0x3EA1FFF8         DC32 3EA1FFF8H, 3F192125H
   \              0x3F192125   
   \   000003D4   0x98 0x00          DC8 152, 0, 0, 0
   \              0x00 0x00    
   \   000003D8   0x3EA3FFEF         DC32 3EA3FFEFH, 3F19FC8FH
   \              0x3F19FC8F   
   \   000003E0   0x99 0x00          DC8 153, 0, 0, 0
   \              0x00 0x00    
   \   000003E4   0x3EA60008         DC32 3EA60008H, 3F1AD667H
   \              0x3F1AD667   
   \   000003EC   0x9A 0x00          DC8 154, 0, 0, 0
   \              0x00 0x00    
   \   000003F0   0x3EA80000         DC32 3EA80000H, 3F1BAEBCH
   \              0x3F1BAEBC   
   \   000003F8   0x9B 0x00          DC8 155, 0, 0, 0
   \              0x00 0x00    
   \   000003FC   0x3EA9FFF8         DC32 3EA9FFF8H, 3F1C8590H
   \              0x3F1C8590   
   \   00000404   0x9B 0x00          DC8 155, 0, 0, 0
   \              0x00 0x00    
   \   00000408   0x3EAC0011         DC32 3EAC0011H, 3F1D5AF3H
   \              0x3F1D5AF3   
   \   00000410   0x9C 0x00          DC8 156, 0, 0, 0
   \              0x00 0x00    
   \   00000414   0x3EAE0008         DC32 3EAE0008H, 3F1E2EE4H
   \              0x3F1E2EE4   
   \   0000041C   0x9D 0x00          DC8 157, 0, 0, 0
   \              0x00 0x00    
   \   00000420   0x3EB00000         DC32 3EB00000H, 3F1F0154H
   \              0x3F1F0154   
   \   00000428   0x9E 0x00          DC8 158, 0, 0, 0
   \              0x00 0x00    
   \   0000042C   0x3EB1FFF8         DC32 3EB1FFF8H, 3F1FD274H
   \              0x3F1FD274   
   \   00000434   0x9F 0x00          DC8 159, 0, 0, 0
   \              0x00 0x00    
   \   00000438   0x3EB3FFEF         DC32 3EB3FFEFH, 3F20A234H
   \              0x3F20A234   
   \   00000440   0xA0 0x00          DC8 160, 0, 0, 0
   \              0x00 0x00    
   \   00000444   0x3EB60008         DC32 3EB60008H, 3F2170A4H
   \              0x3F2170A4   
   \   0000044C   0xA0 0x00          DC8 160, 0, 0, 0
   \              0x00 0x00    
   \   00000450   0x3EB80000         DC32 3EB80000H, 3F223DB4H
   \              0x3F223DB4   
   \   00000458   0xA1 0x00          DC8 161, 0, 0, 0
   \              0x00 0x00    
   \   0000045C   0x3EB9FFF8         DC32 3EB9FFF8H, 3F230974H
   \              0x3F230974   
   \   00000464   0xA2 0x00          DC8 162, 0, 0, 0
   \              0x00 0x00    
   \   00000468   0x3EBC0011         DC32 3EBC0011H, 3F23D3F6H
   \              0x3F23D3F6   
   \   00000470   0xA3 0x00          DC8 163, 0, 0, 0
   \              0x00 0x00    
   \   00000474   0x3EBE0008         DC32 3EBE0008H, 3F249D39H
   \              0x3F249D39   
   \   0000047C   0xA3 0x00          DC8 163, 0, 0, 0
   \              0x00 0x00    
   \   00000480   0x3EC00000         DC32 3EC00000H, 3F25654DH
   \              0x3F25654D   
   \   00000488   0xA4 0x00          DC8 164, 0, 0, 0
   \              0x00 0x00    
   \   0000048C   0x3EC1FFF8         DC32 3EC1FFF8H, 3F262C13H
   \              0x3F262C13   
   \   00000494   0xA5 0x00          DC8 165, 0, 0, 0
   \              0x00 0x00    
   \   00000498   0x3EC3FFEF         DC32 3EC3FFEFH, 3F26F1BBH
   \              0x3F26F1BB   
   \   000004A0   0xA6 0x00          DC8 166, 0, 0, 0
   \              0x00 0x00    
   \   000004A4   0x3EC60008         DC32 3EC60008H, 3F27B624H
   \              0x3F27B624   
   \   000004AC   0xA7 0x00          DC8 167, 0, 0, 0
   \              0x00 0x00    
   \   000004B0   0x3EC80000         DC32 3EC80000H, 3F287970H
   \              0x3F287970   
   \   000004B8   0xA7 0x00          DC8 167, 0, 0, 0
   \              0x00 0x00    
   \   000004BC   0x3EC9FFF8         DC32 3EC9FFF8H, 3F293B9FH
   \              0x3F293B9F   
   \   000004C4   0xA8 0x00          DC8 168, 0, 0, 0
   \              0x00 0x00    
   \   000004C8   0x3ECC0011         DC32 3ECC0011H, 3F29FCB1H
   \              0x3F29FCB1   
   \   000004D0   0xA9 0x00          DC8 169, 0, 0, 0
   \              0x00 0x00    
   \   000004D4   0x3ECE0008         DC32 3ECE0008H, 3F2ABC94H
   \              0x3F2ABC94   
   \   000004DC   0xAA 0x00          DC8 170, 0, 0, 0
   \              0x00 0x00    
   \   000004E0   0x3ED00000         DC32 3ED00000H, 3F2B7B7CH
   \              0x3F2B7B7C   
   \   000004E8   0xAA 0x00          DC8 170, 0, 0, 0
   \              0x00 0x00    
   \   000004EC   0x3ED1FFF8         DC32 3ED1FFF8H, 3F2C3947H
   \              0x3F2C3947   
   \   000004F4   0xAB 0x00          DC8 171, 0, 0, 0
   \              0x00 0x00    
   \   000004F8   0x3ED3FFEF         DC32 3ED3FFEFH, 3F2CF5F5H
   \              0x3F2CF5F5   
   \   00000500   0xAC 0x00          DC8 172, 0, 0, 0
   \              0x00 0x00    
   \   00000504   0x3ED60008         DC32 3ED60008H, 3F2DB1A7H
   \              0x3F2DB1A7   
   \   0000050C   0xAD 0x00          DC8 173, 0, 0, 0
   \              0x00 0x00    
   \   00000510   0x3ED80000         DC32 3ED80000H, 3F2E6C5DH
   \              0x3F2E6C5D   
   \   00000518   0xAD 0x00          DC8 173, 0, 0, 0
   \              0x00 0x00    
   \   0000051C   0x3ED9FFF8         DC32 3ED9FFF8H, 3F2F2607H
   \              0x3F2F2607   
   \   00000524   0xAE 0x00          DC8 174, 0, 0, 0
   \              0x00 0x00    
   \   00000528   0x3EDC0011         DC32 3EDC0011H, 3F2FDEB5H
   \              0x3F2FDEB5   
   \   00000530   0xAF 0x00          DC8 175, 0, 0, 0
   \              0x00 0x00    
   \   00000534   0x3EDE0008         DC32 3EDE0008H, 3F309668H
   \              0x3F309668   
   \   0000053C   0xAF 0x00          DC8 175, 0, 0, 0
   \              0x00 0x00    
   \   00000540   0x3EE00000         DC32 3EE00000H, 3F314D2FH
   \              0x3F314D2F   
   \   00000548   0xB0 0x00          DC8 176, 0, 0, 0
   \              0x00 0x00    
   \   0000054C   0x3EE1FFF8         DC32 3EE1FFF8H, 3F3202FBH
   \              0x3F3202FB   
   \   00000554   0xB1 0x00          DC8 177, 0, 0, 0
   \              0x00 0x00    
   \   00000558   0x3EE3FFEF         DC32 3EE3FFEFH, 3F32B7DCH
   \              0x3F32B7DC   
   \   00000560   0xB2 0x00          DC8 178, 0, 0, 0
   \              0x00 0x00    
   \   00000564   0x3EE60008         DC32 3EE60008H, 3F336BC2H
   \              0x3F336BC2   
   \   0000056C   0xB2 0x00          DC8 178, 0, 0, 0
   \              0x00 0x00    
   \   00000570   0x3EE80000         DC32 3EE80000H, 3F341ECDH
   \              0x3F341ECD   
   \   00000578   0xB3 0x00          DC8 179, 0, 0, 0
   \              0x00 0x00    
   \   0000057C   0x3EE9FFF8         DC32 3EE9FFF8H, 3F34D0EEH
   \              0x3F34D0EE   
   \   00000584   0xB4 0x00          DC8 180, 0, 0, 0
   \              0x00 0x00    
   \   00000588   0x3EEC0011         DC32 3EEC0011H, 3F358223H
   \              0x3F358223   
   \   00000590   0xB4 0x00          DC8 180, 0, 0, 0
   \              0x00 0x00    
   \   00000594   0x3EEE0008         DC32 3EEE0008H, 3F363290H
   \              0x3F363290   
   \   0000059C   0xB5 0x00          DC8 181, 0, 0, 0
   \              0x00 0x00    
   \   000005A0   0x3EF00000         DC32 3EF00000H, 3F36E211H
   \              0x3F36E211   
   \   000005A8   0xB6 0x00          DC8 182, 0, 0, 0
   \              0x00 0x00    
   \   000005AC   0x3EF1FFF8         DC32 3EF1FFF8H, 3F3790B8H
   \              0x3F3790B8   
   \   000005B4   0xB6 0x00          DC8 182, 0, 0, 0
   \              0x00 0x00    
   \   000005B8   0x3EF3FFEF         DC32 3EF3FFEFH, 3F383E85H
   \              0x3F383E85   
   \   000005C0   0xB7 0x00          DC8 183, 0, 0, 0
   \              0x00 0x00    
   \   000005C4   0x3EF60008         DC32 3EF60008H, 3F38EB79H
   \              0x3F38EB79   
   \   000005CC   0xB8 0x00          DC8 184, 0, 0, 0
   \              0x00 0x00    
   \   000005D0   0x3EF80000         DC32 3EF80000H, 3F3997A2H
   \              0x3F3997A2   
   \   000005D8   0xB8 0x00          DC8 184, 0, 0, 0
   \              0x00 0x00    
   \   000005DC   0x3EF9FFF8         DC32 3EF9FFF8H, 3F3A4303H
   \              0x3F3A4303   
   \   000005E4   0xB9 0x00          DC8 185, 0, 0, 0
   \              0x00 0x00    
   \   000005E8   0x3EFC0011         DC32 3EFC0011H, 3F3AED9AH
   \              0x3F3AED9A   
   \   000005F0   0xBA 0x00          DC8 186, 0, 0, 0
   \              0x00 0x00    
   \   000005F4   0x3EFE0008         DC32 3EFE0008H, 3F3B9757H
   \              0x3F3B9757   
   \   000005FC   0xBA 0x00          DC8 186, 0, 0, 0
   \              0x00 0x00    
   \   00000600   0x3F000000         DC32 3F000000H, 3F3C405BH
   \              0x3F3C405B   
   \   00000608   0xBB 0x00          DC8 187, 0, 0, 0
   \              0x00 0x00    
   \   0000060C   0x3F00FFFC         DC32 3F00FFFCH, 3F3CE896H
   \              0x3F3CE896   
   \   00000614   0xBC 0x00          DC8 188, 0, 0, 0
   \              0x00 0x00    
   \   00000618   0x3F01FFF8         DC32 3F01FFF8H, 3F3D9008H
   \              0x3F3D9008   
   \   00000620   0xBC 0x00          DC8 188, 0, 0, 0
   \              0x00 0x00    
   \   00000624   0x3F030004         DC32 3F030004H, 3F3E36C1H
   \              0x3F3E36C1   
   \   0000062C   0xBD 0x00          DC8 189, 0, 0, 0
   \              0x00 0x00    
   \   00000630   0x3F040000         DC32 3F040000H, 3F3EDCC2H
   \              0x3F3EDCC2   
   \   00000638   0xBE 0x00          DC8 190, 0, 0, 0
   \              0x00 0x00    
   \   0000063C   0x3F04FFFC         DC32 3F04FFFCH, 3F3F81F9H
   \              0x3F3F81F9   
   \   00000644   0xBE 0x00          DC8 190, 0, 0, 0
   \              0x00 0x00    
   \   00000648   0x3F060008         DC32 3F060008H, 3F402689H
   \              0x3F402689   
   \   00000650   0xBF 0x00          DC8 191, 0, 0, 0
   \              0x00 0x00    
   \   00000654   0x3F070004         DC32 3F070004H, 3F40CA4FH
   \              0x3F40CA4F   
   \   0000065C   0xC0 0x00          DC8 192, 0, 0, 0
   \              0x00 0x00    
   \   00000660   0x3F080000         DC32 3F080000H, 3F416D6EH
   \              0x3F416D6E   
   \   00000668   0xC0 0x00          DC8 192, 0, 0, 0
   \              0x00 0x00    
   \   0000066C   0x3F08FFFC         DC32 3F08FFFCH, 3F420FD4H
   \              0x3F420FD4   
   \   00000674   0xC1 0x00          DC8 193, 0, 0, 0
   \              0x00 0x00    
   \   00000678   0x3F09FFF8         DC32 3F09FFF8H, 3F42B181H
   \              0x3F42B181   
   \   00000680   0xC1 0x00          DC8 193, 0, 0, 0
   \              0x00 0x00    
   \   00000684   0x3F0B0004         DC32 3F0B0004H, 3F435297H
   \              0x3F435297   
   \   0000068C   0xC2 0x00          DC8 194, 0, 0, 0
   \              0x00 0x00    
   \   00000690   0x3F0C0000         DC32 3F0C0000H, 3F43F2F5H
   \              0x3F43F2F5   
   \   00000698   0xC3 0x00          DC8 195, 0, 0, 0
   \              0x00 0x00    
   \   0000069C   0x3F0CFFFC         DC32 3F0CFFFCH, 3F44929BH
   \              0x3F44929B   
   \   000006A4   0xC3 0x00          DC8 195, 0, 0, 0
   \              0x00 0x00    
   \   000006A8   0x3F0E0008         DC32 3F0E0008H, 3F4531A9H
   \              0x3F4531A9   
   \   000006B0   0xC4 0x00          DC8 196, 0, 0, 0
   \              0x00 0x00    
   \   000006B4   0x3F0F0004         DC32 3F0F0004H, 3F45CFFFH
   \              0x3F45CFFF   
   \   000006BC   0xC5 0x00          DC8 197, 0, 0, 0
   \              0x00 0x00    
   \   000006C0   0x3F100000         DC32 3F100000H, 3F466DBDH
   \              0x3F466DBD   
   \   000006C8   0xC5 0x00          DC8 197, 0, 0, 0
   \              0x00 0x00    
   \   000006CC   0x3F10FFFC         DC32 3F10FFFCH, 3F470AD4H
   \              0x3F470AD4   
   \   000006D4   0xC6 0x00          DC8 198, 0, 0, 0
   \              0x00 0x00    
   \   000006D8   0x3F11FFF8         DC32 3F11FFF8H, 3F47A754H
   \              0x3F47A754   
   \   000006E0   0xC6 0x00          DC8 198, 0, 0, 0
   \              0x00 0x00    
   \   000006E4   0x3F130004         DC32 3F130004H, 3F48432DH
   \              0x3F48432D   
   \   000006EC   0xC7 0x00          DC8 199, 0, 0, 0
   \              0x00 0x00    
   \   000006F0   0x3F140000         DC32 3F140000H, 3F48DE5DH
   \              0x3F48DE5D   
   \   000006F8   0xC8 0x00          DC8 200, 0, 0, 0
   \              0x00 0x00    
   \   000006FC   0x3F14FFFC         DC32 3F14FFFCH, 3F497907H
   \              0x3F497907   
   \   00000704   0xC8 0x00          DC8 200, 0, 0, 0
   \              0x00 0x00    
   \   00000708   0x3F160008         DC32 3F160008H, 3F4A130AH
   \              0x3F4A130A   
   \   00000710   0xC9 0x00          DC8 201, 0, 0, 0
   \              0x00 0x00    
   \   00000714   0x3F170004         DC32 3F170004H, 3F4AAC64H
   \              0x3F4AAC64   
   \   0000071C   0xC9 0x00          DC8 201, 0, 0, 0
   \              0x00 0x00    
   \   00000720   0x3F180000         DC32 3F180000H, 3F4B4539H
   \              0x3F4B4539   
   \   00000728   0xCA 0x00          DC8 202, 0, 0, 0
   \              0x00 0x00    
   \   0000072C   0x3F18FFFC         DC32 3F18FFFCH, 3F4BDD76H
   \              0x3F4BDD76   
   \   00000734   0xCB 0x00          DC8 203, 0, 0, 0
   \              0x00 0x00    
   \   00000738   0x3F19FFF8         DC32 3F19FFF8H, 3F4C751DH
   \              0x3F4C751D   
   \   00000740   0xCB 0x00          DC8 203, 0, 0, 0
   \              0x00 0x00    
   \   00000744   0x3F1B0004         DC32 3F1B0004H, 3F4D0C3DH
   \              0x3F4D0C3D   
   \   0000074C   0xCC 0x00          DC8 204, 0, 0, 0
   \              0x00 0x00    
   \   00000750   0x3F1C0000         DC32 3F1C0000H, 3F4DA2B6H
   \              0x3F4DA2B6   
   \   00000758   0xCC 0x00          DC8 204, 0, 0, 0
   \              0x00 0x00    
   \   0000075C   0x3F1CFFFC         DC32 3F1CFFFCH, 3F4E38A8H
   \              0x3F4E38A8   
   \   00000764   0xCD 0x00          DC8 205, 0, 0, 0
   \              0x00 0x00    
   \   00000768   0x3F1E0008         DC32 3F1E0008H, 3F4ECE14H
   \              0x3F4ECE14   
   \   00000770   0xCD 0x00          DC8 205, 0, 0, 0
   \              0x00 0x00    
   \   00000774   0x3F1F0004         DC32 3F1F0004H, 3F4F62E9H
   \              0x3F4F62E9   
   \   0000077C   0xCE 0x00          DC8 206, 0, 0, 0
   \              0x00 0x00    
   \   00000780   0x3F200000         DC32 3F200000H, 3F4FF738H
   \              0x3F4FF738   
   \   00000788   0xCF 0x00          DC8 207, 0, 0, 0
   \              0x00 0x00    
   \   0000078C   0x3F20FFFC         DC32 3F20FFFCH, 3F508B00H
   \              0x3F508B00   
   \   00000794   0xCF 0x00          DC8 207, 0, 0, 0
   \              0x00 0x00    
   \   00000798   0x3F21FFF8         DC32 3F21FFF8H, 3F511E32H
   \              0x3F511E32   
   \   000007A0   0xD0 0x00          DC8 208, 0, 0, 0
   \              0x00 0x00    
   \   000007A4   0x3F230004         DC32 3F230004H, 3F51B0EEH
   \              0x3F51B0EE   
   \   000007AC   0xD0 0x00          DC8 208, 0, 0, 0
   \              0x00 0x00    
   \   000007B0   0x3F240000         DC32 3F240000H, 3F524313H
   \              0x3F524313   
   \   000007B8   0xD1 0x00          DC8 209, 0, 0, 0
   \              0x00 0x00    
   \   000007BC   0x3F24FFFC         DC32 3F24FFFCH, 3F52D4C3H
   \              0x3F52D4C3   
   \   000007C4   0xD2 0x00          DC8 210, 0, 0, 0
   \              0x00 0x00    
   \   000007C8   0x3F260008         DC32 3F260008H, 3F5365DCH
   \              0x3F5365DC   
   \   000007D0   0xD2 0x00          DC8 210, 0, 0, 0
   \              0x00 0x00    
   \   000007D4   0x3F270004         DC32 3F270004H, 3F53F67FH
   \              0x3F53F67F   
   \   000007DC   0xD3 0x00          DC8 211, 0, 0, 0
   \              0x00 0x00    
   \   000007E0   0x3F280000         DC32 3F280000H, 3F54869CH
   \              0x3F54869C   
   \   000007E8   0xD3 0x00          DC8 211, 0, 0, 0
   \              0x00 0x00    
   \   000007EC   0x3F28FFFC         DC32 3F28FFFCH, 3F551644H
   \              0x3F551644   
   \   000007F4   0xD4 0x00          DC8 212, 0, 0, 0
   \              0x00 0x00    
   \   000007F8   0x3F29FFF8         DC32 3F29FFF8H, 3F55A565H
   \              0x3F55A565   
   \   00000800   0xD4 0x00          DC8 212, 0, 0, 0
   \              0x00 0x00    
   \   00000804   0x3F2B0004         DC32 3F2B0004H, 3F563411H
   \              0x3F563411   
   \   0000080C   0xD5 0x00          DC8 213, 0, 0, 0
   \              0x00 0x00    
   \   00000810   0x3F2C0000         DC32 3F2C0000H, 3F56C237H
   \              0x3F56C237   
   \   00000818   0xD5 0x00          DC8 213, 0, 0, 0
   \              0x00 0x00    
   \   0000081C   0x3F2CFFFC         DC32 3F2CFFFCH, 3F574FE8H
   \              0x3F574FE8   
   \   00000824   0xD6 0x00          DC8 214, 0, 0, 0
   \              0x00 0x00    
   \   00000828   0x3F2E0008         DC32 3F2E0008H, 3F57DD12H
   \              0x3F57DD12   
   \   00000830   0xD7 0x00          DC8 215, 0, 0, 0
   \              0x00 0x00    
   \   00000834   0x3F2F0004         DC32 3F2F0004H, 3F5869C6H
   \              0x3F5869C6   
   \   0000083C   0xD7 0x00          DC8 215, 0, 0, 0
   \              0x00 0x00    
   \   00000840   0x3F300000         DC32 3F300000H, 3F58F606H
   \              0x3F58F606   
   \   00000848   0xD8 0x00          DC8 216, 0, 0, 0
   \              0x00 0x00    
   \   0000084C   0x3F30FFFC         DC32 3F30FFFCH, 3F5981E0H
   \              0x3F5981E0   
   \   00000854   0xD8 0x00          DC8 216, 0, 0, 0
   \              0x00 0x00    
   \   00000858   0x3F31FFF8         DC32 3F31FFF8H, 3F5A0D35H
   \              0x3F5A0D35   
   \   00000860   0xD9 0x00          DC8 217, 0, 0, 0
   \              0x00 0x00    
   \   00000864   0x3F330004         DC32 3F330004H, 3F5A9814H
   \              0x3F5A9814   
   \   0000086C   0xD9 0x00          DC8 217, 0, 0, 0
   \              0x00 0x00    
   \   00000870   0x3F340000         DC32 3F340000H, 3F5B227DH
   \              0x3F5B227D   
   \   00000878   0xDA 0x00          DC8 218, 0, 0, 0
   \              0x00 0x00    
   \   0000087C   0x3F34FFFC         DC32 3F34FFFCH, 3F5BAC71H
   \              0x3F5BAC71   
   \   00000884   0xDA 0x00          DC8 218, 0, 0, 0
   \              0x00 0x00    
   \   00000888   0x3F360008         DC32 3F360008H, 3F5C3600H
   \              0x3F5C3600   
   \   00000890   0xDB 0x00          DC8 219, 0, 0, 0
   \              0x00 0x00    
   \   00000894   0x3F370004         DC32 3F370004H, 3F5CBF1AH
   \              0x3F5CBF1A   
   \   0000089C   0xDB 0x00          DC8 219, 0, 0, 0
   \              0x00 0x00    
   \   000008A0   0x3F380000         DC32 3F380000H, 3F5D47BFH
   \              0x3F5D47BF   
   \   000008A8   0xDC 0x00          DC8 220, 0, 0, 0
   \              0x00 0x00    
   \   000008AC   0x3F38FFFC         DC32 3F38FFFCH, 3F5DCFFFH
   \              0x3F5DCFFF   
   \   000008B4   0xDC 0x00          DC8 220, 0, 0, 0
   \              0x00 0x00    
   \   000008B8   0x3F39FFF8         DC32 3F39FFF8H, 3F5E57C9H
   \              0x3F5E57C9   
   \   000008C0   0xDD 0x00          DC8 221, 0, 0, 0
   \              0x00 0x00    
   \   000008C4   0x3F3B0004         DC32 3F3B0004H, 3F5EDF1EH
   \              0x3F5EDF1E   
   \   000008CC   0xDE 0x00          DC8 222, 0, 0, 0
   \              0x00 0x00    
   \   000008D0   0x3F3C0000         DC32 3F3C0000H, 3F5F661FH
   \              0x3F5F661F   
   \   000008D8   0xDE 0x00          DC8 222, 0, 0, 0
   \              0x00 0x00    
   \   000008DC   0x3F3CFFFC         DC32 3F3CFFFCH, 3F5FEC9AH
   \              0x3F5FEC9A   
   \   000008E4   0xDF 0x00          DC8 223, 0, 0, 0
   \              0x00 0x00    
   \   000008E8   0x3F3E0008         DC32 3F3E0008H, 3F6072C1H
   \              0x3F6072C1   
   \   000008F0   0xDF 0x00          DC8 223, 0, 0, 0
   \              0x00 0x00    
   \   000008F4   0x3F3F0004         DC32 3F3F0004H, 3F60F872H
   \              0x3F60F872   
   \   000008FC   0xE0 0x00          DC8 224, 0, 0, 0
   \              0x00 0x00    
   \   00000900   0x3F400000         DC32 3F400000H, 3F617DBFH
   \              0x3F617DBF   
   \   00000908   0xE0 0x00          DC8 224, 0, 0, 0
   \              0x00 0x00    
   \   0000090C   0x3F40FFFC         DC32 3F40FFFCH, 3F6202A7H
   \              0x3F6202A7   
   \   00000914   0xE1 0x00          DC8 225, 0, 0, 0
   \              0x00 0x00    
   \   00000918   0x3F41FFF8         DC32 3F41FFF8H, 3F62871AH
   \              0x3F62871A   
   \   00000920   0xE1 0x00          DC8 225, 0, 0, 0
   \              0x00 0x00    
   \   00000924   0x3F430004         DC32 3F430004H, 3F630B39H
   \              0x3F630B39   
   \   0000092C   0xE2 0x00          DC8 226, 0, 0, 0
   \              0x00 0x00    
   \   00000930   0x3F440000         DC32 3F440000H, 3F638EF3H
   \              0x3F638EF3   
   \   00000938   0xE2 0x00          DC8 226, 0, 0, 0
   \              0x00 0x00    
   \   0000093C   0x3F44FFFC         DC32 3F44FFFCH, 3F641238H
   \              0x3F641238   
   \   00000944   0xE3 0x00          DC8 227, 0, 0, 0
   \              0x00 0x00    
   \   00000948   0x3F460008         DC32 3F460008H, 3F649529H
   \              0x3F649529   
   \   00000950   0xE3 0x00          DC8 227, 0, 0, 0
   \              0x00 0x00    
   \   00000954   0x3F470004         DC32 3F470004H, 3F6517B5H
   \              0x3F6517B5   
   \   0000095C   0xE4 0x00          DC8 228, 0, 0, 0
   \              0x00 0x00    
   \   00000960   0x3F480000         DC32 3F480000H, 3F6599DDH
   \              0x3F6599DD   
   \   00000968   0xE4 0x00          DC8 228, 0, 0, 0
   \              0x00 0x00    
   \   0000096C   0x3F48FFFC         DC32 3F48FFFCH, 3F661BA0H
   \              0x3F661BA0   
   \   00000974   0xE5 0x00          DC8 229, 0, 0, 0
   \              0x00 0x00    
   \   00000978   0x3F49FFF8         DC32 3F49FFF8H, 3F669CFEH
   \              0x3F669CFE   
   \   00000980   0xE5 0x00          DC8 229, 0, 0, 0
   \              0x00 0x00    
   \   00000984   0x3F4B0004         DC32 3F4B0004H, 3F671E08H
   \              0x3F671E08   
   \   0000098C   0xE6 0x00          DC8 230, 0, 0, 0
   \              0x00 0x00    
   \   00000990   0x3F4C0000         DC32 3F4C0000H, 3F679EAEH
   \              0x3F679EAE   
   \   00000998   0xE6 0x00          DC8 230, 0, 0, 0
   \              0x00 0x00    
   \   0000099C   0x3F4CFFFC         DC32 3F4CFFFCH, 3F681F00H
   \              0x3F681F00   
   \   000009A4   0xE7 0x00          DC8 231, 0, 0, 0
   \              0x00 0x00    
   \   000009A8   0x3F4E0008         DC32 3F4E0008H, 3F689EEDH
   \              0x3F689EED   
   \   000009B0   0xE7 0x00          DC8 231, 0, 0, 0
   \              0x00 0x00    
   \   000009B4   0x3F4F0004         DC32 3F4F0004H, 3F691E75H
   \              0x3F691E75   
   \   000009BC   0xE8 0x00          DC8 232, 0, 0, 0
   \              0x00 0x00    
   \   000009C0   0x3F500000         DC32 3F500000H, 3F699DAAH
   \              0x3F699DAA   
   \   000009C8   0xE8 0x00          DC8 232, 0, 0, 0
   \              0x00 0x00    
   \   000009CC   0x3F50FFFC         DC32 3F50FFFCH, 3F6A1C8AH
   \              0x3F6A1C8A   
   \   000009D4   0xE9 0x00          DC8 233, 0, 0, 0
   \              0x00 0x00    
   \   000009D8   0x3F51FFF8         DC32 3F51FFF8H, 3F6A9B07H
   \              0x3F6A9B07   
   \   000009E0   0xE9 0x00          DC8 233, 0, 0, 0
   \              0x00 0x00    
   \   000009E4   0x3F530004         DC32 3F530004H, 3F6B191EH
   \              0x3F6B191E   
   \   000009EC   0xEA 0x00          DC8 234, 0, 0, 0
   \              0x00 0x00    
   \   000009F0   0x3F540000         DC32 3F540000H, 3F6B96F2H
   \              0x3F6B96F2   
   \   000009F8   0xEA 0x00          DC8 234, 0, 0, 0
   \              0x00 0x00    
   \   000009FC   0x3F54FFFC         DC32 3F54FFFCH, 3F6C1462H
   \              0x3F6C1462   
   \   00000A04   0xEB 0x00          DC8 235, 0, 0, 0
   \              0x00 0x00    
   \   00000A08   0x3F560008         DC32 3F560008H, 3F6C917DH
   \              0x3F6C917D   
   \   00000A10   0xEB 0x00          DC8 235, 0, 0, 0
   \              0x00 0x00    
   \   00000A14   0x3F570004         DC32 3F570004H, 3F6D0E45H
   \              0x3F6D0E45   
   \   00000A1C   0xEC 0x00          DC8 236, 0, 0, 0
   \              0x00 0x00    
   \   00000A20   0x3F580000         DC32 3F580000H, 3F6D8AA8H
   \              0x3F6D8AA8   
   \   00000A28   0xEC 0x00          DC8 236, 0, 0, 0
   \              0x00 0x00    
   \   00000A2C   0x3F58FFFC         DC32 3F58FFFCH, 3F6E06C8H
   \              0x3F6E06C8   
   \   00000A34   0xED 0x00          DC8 237, 0, 0, 0
   \              0x00 0x00    
   \   00000A38   0x3F59FFF8         DC32 3F59FFF8H, 3F6E8284H
   \              0x3F6E8284   
   \   00000A40   0xED 0x00          DC8 237, 0, 0, 0
   \              0x00 0x00    
   \   00000A44   0x3F5B0004         DC32 3F5B0004H, 3F6EFDFCH
   \              0x3F6EFDFC   
   \   00000A4C   0xEE 0x00          DC8 238, 0, 0, 0
   \              0x00 0x00    
   \   00000A50   0x3F5C0000         DC32 3F5C0000H, 3F6F7910H
   \              0x3F6F7910   
   \   00000A58   0xEE 0x00          DC8 238, 0, 0, 0
   \              0x00 0x00    
   \   00000A5C   0x3F5CFFFC         DC32 3F5CFFFCH, 3F6FF3CFH
   \              0x3F6FF3CF   
   \   00000A64   0xEF 0x00          DC8 239, 0, 0, 0
   \              0x00 0x00    
   \   00000A68   0x3F5E0008         DC32 3F5E0008H, 3F706E4CH
   \              0x3F706E4C   
   \   00000A70   0xEF 0x00          DC8 239, 0, 0, 0
   \              0x00 0x00    
   \   00000A74   0x3F5F0004         DC32 3F5F0004H, 3F70E864H
   \              0x3F70E864   
   \   00000A7C   0xEF 0x00          DC8 239, 0, 0, 0
   \              0x00 0x00    
   \   00000A80   0x3F600000         DC32 3F600000H, 3F716239H
   \              0x3F716239   
   \   00000A88   0xF0 0x00          DC8 240, 0, 0, 0
   \              0x00 0x00    
   \   00000A8C   0x3F60FFFC         DC32 3F60FFFCH, 3F71DBBAH
   \              0x3F71DBBA   
   \   00000A94   0xF0 0x00          DC8 240, 0, 0, 0
   \              0x00 0x00    
   \   00000A98   0x3F61FFF8         DC32 3F61FFF8H, 3F7254E7H
   \              0x3F7254E7   
   \   00000AA0   0xF1 0x00          DC8 241, 0, 0, 0
   \              0x00 0x00    
   \   00000AA4   0x3F630004         DC32 3F630004H, 3F72CDC0H
   \              0x3F72CDC0   
   \   00000AAC   0xF1 0x00          DC8 241, 0, 0, 0
   \              0x00 0x00    
   \   00000AB0   0x3F640000         DC32 3F640000H, 3F734645H
   \              0x3F734645   
   \   00000AB8   0xF2 0x00          DC8 242, 0, 0, 0
   \              0x00 0x00    
   \   00000ABC   0x3F64FFFC         DC32 3F64FFFCH, 3F73BE88H
   \              0x3F73BE88   
   \   00000AC4   0xF2 0x00          DC8 242, 0, 0, 0
   \              0x00 0x00    
   \   00000AC8   0x3F660008         DC32 3F660008H, 3F743676H
   \              0x3F743676   
   \   00000AD0   0xF3 0x00          DC8 243, 0, 0, 0
   \              0x00 0x00    
   \   00000AD4   0x3F670004         DC32 3F670004H, 3F74AE21H
   \              0x3F74AE21   
   \   00000ADC   0xF3 0x00          DC8 243, 0, 0, 0
   \              0x00 0x00    
   \   00000AE0   0x3F680000         DC32 3F680000H, 3F752578H
   \              0x3F752578   
   \   00000AE8   0xF4 0x00          DC8 244, 0, 0, 0
   \              0x00 0x00    
   \   00000AEC   0x3F68FFFC         DC32 3F68FFFCH, 3F759C7CH
   \              0x3F759C7C   
   \   00000AF4   0xF4 0x00          DC8 244, 0, 0, 0
   \              0x00 0x00    
   \   00000AF8   0x3F69FFF8         DC32 3F69FFF8H, 3F76133CH
   \              0x3F76133C   
   \   00000B00   0xF5 0x00          DC8 245, 0, 0, 0
   \              0x00 0x00    
   \   00000B04   0x3F6B0004         DC32 3F6B0004H, 3F7689A9H
   \              0x3F7689A9   
   \   00000B0C   0xF5 0x00          DC8 245, 0, 0, 0
   \              0x00 0x00    
   \   00000B10   0x3F6C0000         DC32 3F6C0000H, 3F76FFD2H
   \              0x3F76FFD2   
   \   00000B18   0xF6 0x00          DC8 246, 0, 0, 0
   \              0x00 0x00    
   \   00000B1C   0x3F6CFFFC         DC32 3F6CFFFCH, 3F7775A7H
   \              0x3F7775A7   
   \   00000B24   0xF6 0x00          DC8 246, 0, 0, 0
   \              0x00 0x00    
   \   00000B28   0x3F6E0008         DC32 3F6E0008H, 3F77EB3AH
   \              0x3F77EB3A   
   \   00000B30   0xF6 0x00          DC8 246, 0, 0, 0
   \              0x00 0x00    
   \   00000B34   0x3F6F0004         DC32 3F6F0004H, 3F786089H
   \              0x3F786089   
   \   00000B3C   0xF7 0x00          DC8 247, 0, 0, 0
   \              0x00 0x00    
   \   00000B40   0x3F700000         DC32 3F700000H, 3F78D584H
   \              0x3F78D584   
   \   00000B48   0xF7 0x00          DC8 247, 0, 0, 0
   \              0x00 0x00    
   \   00000B4C   0x3F70FFFC         DC32 3F70FFFCH, 3F794A3CH
   \              0x3F794A3C   
   \   00000B54   0xF8 0x00          DC8 248, 0, 0, 0
   \              0x00 0x00    
   \   00000B58   0x3F71FFF8         DC32 3F71FFF8H, 3F79BEA1H
   \              0x3F79BEA1   
   \   00000B60   0xF8 0x00          DC8 248, 0, 0, 0
   \              0x00 0x00    
   \   00000B64   0x3F730004         DC32 3F730004H, 3F7A32D3H
   \              0x3F7A32D3   
   \   00000B6C   0xF9 0x00          DC8 249, 0, 0, 0
   \              0x00 0x00    
   \   00000B70   0x3F740000         DC32 3F740000H, 3F7AA6B1H
   \              0x3F7AA6B1   
   \   00000B78   0xF9 0x00          DC8 249, 0, 0, 0
   \              0x00 0x00    
   \   00000B7C   0x3F74FFFC         DC32 3F74FFFCH, 3F7B1A3BH
   \              0x3F7B1A3B   
   \   00000B84   0xFA 0x00          DC8 250, 0, 0, 0
   \              0x00 0x00    
   \   00000B88   0x3F760008         DC32 3F760008H, 3F7B8D93H
   \              0x3F7B8D93   
   \   00000B90   0xFA 0x00          DC8 250, 0, 0, 0
   \              0x00 0x00    
   \   00000B94   0x3F770004         DC32 3F770004H, 3F7C0097H
   \              0x3F7C0097   
   \   00000B9C   0xFB 0x00          DC8 251, 0, 0, 0
   \              0x00 0x00    
   \   00000BA0   0x3F780000         DC32 3F780000H, 3F7C7369H
   \              0x3F7C7369   
   \   00000BA8   0xFB 0x00          DC8 251, 0, 0, 0
   \              0x00 0x00    
   \   00000BAC   0x3F78FFFC         DC32 3F78FFFCH, 3F7CE5E6H
   \              0x3F7CE5E6   
   \   00000BB4   0xFB 0x00          DC8 251, 0, 0, 0
   \              0x00 0x00    
   \   00000BB8   0x3F79FFF8         DC32 3F79FFF8H, 3F7D5821H
   \              0x3F7D5821   
   \   00000BC0   0xFC 0x00          DC8 252, 0, 0, 0
   \              0x00 0x00    
   \   00000BC4   0x3F7B0004         DC32 3F7B0004H, 3F7DCA19H
   \              0x3F7DCA19   
   \   00000BCC   0xFC 0x00          DC8 252, 0, 0, 0
   \              0x00 0x00    
   \   00000BD0   0x3F7C0000         DC32 3F7C0000H, 3F7E3BCDH
   \              0x3F7E3BCD   
   \   00000BD8   0xFD 0x00          DC8 253, 0, 0, 0
   \              0x00 0x00    
   \   00000BDC   0x3F7CFFFC         DC32 3F7CFFFCH, 3F7EAD3FH
   \              0x3F7EAD3F   
   \   00000BE4   0xFD 0x00          DC8 253, 0, 0, 0
   \              0x00 0x00    
   \   00000BE8   0x3F7E0008         DC32 3F7E0008H, 3F7F1E6DH
   \              0x3F7F1E6D   
   \   00000BF0   0xFE 0x00          DC8 254, 0, 0, 0
   \              0x00 0x00    
   \   00000BF4   0x3F7F0004         DC32 3F7F0004H, 3F7F8F58H
   \              0x3F7F8F58   
   \   00000BFC   0xFE 0x00          DC8 254, 0, 0, 0
   \              0x00 0x00    
     27          
     28          // define chromaticity coordinates for sRGB space

   \                                 In section .data, align 4
     29          tVec2 sRGB_red_xy   = { 0.64f, 0.33f };
   \                     sRGB_red_xy:
   \   00000000   0x3F23D70A         DC32 3F23D70AH, 3EA8F5C3H
   \              0x3EA8F5C3   
     30          tVec2 sRGB_green_xy = { 0.30f, 0.60f };
   \                     sRGB_green_xy:
   \   00000008   0x3E99999A         DC32 3E99999AH, 3F19999AH
   \              0x3F19999A   
     31          tVec2 sRGB_blue_xy  = { 0.15f, 0.06f };
   \                     sRGB_blue_xy:
   \   00000010   0x3E19999A         DC32 3E19999AH, 3D75C28FH
   \              0x3D75C28F   
     32          tVec2 sRGB_white_xy = { 0.3127f, 0.3290f };
   \                     sRGB_white_xy:
   \   00000018   0x3EA01A37         DC32 3EA01A37H, 3EA872B0H
   \              0x3EA872B0   
     33          
     34          // Conversion matrices between linear sRGB space and XYZ space
     35          tMat3x3 convert_sRGB_to_XYZ;
   \                     convert_sRGB_to_XYZ:
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000030   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .bss, align 4
     36          tMat3x3 convert_XYZ_to_sRGB;
   \                     convert_XYZ_to_sRGB:
   \   00000000                      DS8 36
     37           
     38          void PrintVect(tVec3* myColor, char* msg);
     39          void Convert_XYZ_To_Yxy(tVec2* Yxy_Color, tVec3* XYZ_Color);
     40          void Convert_Yxy_To_XYZ(tVec3* XYZ_Color, tVec2* Yxy_Color, float Y);
     41          void PrintVect3(tVec3* myColor, char* msg);
     42          void PrintVect2(tVec2* myColor, char* msg);
     43          void xyYtoRGBConversion(float currentX, float currentY, float currentZ);
     44          
     45          //******************************************************************************
     46          // Set an indexed matrix column to a given vector.
     47          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
     48          void Mat_SetCol(tMat3x3 *pMat, int colIdx, const tVec3 *vec)
     49          {
     50              pMat->m[0][colIdx] = vec->x;
   \                     Mat_SetCol: (+1)
   \   00000000   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0x6001             STR      R1,[R0, #+0]
     51              pMat->m[1][colIdx] = vec->y;
   \   00000008   0x6851             LDR      R1,[R2, #+4]
   \   0000000A   0x60C1             STR      R1,[R0, #+12]
     52              pMat->m[2][colIdx] = vec->z;
   \   0000000C   0x6891             LDR      R1,[R2, #+8]
   \   0000000E   0x6181             STR      R1,[R0, #+24]
     53          }
   \   00000010   0x4770             BX       LR               ;; return
     54            
     55          //******************************************************************************
     56          // Calculate the inverse of a 3x3 matrix. Return false if it is non-invertible.
     57          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
     58          boolean Mat_Invert(tMat3x3 *pOutMat, const tMat3x3 *inMat)
     59          {
   \                     Mat_Invert: (+1)
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4604             MOV      R4,R0
     60              // calculate the minors for the first row
     61              float minor00 = inMat->m[1][1]*inMat->m[2][2] - inMat->m[1][2]*inMat->m[2][1];
   \   00000008   0x69E8             LDR      R0,[R5, #+28]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0xF8D5 0xB020      LDR      R11,[R5, #+32]
   \   00000010   0x692E             LDR      R6,[R5, #+16]
   \   00000012   0xF8D5 0xA014      LDR      R10,[R5, #+20]
   \   00000016   0x4630             MOV      R0,R6
   \   00000018   0x4659             MOV      R1,R11
   \   0000001A   0x.... 0x....      BL       __aeabi_fmul
   \   0000001E   0x4607             MOV      R7,R0
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x4651             MOV      R1,R10
   \   00000024   0x.... 0x....      BL       __aeabi_fmul
   \   00000028   0x4601             MOV      R1,R0
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       __aeabi_fsub
     62              float minor01 = inMat->m[1][2]*inMat->m[2][0] - inMat->m[1][0]*inMat->m[2][2];
   \   00000030   0xF8D5 0x9018      LDR      R9,[R5, #+24]
   \   00000034   0x68EF             LDR      R7,[R5, #+12]
   \   00000036   0x4680             MOV      R8,R0
   \   00000038   0x4650             MOV      R0,R10
   \   0000003A   0x.... 0x....      BL       ??Subroutine2_0
   \                     ??CrossCallReturnLabel_14: (+1)
   \   0000003E   0x4682             MOV      R10,R0
   \   00000040   0x4638             MOV      R0,R7
   \   00000042   0x4659             MOV      R1,R11
   \   00000044   0x.... 0x....      BL       __aeabi_fmul
   \   00000048   0x4601             MOV      R1,R0
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x.... 0x....      BL       __aeabi_fsub
   \   00000050   0x4682             MOV      R10,R0
     63              float minor02 = inMat->m[1][0]*inMat->m[2][1] - inMat->m[1][1]*inMat->m[2][0];
   \   00000052   0x9800             LDR      R0,[SP, #+0]
   \   00000054   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \   00000058   0x4607             MOV      R7,R0
   \   0000005A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_15: (+1)
   \   0000005E   0x4601             MOV      R1,R0
   \   00000060   0x4638             MOV      R0,R7
   \   00000062   0x.... 0x....      BL       __aeabi_fsub
   \   00000066   0x4606             MOV      R6,R0
     64            
     65              // calculate the determinant
     66              float determinant =   inMat->m[0][0] * minor00
     67                                  + inMat->m[0][1] * minor01
     68                                  + inMat->m[0][2] * minor02;
   \   00000068   0x6828             LDR      R0,[R5, #+0]
   \   0000006A   0x4641             MOV      R1,R8
   \   0000006C   0x.... 0x....      BL       __aeabi_fmul
   \   00000070   0x4607             MOV      R7,R0
   \   00000072   0x6868             LDR      R0,[R5, #+4]
   \   00000074   0x4651             MOV      R1,R10
   \   00000076   0x.... 0x....      BL       __aeabi_fmul
   \   0000007A   0x4639             MOV      R1,R7
   \   0000007C   0x.... 0x....      BL       __aeabi_fadd
   \   00000080   0x4607             MOV      R7,R0
   \   00000082   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_10: (+1)
   \   00000086   0x4639             MOV      R1,R7
   \   00000088   0x.... 0x....      BL       __aeabi_fadd
     69            
     70              // check if the input is a singular matrix (non-invertable)
     71              // (note that the epsilon here was arbitrarily chosen)
     72              if( determinant > -0.000001f && determinant < 0.000001f )
   \   0000008C   0x.... 0x....      LDR.W    R1,??DataTable7  ;; 0xb58637bc
   \   00000090   0x.... 0x....      BL       __aeabi_cfrcmple
   \   00000094   0x4602             MOV      R2,R0
   \   00000096   0xD806             BHI.N    ??Mat_Invert_0
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable7_1  ;; 0x358637bd
   \   0000009C   0x.... 0x....      BL       __aeabi_cfcmple
   \   000000A0   0xBF38             IT       CC 
   \   000000A2   0x2000             MOVCC    R0,#+0
     73                  return FALSE;
   \   000000A4   0xD36A             BCC.N    ??Mat_Invert_1
     74            
     75              // the inverse of inMat is (1 / determinant) * adjoint(inMat)
     76              float invDet = 1.0f / determinant;
   \                     ??Mat_Invert_0: (+1)
   \   000000A6   0xF04F 0x507E      MOV      R0,#+1065353216
   \   000000AA   0x4611             MOV      R1,R2
   \   000000AC   0x.... 0x....      BL       __aeabi_fdiv
   \   000000B0   0x4607             MOV      R7,R0
     77              pOutMat->m[0][0] = invDet * minor00;
   \   000000B2   0x4641             MOV      R1,R8
   \   000000B4   0x.... 0x....      BL       __aeabi_fmul
   \   000000B8   0x6020             STR      R0,[R4, #+0]
     78              pOutMat->m[0][1] = invDet * (inMat->m[2][1]*inMat->m[0][2] - inMat->m[2][2]*inMat->m[0][1]);
   \   000000BA   0x69E9             LDR      R1,[R5, #+28]
   \   000000BC   0x68A8             LDR      R0,[R5, #+8]
   \   000000BE   0x.... 0x....      BL       __aeabi_fmul
   \   000000C2   0x4680             MOV      R8,R0
   \   000000C4   0x6A29             LDR      R1,[R5, #+32]
   \   000000C6   0x6868             LDR      R0,[R5, #+4]
   \   000000C8   0x.... 0x....      BL       __aeabi_fmul
   \   000000CC   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_28: (+1)
   \   000000D0   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \   000000D4   0x6060             STR      R0,[R4, #+4]
     79              pOutMat->m[0][2] = invDet * (inMat->m[0][1]*inMat->m[1][2] - inMat->m[0][2]*inMat->m[1][1]);
   \   000000D6   0x6869             LDR      R1,[R5, #+4]
   \   000000D8   0x6968             LDR      R0,[R5, #+20]
   \   000000DA   0x.... 0x....      BL       __aeabi_fmul
   \   000000DE   0x4680             MOV      R8,R0
   \   000000E0   0x68A9             LDR      R1,[R5, #+8]
   \   000000E2   0x6928             LDR      R0,[R5, #+16]
   \   000000E4   0x.... 0x....      BL       __aeabi_fmul
   \   000000E8   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_29: (+1)
   \   000000EC   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \   000000F0   0x60A0             STR      R0,[R4, #+8]
     80            
     81              pOutMat->m[1][0] = invDet * minor01;
   \   000000F2   0x4651             MOV      R1,R10
   \   000000F4   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_17: (+1)
   \   000000F8   0x60E0             STR      R0,[R4, #+12]
     82              pOutMat->m[1][1] = invDet * (inMat->m[2][2]*inMat->m[0][0] - inMat->m[2][0]*inMat->m[0][2]);
   \   000000FA   0x6A29             LDR      R1,[R5, #+32]
   \   000000FC   0x6828             LDR      R0,[R5, #+0]
   \   000000FE   0x.... 0x....      BL       __aeabi_fmul
   \   00000102   0x4680             MOV      R8,R0
   \   00000104   0x69A9             LDR      R1,[R5, #+24]
   \   00000106   0x68A8             LDR      R0,[R5, #+8]
   \   00000108   0x.... 0x....      BL       __aeabi_fmul
   \   0000010C   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_30: (+1)
   \   00000110   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_3: (+1)
   \   00000114   0x6120             STR      R0,[R4, #+16]
     83              pOutMat->m[1][2] = invDet * (inMat->m[0][2]*inMat->m[1][0] - inMat->m[0][0]*inMat->m[1][2]);
   \   00000116   0x68A9             LDR      R1,[R5, #+8]
   \   00000118   0x68E8             LDR      R0,[R5, #+12]
   \   0000011A   0x.... 0x....      BL       __aeabi_fmul
   \   0000011E   0x4680             MOV      R8,R0
   \   00000120   0x6829             LDR      R1,[R5, #+0]
   \   00000122   0x6968             LDR      R0,[R5, #+20]
   \   00000124   0x.... 0x....      BL       __aeabi_fmul
   \   00000128   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_31: (+1)
   \   0000012C   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_4: (+1)
   \   00000130   0x6160             STR      R0,[R4, #+20]
     84            
     85              pOutMat->m[2][0] = invDet * minor02;
   \   00000132   0x4631             MOV      R1,R6
   \   00000134   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_18: (+1)
   \   00000138   0x61A0             STR      R0,[R4, #+24]
     86              pOutMat->m[2][1] = invDet * (inMat->m[2][0]*inMat->m[0][1] - inMat->m[2][1]*inMat->m[0][0]);
   \   0000013A   0x69A9             LDR      R1,[R5, #+24]
   \   0000013C   0x6868             LDR      R0,[R5, #+4]
   \   0000013E   0x.... 0x....      BL       __aeabi_fmul
   \   00000142   0x4606             MOV      R6,R0
   \   00000144   0x69E9             LDR      R1,[R5, #+28]
   \   00000146   0x6828             LDR      R0,[R5, #+0]
   \   00000148   0x.... 0x....      BL       __aeabi_fmul
   \   0000014C   0x4601             MOV      R1,R0
   \   0000014E   0x4630             MOV      R0,R6
   \   00000150   0x.... 0x....      BL       __aeabi_fsub
   \   00000154   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_5: (+1)
   \   00000158   0x61E0             STR      R0,[R4, #+28]
     87              pOutMat->m[2][2] = invDet * (inMat->m[0][0]*inMat->m[1][1] - inMat->m[0][1]*inMat->m[1][0]);
   \   0000015A   0x6829             LDR      R1,[R5, #+0]
   \   0000015C   0x6928             LDR      R0,[R5, #+16]
   \   0000015E   0x.... 0x....      BL       __aeabi_fmul
   \   00000162   0x4606             MOV      R6,R0
   \   00000164   0x6869             LDR      R1,[R5, #+4]
   \   00000166   0x68E8             LDR      R0,[R5, #+12]
   \   00000168   0x.... 0x....      BL       __aeabi_fmul
   \   0000016C   0x4601             MOV      R1,R0
   \   0000016E   0x4630             MOV      R0,R6
   \   00000170   0x.... 0x....      BL       __aeabi_fsub
   \   00000174   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_6: (+1)
   \   00000178   0x6220             STR      R0,[R4, #+32]
     88            
     89              return TRUE;
   \   0000017A   0x2001             MOVS     R0,#+1
   \                     ??Mat_Invert_1: (+1)
   \   0000017C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
     90          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x4640             MOV      R0,R8
   \   00000004   0x.... 0x....      B.W      __aeabi_fsub

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \   00000000   0x68A8             LDR      R0,[R5, #+8]
   \                     ??Subroutine1_0: (+1)
   \   00000002   0x4631             MOV      R1,R6
   \   00000004   0x.... 0x....      B.W      __aeabi_fmul

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \   00000000   0x4639             MOV      R1,R7
   \   00000002   0x.... 0x....      B.W      __aeabi_fmul

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \   00000000   0x4638             MOV      R0,R7
   \   00000002   0x.... 0x....      B.W      __aeabi_fmul

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \   00000000   0x4630             MOV      R0,R6
   \                     ??Subroutine2_0: (+1)
   \   00000002   0x4649             MOV      R1,R9
   \   00000004   0x.... 0x....      B.W      __aeabi_fmul
     91            
     92          //******************************************************************************
     93          // Multiply a column vector on the right of a 3x3 matrix.
     94          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
     95          void Mat_MulVec( tVec3 * pOutVec, const tMat3x3 *mat, const tVec3 inVec )
     96          {
   \                     Mat_MulVec: (+1)
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000006   0x460D             MOV      R5,R1
   \   00000008   0x4604             MOV      R4,R0
     97              pOutVec->x = mat->m[0][0]*inVec.x + mat->m[0][1]*inVec.y + mat->m[0][2]*inVec.z;
   \   0000000A   0x9E08             LDR      R6,[SP, #+32]
   \   0000000C   0x6829             LDR      R1,[R5, #+0]
   \   0000000E   0x461F             MOV      R7,R3
   \   00000010   0x4610             MOV      R0,R2
   \   00000012   0x.... 0x....      BL       __aeabi_fmul
   \   00000016   0x4680             MOV      R8,R0
   \   00000018   0x6868             LDR      R0,[R5, #+4]
   \   0000001A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_7: (+1)
   \   0000001E   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_32: (+1)
   \   00000022   0x4680             MOV      R8,R0
   \   00000024   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_11: (+1)
   \   00000028   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_33: (+1)
   \   0000002C   0x6020             STR      R0,[R4, #+0]
     98              pOutVec->y = mat->m[1][0]*inVec.x + mat->m[1][1]*inVec.y + mat->m[1][2]*inVec.z;
   \   0000002E   0x68E9             LDR      R1,[R5, #+12]
   \   00000030   0x9806             LDR      R0,[SP, #+24]
   \   00000032   0x.... 0x....      BL       __aeabi_fmul
   \   00000036   0x4680             MOV      R8,R0
   \   00000038   0x6928             LDR      R0,[R5, #+16]
   \   0000003A   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_8: (+1)
   \   0000003E   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_34: (+1)
   \   00000042   0x4680             MOV      R8,R0
   \   00000044   0x6968             LDR      R0,[R5, #+20]
   \   00000046   0x.... 0x....      BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_12: (+1)
   \   0000004A   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_35: (+1)
   \   0000004E   0x6060             STR      R0,[R4, #+4]
     99              pOutVec->z = mat->m[2][0]*inVec.x + mat->m[2][1]*inVec.y + mat->m[2][2]*inVec.z;
   \   00000050   0x69A9             LDR      R1,[R5, #+24]
   \   00000052   0x9806             LDR      R0,[SP, #+24]
   \   00000054   0x.... 0x....      BL       __aeabi_fmul
   \   00000058   0x4680             MOV      R8,R0
   \   0000005A   0x69E8             LDR      R0,[R5, #+28]
   \   0000005C   0x.... 0x....      BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_9: (+1)
   \   00000060   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_36: (+1)
   \   00000064   0x4607             MOV      R7,R0
   \   00000066   0x6A28             LDR      R0,[R5, #+32]
   \   00000068   0x.... 0x....      BL       ??Subroutine1_0
   \                     ??CrossCallReturnLabel_13: (+1)
   \   0000006C   0x4639             MOV      R1,R7
   \   0000006E   0x.... 0x....      BL       __aeabi_fadd
   \   00000072   0x60A0             STR      R0,[R4, #+8]
    100          }
   \   00000074   0xE8BD 0x01F0      POP      {R4-R8}
   \   00000078   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7: (+1)
   \   00000000   0x4641             MOV      R1,R8
   \   00000002   0x.... 0x....      B.W      __aeabi_fadd
    101           
    102          //******************************************************************************
    103          // Convert an sRGB color channel to a linear sRGB color channel.
    104          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    105          float LookUpTableCalcGammaExpand_sRGB(float nonlinear)
    106          {    
   \                     LookUpTableCalcGammaExpand_sRGB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    107              int index;
    108          
    109              for (index = 0; index < 255; index++) 
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x230C             MOVS     R3,#+12
   \   00000006   0x.... 0x....      ADR.W    R4,GammaConversionTable
    110              {
    111                  if (GammaConversionTable[index].nonlinear > nonlinear) 
   \                     ??LookUpTableCalcGammaExpand_sRGB_0: (+1)
   \   0000000A   0xFB03 0x4102      MLA      R1,R3,R2,R4
   \   0000000E   0x6849             LDR      R1,[R1, #+4]
   \   00000010   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000014   0xD302             BCC.N    ??LookUpTableCalcGammaExpand_sRGB_1
    112                  {
    113                      break;
    114                  }
    115              }
   \   00000016   0x1C52             ADDS     R2,R2,#+1
   \   00000018   0x2AFF             CMP      R2,#+255
   \   0000001A   0xDBF6             BLT.N    ??LookUpTableCalcGammaExpand_sRGB_0
    116                  
    117              return GammaConversionTable[index].linear;
   \                     ??LookUpTableCalcGammaExpand_sRGB_1: (+1)
   \   0000001C   0xFB03 0x4002      MLA      R0,R3,R2,R4
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    118          }
    119            
    120          //******************************************************************************
    121          // Convert a linear sRGB color channel to a sRGB color channel.
    122          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    123          float LookUpTableGammaCompress_sRGB(float linear)
    124          {    
   \                     LookUpTableGammaCompress_sRGB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    125              int index;
    126          
    127              for (index = 0; index < 255; index++) 
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x230C             MOVS     R3,#+12
   \   00000006   0x.... 0x....      ADR.W    R4,GammaConversionTable
    128              {
    129                  if (GammaConversionTable[index].linear > linear) 
   \                     ??LookUpTableGammaCompress_sRGB_0: (+1)
   \   0000000A   0xFB03 0x4102      MLA      R1,R3,R2,R4
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x.... 0x....      BL       __aeabi_cfcmple
   \   00000014   0xD302             BCC.N    ??LookUpTableGammaCompress_sRGB_1
    130                  {
    131                      break;
    132                  }
    133              }
   \   00000016   0x1C52             ADDS     R2,R2,#+1
   \   00000018   0x2AFF             CMP      R2,#+255
   \   0000001A   0xDBF6             BLT.N    ??LookUpTableGammaCompress_sRGB_0
    134                  
    135              return GammaConversionTable[index].nonlinear;
   \                     ??LookUpTableGammaCompress_sRGB_1: (+1)
   \   0000001C   0xFB03 0x4002      MLA      R0,R3,R2,R4
   \   00000020   0x6840             LDR      R0,[R0, #+4]
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
    136          }
    137          
    138          //******************************************************************************
    139          // Convert an sRGB color to a linear sRGB color.
    140          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    141          void LookUpGammaExpand_sRGB(tVec3 * pColor)
    142          {
   \                     LookUpGammaExpand_sRGB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    143              pColor->x = LookUpTableCalcGammaExpand_sRGB( pColor->x );
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       LookUpTableCalcGammaExpand_sRGB
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    144              pColor->y = LookUpTableCalcGammaExpand_sRGB( pColor->y );
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x.... 0x....      BL       LookUpTableCalcGammaExpand_sRGB
   \   00000012   0x6060             STR      R0,[R4, #+4]
    145              pColor->z = LookUpTableCalcGammaExpand_sRGB( pColor->z );
   \   00000014   0x68A0             LDR      R0,[R4, #+8]
   \   00000016   0x.... 0x....      BL       LookUpTableCalcGammaExpand_sRGB
   \   0000001A   0x60A0             STR      R0,[R4, #+8]
    146          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    147            
    148          //******************************************************************************
    149          // Convert a linear sRGB color to an sRGB color.
    150          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    151          void LookUpGammaCompress_sRGB(tVec3 * pColor)
    152          {
   \                     LookUpGammaCompress_sRGB: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    153              pColor->x = LookUpTableGammaCompress_sRGB( pColor->x );
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       LookUpTableGammaCompress_sRGB
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    154              pColor->y = LookUpTableGammaCompress_sRGB( pColor->y );
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x.... 0x....      BL       LookUpTableGammaCompress_sRGB
   \   00000012   0x6060             STR      R0,[R4, #+4]
    155              pColor->z = LookUpTableGammaCompress_sRGB( pColor->z );
   \   00000014   0x68A0             LDR      R0,[R4, #+8]
   \   00000016   0x.... 0x....      BL       LookUpTableGammaCompress_sRGB
   \   0000001A   0x60A0             STR      R0,[R4, #+8]
    156          }
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    157           
    158          //******************************************************************************
    159          // Convert a linear sRGB color to an sRGB color 
    160          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    161          void CalcColorSpaceConversion_RGB_to_XYZ
    162          (
    163              tMat3x3 *pOutput,  // conversion matrix
    164              const tVec2 red_xy,   // xy chromaticity coordinates of the red primary
    165              const tVec2 green_xy, // xy chromaticity coordinates of the green primary
    166              const tVec2 blue_xy,  // xy chromaticity coordinates of the blue primary
    167              const tVec2 white_xy  // xy chromaticity coordinates of the white point
    168          )
    169          {
   \                     CalcColorSpaceConversion_RGB_to_XYZ: (+1)
   \   00000000   0xB408             PUSH     {R3}
   \   00000002   0xB5D0             PUSH     {R4,R6,R7,LR}
   \   00000004   0xB09B             SUB      SP,SP,#+108
   \   00000006   0x4604             MOV      R4,R0
    170              // generate xyz chromaticity coordinates (x + y + z = 1) from xy coordinates
    171              tVec3 r = { red_xy.x,   red_xy.y,   1.0f - (red_xy.x + red_xy.y) };
   \   00000008   0x4608             MOV      R0,R1
   \   0000000A   0x4611             MOV      R1,R2
   \   0000000C   0x900D             STR      R0,[SP, #+52]
   \   0000000E   0x910E             STR      R1,[SP, #+56]
   \   00000010   0x.... 0x....      BL       __aeabi_fadd
   \   00000014   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_24: (+1)
   \   00000018   0x900F             STR      R0,[SP, #+60]
   \   0000001A   0xE9DD 0x011F      LDRD     R0,R1,[SP, #+124]
    172              tVec3 g = { green_xy.x, green_xy.y, 1.0f - (green_xy.x + green_xy.y) };
   \   0000001E   0x900A             STR      R0,[SP, #+40]
   \   00000020   0x910B             STR      R1,[SP, #+44]
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_25: (+1)
   \   0000002A   0x900C             STR      R0,[SP, #+48]
   \   0000002C   0xE9DD 0x0121      LDRD     R0,R1,[SP, #+132]
    173              tVec3 b = { blue_xy.x,  blue_xy.y,  1.0f - (blue_xy.x + blue_xy.y) };
   \   00000030   0x9007             STR      R0,[SP, #+28]
   \   00000032   0x9108             STR      R1,[SP, #+32]
   \   00000034   0x.... 0x....      BL       __aeabi_fadd
   \   00000038   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_26: (+1)
   \   0000003C   0xE9DD 0x6723      LDRD     R6,R7,[SP, #+140]
   \   00000040   0x9009             STR      R0,[SP, #+36]
    174              tVec3 w = { white_xy.x, white_xy.y, 1.0f - (white_xy.x + white_xy.y) };
    175            
    176              // Convert white xyz coordinate to XYZ coordinate by letting that the white
    177              // point have and XYZ relative luminance of 1.0. Relative luminance is the Y
    178              // component of and XYZ color.
    179              //   XYZ = xyz * (Y / y) 
    180              w.x /= white_xy.y;
   \   00000042   0x4639             MOV      R1,R7
   \   00000044   0x.... 0x....      BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_37: (+1)
   \   00000048   0x9004             STR      R0,[SP, #+16]
    181              w.y /= white_xy.y;
   \   0000004A   0x4639             MOV      R1,R7
   \   0000004C   0x4638             MOV      R0,R7
   \   0000004E   0x.... 0x....      BL       __aeabi_fdiv
   \   00000052   0x9005             STR      R0,[SP, #+20]
    182              w.z /= white_xy.y;
   \   00000054   0x4639             MOV      R1,R7
   \   00000056   0x4630             MOV      R0,R6
   \   00000058   0x.... 0x....      BL       __aeabi_fadd
   \   0000005C   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_27: (+1)
   \   00000060   0x4639             MOV      R1,R7
   \   00000062   0x.... 0x....      BL       __aeabi_fdiv
   \   00000066   0x9006             STR      R0,[SP, #+24]
    183            
    184              // Solve for the transformation matrix 'M' from RGB to XYZ
    185              // * We know that the columns of M are equal to the unknown XYZ values of r, g and b.
    186              // * We know that the XYZ values of r, g and b are each a scaled version of the known
    187              //   corresponding xyz chromaticity values.
    188              // * We know the XYZ value of white based on its xyz value and the assigned relative
    189              //   luminance of 1.0.
    190              // * We know the RGB value of white is (1,1,1).
    191              //                  
    192              //   white_XYZ = M * white_RGB
    193              //
    194              //       [r.x g.x b.x]
    195              //   N = [r.y g.y b.y]
    196              //       [r.z g.z b.z]
    197              //
    198              //       [sR 0  0 ]
    199              //   S = [0  sG 0 ]
    200              //       [0  0  sB]
    201              //
    202              //   M = N * S
    203              //   white_XYZ = N * S * white_RGB
    204              //   N^-1 * white_XYZ = S * white_RGB = (sR,sG,sB)
    205              //
    206              // We now have an equation for the components of the scale matrix 'S' and
    207              // can compute 'M' from 'N' and 'S'
    208            
    209              Mat_SetCol( pOutput, 0, &r );
   \   00000068   0xAA0D             ADD      R2,SP,#+52
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x4620             MOV      R0,R4
   \   0000006E   0x.... 0x....      BL       Mat_SetCol
    210              Mat_SetCol( pOutput, 1, &g );
   \   00000072   0xAA0A             ADD      R2,SP,#+40
   \   00000074   0x2101             MOVS     R1,#+1
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       Mat_SetCol
    211              Mat_SetCol( pOutput, 2, &b );
   \   0000007C   0xAA07             ADD      R2,SP,#+28
   \   0000007E   0x2102             MOVS     R1,#+2
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       Mat_SetCol
    212            
    213              tMat3x3 invMat;
    214              Mat_Invert( &invMat, pOutput );
   \   00000086   0x4621             MOV      R1,R4
   \   00000088   0xA810             ADD      R0,SP,#+64
   \   0000008A   0x.... 0x....      BL       Mat_Invert
    215            
    216              tVec3 scale;
    217              Mat_MulVec( &scale, &invMat, w );
   \   0000008E   0xA804             ADD      R0,SP,#+16
   \   00000090   0xB082             SUB      SP,SP,#+8
   \   00000092   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_40: (+1)
   \   00000096   0xBC0C             POP      {R2,R3}
   \   00000098   0xA910             ADD      R1,SP,#+64
   \   0000009A   0xA801             ADD      R0,SP,#+4
   \   0000009C   0x.... 0x....      BL       Mat_MulVec
    218            
    219              pOutput->m[0][0] *= scale.x;
   \   000000A0   0x6821             LDR      R1,[R4, #+0]
   \   000000A2   0x9801             LDR      R0,[SP, #+4]
   \   000000A4   0x.... 0x....      BL       __aeabi_fmul
   \   000000A8   0x6020             STR      R0,[R4, #+0]
    220              pOutput->m[1][0] *= scale.x;
   \   000000AA   0x68E1             LDR      R1,[R4, #+12]
   \   000000AC   0x9801             LDR      R0,[SP, #+4]
   \   000000AE   0x.... 0x....      BL       __aeabi_fmul
   \   000000B2   0x60E0             STR      R0,[R4, #+12]
    221              pOutput->m[2][0] *= scale.x;
   \   000000B4   0x69A1             LDR      R1,[R4, #+24]
   \   000000B6   0x9801             LDR      R0,[SP, #+4]
   \   000000B8   0x.... 0x....      BL       __aeabi_fmul
   \   000000BC   0x61A0             STR      R0,[R4, #+24]
    222            
    223              pOutput->m[0][1] *= scale.y;
   \   000000BE   0x6861             LDR      R1,[R4, #+4]
   \   000000C0   0x9802             LDR      R0,[SP, #+8]
   \   000000C2   0x.... 0x....      BL       __aeabi_fmul
   \   000000C6   0x6060             STR      R0,[R4, #+4]
    224              pOutput->m[1][1] *= scale.y;
   \   000000C8   0x6921             LDR      R1,[R4, #+16]
   \   000000CA   0x9802             LDR      R0,[SP, #+8]
   \   000000CC   0x.... 0x....      BL       __aeabi_fmul
   \   000000D0   0x6120             STR      R0,[R4, #+16]
    225              pOutput->m[2][1] *= scale.y;
   \   000000D2   0x69E1             LDR      R1,[R4, #+28]
   \   000000D4   0x9802             LDR      R0,[SP, #+8]
   \   000000D6   0x.... 0x....      BL       __aeabi_fmul
   \   000000DA   0x61E0             STR      R0,[R4, #+28]
    226            
    227              pOutput->m[0][2] *= scale.z;
   \   000000DC   0x68A1             LDR      R1,[R4, #+8]
   \   000000DE   0x9803             LDR      R0,[SP, #+12]
   \   000000E0   0x.... 0x....      BL       __aeabi_fmul
   \   000000E4   0x60A0             STR      R0,[R4, #+8]
    228              pOutput->m[1][2] *= scale.z;
   \   000000E6   0x6961             LDR      R1,[R4, #+20]
   \   000000E8   0x9803             LDR      R0,[SP, #+12]
   \   000000EA   0x.... 0x....      BL       __aeabi_fmul
   \   000000EE   0x6160             STR      R0,[R4, #+20]
    229              pOutput->m[2][2] *= scale.z;
   \   000000F0   0x6A21             LDR      R1,[R4, #+32]
   \   000000F2   0x9803             LDR      R0,[SP, #+12]
   \   000000F4   0x.... 0x....      BL       __aeabi_fmul
   \   000000F8   0x6220             STR      R0,[R4, #+32]
    230          }
   \   000000FA   0xB01B             ADD      SP,SP,#+108
   \   000000FC   0xBCD0             POP      {R4,R6,R7}
   \   000000FE   0xF85D 0xFB08      LDR      PC,[SP], #+8     ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000006   0x.... 0x....      B.W      __aeabi_fsub

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9: (+1)
   \   00000000   0xC80C             LDM      R0!,{R2,R3}
   \   00000002   0x4669             MOV      R1,SP
   \   00000004   0xC10C             STM      R1!,{R2,R3}
   \   00000006   0x6802             LDR      R2,[R0, #0]
   \   00000008   0x600A             STR      R2,[R1, #+0]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8: (+1)
   \   00000000   0x4601             MOV      R1,R0
   \                     ??Subroutine8_0: (+1)
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      __aeabi_fdiv
    231          
    232          //******************************************************************************
    233          // Example of using the color space conversion functions
    234          //******************************************************************************

   \                                 In section .text, align 2, keep-with-next
    235          void emberAfPluginAuroraColourControlInitColorSpaceConversion(void)
    236          {
   \                     emberAfPluginAuroraColourControlInitColorSpaceConversion: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    237              
    238              CalcColorSpaceConversion_RGB_to_XYZ(&convert_sRGB_to_XYZ,
    239                                                  sRGB_red_xy,
    240                                                  sRGB_green_xy,
    241                                                  sRGB_blue_xy,
    242                                                  sRGB_white_xy);
   \   00000002   0x....             LDR.N    R4,??DataTable7_2
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0xE9D4 0x0106      LDRD     R0,R1,[R4, #+24]
   \   0000000A   0xE9CD 0x0103      STRD     R0,R1,[SP, #+12]
   \   0000000E   0xE9D4 0x0104      LDRD     R0,R1,[R4, #+16]
   \   00000012   0xE9CD 0x0101      STRD     R0,R1,[SP, #+4]
   \   00000016   0xE9D4 0x0102      LDRD     R0,R1,[R4, #+8]
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x4603             MOV      R3,R0
   \   0000001E   0xE9D4 0x0100      LDRD     R0,R1,[R4, #+0]
   \   00000022   0x460A             MOV      R2,R1
   \   00000024   0x4601             MOV      R1,R0
   \   00000026   0xF104 0x0020      ADD      R0,R4,#+32
   \   0000002A   0x.... 0x....      BL       CalcColorSpaceConversion_RGB_to_XYZ
    243            
    244              // generate conversion matrix from XYZ space to linear sRGB space
    245              Mat_Invert(&convert_XYZ_to_sRGB, &convert_sRGB_to_XYZ);  
   \   0000002E   0xF104 0x0120      ADD      R1,R4,#+32
   \   00000032   0xB006             ADD      SP,SP,#+24
   \   00000034   0xE8BD 0x4010      POP      {R4,LR}
   \   00000038   0x....             LDR.N    R0,??DataTable7_3
   \   0000003A   0x....             B.N      Mat_Invert
    246          }
    247          

   \                                 In section .text, align 2, keep-with-next
    248          void emberAfPluginAuroraColourControlConvertColor(tVec2* Yxy_Color, float Y, tVec3* RGB_Color)
    249          {
   \                     emberAfPluginAuroraColourControlConvertColor: (+1)
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x4614             MOV      R4,R2
    250              tVec3 XYZ_Color;
    251              
    252              Convert_Yxy_To_XYZ(&XYZ_Color, Yxy_Color, Y);
   \   00000004   0x460A             MOV      R2,R1
   \   00000006   0x4601             MOV      R1,R0
   \   00000008   0xA801             ADD      R0,SP,#+4
   \   0000000A   0x.... 0x....      BL       Convert_Yxy_To_XYZ
    253              
    254              //GB PrintVect3(&XYZ_Color, "Original color");
    255              
    256              // convert from XYZ to linear sRGB
    257              Mat_MulVec(RGB_Color, &convert_XYZ_to_sRGB, XYZ_Color);
   \   0000000E   0xA801             ADD      R0,SP,#+4
   \   00000010   0xB082             SUB      SP,SP,#+8
   \   00000012   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_41: (+1)
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0xBC0C             POP      {R2,R3}
   \   0000001A   0x....             LDR.N    R1,??DataTable7_3
   \   0000001C   0x.... 0x....      BL       Mat_MulVec
    258              //GB PrintVect3(RGB_Color, "Linear sRGB Color");
    259          
    260              LookUpGammaCompress_sRGB(RGB_Color);
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       LookUpGammaCompress_sRGB
    261              //GB PrintVect3(RGB_Color, "Gamma-corrected sRGB Color (Look Up)");
    262          }
   \   00000026   0xBD1F             POP      {R0-R4,PC}       ;; return
    263          
    264          // convert from XYZ to xyz
    265          // Y = Y
    266          // x = X / (X + Y + Z)
    267          // y = Y / (X + Y + Z)

   \                                 In section .text, align 2, keep-with-next
    268          void Convert_XYZ_To_Yxy(tVec2 * Yxy_Color, tVec3 * XYZ_Color)
    269          {
   \                     Convert_XYZ_To_Yxy: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
    270              Yxy_Color->x = (XYZ_Color->x / (XYZ_Color->x + XYZ_Color->y + XYZ_Color->z));
   \   00000006   0x682E             LDR      R6,[R5, #+0]
   \   00000008   0x6868             LDR      R0,[R5, #+4]
   \   0000000A   0x4631             MOV      R1,R6
   \   0000000C   0x.... 0x....      BL       __aeabi_fadd
   \   00000010   0x68A9             LDR      R1,[R5, #+8]
   \   00000012   0x.... 0x....      BL       __aeabi_fadd
   \   00000016   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_38: (+1)
   \   0000001A   0x6020             STR      R0,[R4, #+0]
    271              Yxy_Color->y = (XYZ_Color->y / (XYZ_Color->x + XYZ_Color->y + XYZ_Color->z));
   \   0000001C   0x686E             LDR      R6,[R5, #+4]
   \   0000001E   0x6828             LDR      R0,[R5, #+0]
   \   00000020   0x4631             MOV      R1,R6
   \   00000022   0x.... 0x....      BL       __aeabi_fadd
   \   00000026   0x68A9             LDR      R1,[R5, #+8]
   \   00000028   0x.... 0x....      BL       __aeabi_fadd
   \   0000002C   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_39: (+1)
   \   00000030   0x6060             STR      R0,[R4, #+4]
    272              
    273              //GB PrintVect3(XYZ_Color, "XYZ_Color");
    274              //GB PrintVect2(Yxy_Color, "Yxy_Color");
    275          }
   \   00000032   0xBD70             POP      {R4-R6,PC}       ;; return
    276          
    277          // Convert from xyz to XYZ
    278          // X = x * (Y / y)
    279          // Y = Y
    280          // Z = (1 - x - y) * (Y / y)

   \                                 In section .text, align 2, keep-with-next
    281          void Convert_Yxy_To_XYZ(tVec3* XYZ_Color, tVec2* Yxy_Color, float Y)
    282          {
   \                     Convert_Yxy_To_XYZ: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    283              XYZ_Color->y = Y;
   \   00000006   0x6062             STR      R2,[R4, #+4]
    284              XYZ_Color->x = Yxy_Color->x * (XYZ_Color->y / Yxy_Color->y);
   \   00000008   0x4610             MOV      R0,R2
   \   0000000A   0x6869             LDR      R1,[R5, #+4]
   \   0000000C   0x.... 0x....      BL       __aeabi_fdiv
   \   00000010   0x6829             LDR      R1,[R5, #+0]
   \   00000012   0x.... 0x....      BL       __aeabi_fmul
   \   00000016   0x6020             STR      R0,[R4, #+0]
    285              XYZ_Color->z = (1 - Yxy_Color->x - Yxy_Color->y ) * (XYZ_Color->y / Yxy_Color->y);
   \   00000018   0x686E             LDR      R6,[R5, #+4]
   \   0000001A   0x6829             LDR      R1,[R5, #+0]
   \   0000001C   0xF04F 0x507E      MOV      R0,#+1065353216
   \   00000020   0x.... 0x....      BL       __aeabi_fsub
   \   00000024   0x4631             MOV      R1,R6
   \   00000026   0x.... 0x....      BL       __aeabi_fsub
   \   0000002A   0x4605             MOV      R5,R0
   \   0000002C   0x6860             LDR      R0,[R4, #+4]
   \   0000002E   0x4631             MOV      R1,R6
   \   00000030   0x.... 0x....      BL       __aeabi_fdiv
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x.... 0x....      BL       __aeabi_fmul
   \   0000003A   0x60A0             STR      R0,[R4, #+8]
    286              
    287              //GB PrintVect2(Yxy_Color, "Yxy_Color");
    288              //GB PrintVect3(XYZ_Color, "XYZ_Color");
    289          }
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    290           

   \                                 In section .text, align 2, keep-with-next
    291          void PrintVect3(tVec3*myColor, char* msg)
    292          {
   \                     PrintVect3: (+1)
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
    293              emberAfDebugPrint("%s:\tColor %d (%x) %d (%x) %d (%x)\r\n", msg, (int)(myColor->x * 1000), (int)(myColor->x * 255), (int)(myColor->y * 1000), (int)(myColor->y * 255), (int)(myColor->z * 1000), (int)(myColor->z * 255));
   \   00000006   0x6845             LDR      R5,[R0, #+4]
   \   00000008   0x6886             LDR      R6,[R0, #+8]
   \   0000000A   0x6807             LDR      R7,[R0, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R9,??DataTable7_4  ;; 0x437f0000
   \   00000010   0x.... 0x....      LDR.W    R8,??DataTable7_5  ;; 0x447a0000
   \   00000014   0x460C             MOV      R4,R1
   \   00000016   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_16: (+1)
   \   0000001A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000001E   0x9004             STR      R0,[SP, #+16]
   \   00000020   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_21: (+1)
   \   00000024   0x.... 0x....      BL       __aeabi_f2iz
   \   00000028   0x9003             STR      R0,[SP, #+12]
   \   0000002A   0x4649             MOV      R1,R9
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_fmul
   \   00000032   0x.... 0x....      BL       __aeabi_f2iz
   \   00000036   0x9002             STR      R0,[SP, #+8]
   \   00000038   0x4641             MOV      R1,R8
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x.... 0x....      BL       __aeabi_fmul
   \   00000040   0x.... 0x....      BL       __aeabi_f2iz
   \   00000044   0x9001             STR      R0,[SP, #+4]
   \   00000046   0x4649             MOV      R1,R9
   \   00000048   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_19: (+1)
   \   0000004C   0x.... 0x....      BL       __aeabi_f2iz
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0x4641             MOV      R1,R8
   \   00000054   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_20: (+1)
   \   00000058   0x.... 0x....      BL       __aeabi_f2iz
   \   0000005C   0x4603             MOV      R3,R0
   \   0000005E   0x4622             MOV      R2,R4
   \   00000060   0x.... 0x....      ADR.W    R1,?_0
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0x.... 0x....      BL       emberAfPrint
    294          }
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \   00000000   0x4641             MOV      R1,R8
   \                     ??Subroutine4_0: (+1)
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      __aeabi_fmul
    295           

   \                                 In section .text, align 2, keep-with-next
    296          void PrintVect2(tVec2*myColor, char* msg)
    297          {
   \                     PrintVect2: (+1)
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
    298              emberAfDebugPrint("%s:\tColor %d (%x) %d (%x)\r\n", msg, (int)(myColor->x * 1000), (int)(myColor->x * 255), (int)(myColor->y * 1000), (int)(myColor->y * 255));
   \   00000006   0x6845             LDR      R5,[R0, #+4]
   \   00000008   0x6806             LDR      R6,[R0, #+0]
   \   0000000A   0x.... 0x....      LDR.W    R8,??DataTable7_4  ;; 0x437f0000
   \   0000000E   0x....             LDR.N    R7,??DataTable7_5  ;; 0x447a0000
   \   00000010   0x460C             MOV      R4,R1
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x4641             MOV      R1,R8
   \   00000016   0x.... 0x....      BL       __aeabi_fmul
   \   0000001A   0x.... 0x....      BL       __aeabi_f2iz
   \   0000001E   0x9002             STR      R0,[SP, #+8]
   \   00000020   0x4639             MOV      R1,R7
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       __aeabi_fmul
   \   00000028   0x.... 0x....      BL       __aeabi_f2iz
   \   0000002C   0x9001             STR      R0,[SP, #+4]
   \   0000002E   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_22: (+1)
   \   00000032   0x.... 0x....      BL       __aeabi_f2iz
   \   00000036   0x9000             STR      R0,[SP, #+0]
   \   00000038   0x4639             MOV      R1,R7
   \   0000003A   0x.... 0x....      BL       ??Subroutine4_0
   \                     ??CrossCallReturnLabel_23: (+1)
   \   0000003E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000042   0x4603             MOV      R3,R0
   \   00000044   0x4622             MOV      R2,R4
   \   00000046   0x.... 0x....      ADR.W    R1,?_1
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      BL       emberAfPrint
    299          }
   \   00000050   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0xB58637BC         DC32     0xb58637bc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x358637BD         DC32     0x358637bd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     sRGB_red_xy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     convert_XYZ_to_sRGB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x437F0000         DC32     0x437f0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x447A0000         DC32     0x447a0000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x25 0x73          DC8 "%s:\tColor %d (%x) %d (%x) %d (%x)\015\012"
   \              0x3A 0x09    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x29 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x29 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x29 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x25 0x73          DC8 "%s:\tColor %d (%x) %d (%x)\015\012"
   \              0x3A 0x09    
   \              0x43 0x6F    
   \              0x6C 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x29 0x20    
   \              0x25 0x64    
   \              0x20 0x28    
   \              0x25 0x78    
   \              0x29 0x0D    
   \              0x0A 0x00    
    300           

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     136   CalcColorSpaceConversion_RGB_to_XYZ
       128   -> Mat_Invert
       128   -> Mat_MulVec
       128   -> Mat_SetCol
       128   -> __aeabi_fadd
       128   -> __aeabi_fdiv
       128   -> __aeabi_fmul
       128   -> __aeabi_fsub
      16   Convert_XYZ_To_Yxy
        16   -> __aeabi_fadd
        16   -> __aeabi_fdiv
      16   Convert_Yxy_To_XYZ
        16   -> __aeabi_fdiv
        16   -> __aeabi_fmul
        16   -> __aeabi_fsub
       8   LookUpGammaCompress_sRGB
         8   -> LookUpTableGammaCompress_sRGB
       8   LookUpGammaExpand_sRGB
         8   -> LookUpTableCalcGammaExpand_sRGB
       8   LookUpTableCalcGammaExpand_sRGB
         8 __aeabi_cfcmple
       8   LookUpTableGammaCompress_sRGB
         8 __aeabi_cfcmple
      40   Mat_Invert
        40   -> __aeabi_fadd
        40   -> __aeabi_fdiv
        40   -> __aeabi_fmul
        40   -> __aeabi_fsub
        40 __aeabi_cfcmple
        40 __aeabi_cfrcmple
      32   Mat_MulVec
        32   -> __aeabi_fadd
        32   -> __aeabi_fmul
       0   Mat_SetCol
      40   PrintVect2
        40   -> __aeabi_f2iz
        40   -> __aeabi_fmul
        40   -> emberAfPrint
      48   PrintVect3
        48   -> __aeabi_f2iz
        48   -> __aeabi_fmul
        48   -> emberAfPrint
      32   emberAfPluginAuroraColourControlConvertColor
        24   -> Convert_Yxy_To_XYZ
        24   -> LookUpGammaCompress_sRGB
        24   -> Mat_MulVec
      32   emberAfPluginAuroraColourControlInitColorSpaceConversion
        32   -> CalcColorSpaceConversion_RGB_to_XYZ
         0   -> Mat_Invert


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       6  ?Subroutine0
       8  ?Subroutine1
       8  ?Subroutine2
       6  ?Subroutine3
       8  ?Subroutine4
      10  ?Subroutine5
       8  ?Subroutine6
       6  ?Subroutine7
       8  ?Subroutine8
      12  ?Subroutine9
      36  ?_0
      28  ?_1
     258  CalcColorSpaceConversion_RGB_to_XYZ
      52  Convert_XYZ_To_Yxy
      62  Convert_Yxy_To_XYZ
    3072  GammaConversionTable
      30  LookUpGammaCompress_sRGB
      30  LookUpGammaExpand_sRGB
      36  LookUpTableCalcGammaExpand_sRGB
      36  LookUpTableGammaCompress_sRGB
     384  Mat_Invert
     124  Mat_MulVec
      18  Mat_SetCol
      84  PrintVect2
     112  PrintVect3
      36  convert_XYZ_to_sRGB
      40  emberAfPluginAuroraColourControlConvertColor
      60  emberAfPluginAuroraColourControlInitColorSpaceConversion
      68  sRGB_red_xy
          sRGB_green_xy
          sRGB_blue_xy
          sRGB_white_xy
          convert_sRGB_to_XYZ

 
    36 bytes in section .bss
    68 bytes in section .data
 4 566 bytes in section .text
 
 4 566 bytes of CODE memory
   104 bytes of DATA memory

Errors: none
Warnings: none
