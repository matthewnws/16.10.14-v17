// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __AF_ENDPOINT_CONFIG__
#define __AF_ENDPOINT_CONFIG__


// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT (3)


// Generated defaults
#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
6,'A','u','r','o','r','a',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* 0,Default value: Basic,manufacturer name */, \
6,'D','i','m','m','e','r',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* 33,Default value: Basic,model identifier */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
0xFF, 0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, \
  }
#else // ! BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
6,'A','u','r','o','r','a',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* 0,Default value: Basic,manufacturer name */, \
6,'D','i','m','m','e','r',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* 33,Default value: Basic,model identifier */, \
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF /* 66,Default value: Over the Air Bootloading,OTA Upgrade Server ID */, \
0xFF, 0xFF, 0xFF, 0xFF /* 74,Default value: Over the Air Bootloading,Offset (address) into the file */, \
  }
#endif // BIGENDIAN_CPU




// Generated attributes
#define GENERATED_ATTRIBUTES { \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x0e } }, /* 1 / Basic / application version*/\
    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[0]) } }, /* 2 / Basic / manufacturer name*/\
    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)&(generatedDefaults[33]) } }, /* 3 / Basic / model identifier*/\
    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 4 / Basic / power source*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 5 / Identify / identify time*/\
    { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 6 / Groups / name support*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 7 / Scenes / scene count*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 8 / Scenes / current scene*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 9 / Scenes / current group*/\
    { 0x0003, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 10 / Scenes / scene valid*/\
    { 0x0004, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 11 / Scenes / name support*/\
    { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 12 / On/off / on/off*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0xFF } }, /* 13 / Level Control / current level*/\
    { 0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (int8u*)&(generatedDefaults[66]) } }, /* 14 / Over the Air Bootloading / OTA Upgrade Server ID*/\
    { 0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (int8u*)&(generatedDefaults[74]) } }, /* 15 / Over the Air Bootloading / Offset (address) into the file*/\
    { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (int8u*)0x00 } }, /* 16 / Over the Air Bootloading / OTA Upgrade Status*/\
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 17 / Color Control / current hue*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (0x00), { (int8u*)0x00 } }, /* 18 / Color Control / current saturation*/\
    { 0x0003, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x616B } }, /* 19 / Color Control / current x*/\
    { 0x0004, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x607D } }, /* 20 / Color Control / current y*/\
    { 0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x00FA } }, /* 21 / Color Control / color temperature*/\
    { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 22 / Generic Tunnel / maximum incoming transfer size*/\
    { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0x0000 } }, /* 23 / Generic Tunnel / maximum outgoing transfer size*/\
    { 0x0003, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 255, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 24 / Generic Tunnel / protocol address*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (int8u*)0xFFFF } }, /* 25 / Tunneling / close tunnel timeout*/\
  }


// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS \
const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayGroupsClusterServer[] = { (EmberAfGenericClusterFunction)emberAfGroupsClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayScenesClusterServer[] = { (EmberAfGenericClusterFunction)emberAfScenesClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayLevelControlClusterServer[] = { (EmberAfGenericClusterFunction)emberAfLevelControlClusterServerInitCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayTunnelingClusterServer[] = { (EmberAfGenericClusterFunction)emberAfTunnelingClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfTunnelingClusterServerAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayOtaBootloadClusterClient[] = { (EmberAfGenericClusterFunction)emberAfOtaBootloadClusterClientInitCallback,(EmberAfGenericClusterFunction)emberAfOtaBootloadClusterClientDefaultResponseCallback}; \


// Clusters defitions
#define GENERATED_CLUSTERS { \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 5, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 1, 2, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[6]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayGroupsClusterServer, },    \
    { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[7]), 5, 6, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayScenesClusterServer, },    \
    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[12]), 1, 1, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[13]), 1, 1, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayLevelControlClusterServer, },    \
    { 0x0300, (EmberAfAttributeMetadata*)&(generatedAttributes[17]), 5, 8, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 5, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 1, 2, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0600, (EmberAfAttributeMetadata*)&(generatedAttributes[22]), 3, 259, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0704, (EmberAfAttributeMetadata*)&(generatedAttributes[25]), 1, 2, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayTunnelingClusterServer, },    \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 5, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[5]), 1, 2, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 3, 13, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_DEFAULT_RESPONSE_FUNCTION), emberAfFuncArrayOtaBootloadClusterClient, },    \
  }


// Endpoint types
#define GENERATED_ENDPOINT_TYPES {        \
    { (EmberAfCluster*)&(generatedClusters[0]), 8, 19 }, \
    { (EmberAfCluster*)&(generatedClusters[8]), 5, 263 }, \
    { (EmberAfCluster*)&(generatedClusters[13]), 4, 15 }, \
  }


// Networks
#define EMBER_AF_GENERATED_NETWORKS { \
  { \
    EM_AF_NETWORK_TYPE_ZIGBEE_PRO, \
    { \
      .pro = { \
        ZA_COORDINATOR, \
        EMBER_AF_SECURITY_PROFILE_HA, \
      } \
    } \
  }, \
}
#define EMBER_AF_GENERATED_NETWORK_STRINGS  \
  "Primary (pro)", \


// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)


// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (255)
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (69)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 297

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY { 1, 2, 3 }

// Array of profile ids
#define FIXED_PROFILE_IDS { 260, 260, 260 }

// Array of profile ids
#define FIXED_DEVICE_IDS { 258, 6, 7 }

// Array of profile ids
#define FIXED_DEVICE_VERSIONS { 0, 0, 0 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { 0, 1, 2 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { 0, 0, 0 }


// Code used to configure the cluster event mechanism
#define EMBER_AF_GENERATED_EVENT_CODE \
  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
  EmberEventControl emberAfLevelControlClusterServerTickCallbackControl1; \
  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl2; \
  EmberEventControl emberAfTunnelingClusterServerTickCallbackControl2; \
  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl3; \
  EmberEventControl emberAfOtaBootloadClusterClientTickCallbackControl3; \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningButtonDownEventControl; \
  extern void emberAfPluginAuroraButtonJoiningButtonDownEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningButtonUpEventControl; \
  extern void emberAfPluginAuroraButtonJoiningButtonUpEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningButtonDownDebounceEventControl; \
  extern void emberAfPluginAuroraButtonJoiningButtonDownDebounceEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningButtonUpDebounceEventControl; \
  extern void emberAfPluginAuroraButtonJoiningButtonUpDebounceEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningButtonEndSequenceEventControl; \
  extern void emberAfPluginAuroraButtonJoiningButtonEndSequenceEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningPermitJoiningExpiryEventControl; \
  extern void emberAfPluginAuroraButtonJoiningPermitJoiningExpiryEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraButtonJoiningLedEventEventControl; \
  extern void emberAfPluginAuroraButtonJoiningLedEventEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraColourControlMoveToColorEventControl; \
  extern void emberAfPluginAuroraColourControlMoveToColorEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraColourControlMoveColorEventControl; \
  extern void emberAfPluginAuroraColourControlMoveColorEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl; \
  extern void emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraHostProtocolBootloadTimeoutEventControl; \
  extern void emberAfPluginAuroraHostProtocolBootloadTimeoutEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraHostProtocolPlcTimeoutEventControl; \
  extern void emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraHostProtocolResetEventControl; \
  extern void emberAfPluginAuroraHostProtocolResetEventHandler(void); \
  extern EmberEventControl emberAfPluginAuroraHostProtocolInterCommandDelayEventControl; \
  extern void emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler(void); \
  extern EmberEventControl emberAfPluginConcentratorUpdateEventControl; \
  extern void emberAfPluginConcentratorUpdateEventHandler(void); \
  extern EmberEventControl emberAfPluginEzmodeCommissioningStateEventControl; \
  extern void emberAfPluginEzmodeCommissioningStateEventHandler(void); \
  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
  extern void emberAfPluginNetworkFindTickEventHandler(void); \
  extern EmberEventControl emberAfPluginOtaStorageSimpleEepromPageEraseEventControl; \
  extern void emberAfPluginOtaStorageSimpleEepromPageEraseEventHandler(void); \
  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
  { \
    emberAfPushEndpointNetworkIndex(endpoint); \
    emberEventControlSetInactive(*control); \
    (*callback)(endpoint); \
    emberAfPopNetworkIndex(); \
  } \
  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \
  void emberAfLevelControlClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallback, 1); } \
  void emberAfIdentifyClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallback, 2); } \
  void emberAfTunnelingClusterServerTickCallbackWrapperFunction2(void) { clusterTickWrapper(&emberAfTunnelingClusterServerTickCallbackControl2, emberAfTunnelingClusterServerTickCallback, 2); } \
  void emberAfIdentifyClusterServerTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallback, 3); } \
  void emberAfOtaBootloadClusterClientTickCallbackWrapperFunction3(void) { clusterTickWrapper(&emberAfOtaBootloadClusterClientTickCallbackControl3, emberAfOtaBootloadClusterClientTickCallback, 3); } \


// EmberEventData structs used to populate the EmberEventData table
#define EMBER_AF_GENERATED_EVENTS   \
  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
  { &emberAfLevelControlClusterServerTickCallbackControl1, emberAfLevelControlClusterServerTickCallbackWrapperFunction1 }, \
  { &emberAfIdentifyClusterServerTickCallbackControl2, emberAfIdentifyClusterServerTickCallbackWrapperFunction2 }, \
  { &emberAfTunnelingClusterServerTickCallbackControl2, emberAfTunnelingClusterServerTickCallbackWrapperFunction2 }, \
  { &emberAfIdentifyClusterServerTickCallbackControl3, emberAfIdentifyClusterServerTickCallbackWrapperFunction3 }, \
  { &emberAfOtaBootloadClusterClientTickCallbackControl3, emberAfOtaBootloadClusterClientTickCallbackWrapperFunction3 }, \
  { &emberAfPluginAuroraButtonJoiningButtonDownEventControl, emberAfPluginAuroraButtonJoiningButtonDownEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningButtonUpEventControl, emberAfPluginAuroraButtonJoiningButtonUpEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningButtonDownDebounceEventControl, emberAfPluginAuroraButtonJoiningButtonDownDebounceEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningButtonUpDebounceEventControl, emberAfPluginAuroraButtonJoiningButtonUpDebounceEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningButtonEndSequenceEventControl, emberAfPluginAuroraButtonJoiningButtonEndSequenceEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningPermitJoiningExpiryEventControl, emberAfPluginAuroraButtonJoiningPermitJoiningExpiryEventHandler }, \
  { &emberAfPluginAuroraButtonJoiningLedEventEventControl, emberAfPluginAuroraButtonJoiningLedEventEventHandler }, \
  { &emberAfPluginAuroraColourControlMoveToColorEventControl, emberAfPluginAuroraColourControlMoveToColorEventHandler }, \
  { &emberAfPluginAuroraColourControlMoveColorEventControl, emberAfPluginAuroraColourControlMoveColorEventHandler }, \
  { &emberAfPluginAuroraColourControlMoveToColorTemperatureEventControl, emberAfPluginAuroraColourControlMoveToColorTemperatureEventHandler }, \
  { &emberAfPluginAuroraHostProtocolBootloadTimeoutEventControl, emberAfPluginAuroraHostProtocolBootloadTimeoutEventHandler }, \
  { &emberAfPluginAuroraHostProtocolPlcTimeoutEventControl, emberAfPluginAuroraHostProtocolPlcTimeoutEventHandler }, \
  { &emberAfPluginAuroraHostProtocolResetEventControl, emberAfPluginAuroraHostProtocolResetEventHandler }, \
  { &emberAfPluginAuroraHostProtocolInterCommandDelayEventControl, emberAfPluginAuroraHostProtocolInterCommandDelayEventHandler }, \
  { &emberAfPluginConcentratorUpdateEventControl, emberAfPluginConcentratorUpdateEventHandler }, \
  { &emberAfPluginEzmodeCommissioningStateEventControl, emberAfPluginEzmodeCommissioningStateEventHandler }, \
  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
  { &emberAfPluginOtaStorageSimpleEepromPageEraseEventControl, emberAfPluginOtaStorageSimpleEepromPageEraseEventHandler }, \


#define EMBER_AF_GENERATED_EVENT_STRINGS   \
  "Identify Cluster Server EP 1",  \
  "Level Control Cluster Server EP 1",  \
  "Identify Cluster Server EP 2",  \
  "Tunneling Cluster Server EP 2",  \
  "Identify Cluster Server EP 3",  \
  "Over the Air Bootloading Cluster Client EP 3",  \
  "Aurora Button Join Code Plugin ButtonDown",  \
  "Aurora Button Join Code Plugin ButtonUp",  \
  "Aurora Button Join Code Plugin ButtonDownDebounce",  \
  "Aurora Button Join Code Plugin ButtonUpDebounce",  \
  "Aurora Button Join Code Plugin ButtonEndSequence",  \
  "Aurora Button Join Code Plugin PermitJoiningExpiry",  \
  "Aurora Button Join Code Plugin LedEvent",  \
  "Aurora Colour Control Plugin MoveToColor",  \
  "Aurora Colour Control Plugin MoveColor",  \
  "Aurora Colour Control Plugin MoveToColorTemperature",  \
  "Aurora Host Protocol Plugin BootloadTimeout",  \
  "Aurora Host Protocol Plugin PlcTimeout",  \
  "Aurora Host Protocol Plugin Reset",  \
  "Aurora Host Protocol Plugin InterCommandDelay",  \
  "Concentrator Support Plugin Update",  \
  "EZ-Mode Commissioning Plugin State",  \
  "Network Find Plugin Tick",  \
  "OTA Simple Storage EEPROM Driver Plugin PageErase",  \


// The length of the event context table used to track and retrieve cluster events
#define EMBER_AF_EVENT_CONTEXT_LENGTH 6

// EmberAfEventContext structs used to populate the EmberAfEventContext table
#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}, \
{ 0x1, 0x8, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfLevelControlClusterServerTickCallbackControl1}, \
{ 0x2, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl2}, \
{ 0x2, 0x704, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfTunnelingClusterServerTickCallbackControl2}, \
{ 0x3, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl3}, \
{ 0x3, 0x19, TRUE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfOtaBootloadClusterClientTickCallbackControl3}


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginAddressTableInitCallback(void); \
  void emberAfPluginConcentratorInitCallback(void); \
  void emberAfPluginCountersInitCallback(void); \
  void emberAfPluginNetworkFindInitCallback(void); \


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
  emberAfPluginAddressTableInitCallback(); \
  emberAfPluginConcentratorInitCallback(); \
  emberAfPluginCountersInitCallback(); \
  emberAfPluginNetworkFindInitCallback(); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \
  void emberAfPluginConcentratorNcpInitCallback(boolean memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \
  emberAfPluginConcentratorNcpInitCallback(memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
  void emberAfPluginAuroraOtaClientStackStatusCallback(EmberStatus status); \
  void emberAfPluginConcentratorStackStatusCallback(EmberStatus status); \
  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
  emberAfPluginAuroraOtaClientStackStatusCallback(status); \
  emberAfPluginConcentratorStackStatusCallback(status); \
  emberAfPluginNetworkFindStackStatusCallback(status); \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_DECLARATIONS \
  void emberAfPluginConcentratorMessageSentCallback(EmberOutgoingMessageType type, \
                    int16u indexOrDestination, \
                    EmberApsFrame *apsFrame, \
                    EmberStatus status, \
                    int16u messageLength, \
                    int8u *messageContents); \


#define EMBER_AF_GENERATED_PLUGIN_MESSAGE_SENT_FUNCTION_CALLS \
  emberAfPluginConcentratorMessageSentCallback(type, \
                    indexOrDestination, \
                    apsFrame, \
                    status, \
                    messageLength, \
                    messageContents); \

// Generated data for the command discovery
#define GENERATED_COMMANDS { \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER | COMMAND_MASK_INCOMING_CLIENT }, /* Identify / IdentifyQueryResponse */ \
    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
    { 0x0004, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / AddGroupResponse */ \
    { 0x0004, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroup */ \
    { 0x0004, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / ViewGroupResponse */ \
    { 0x0004, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Groups / ViewGroup */ \
    { 0x0004, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / GetGroupMembershipResponse */ \
    { 0x0004, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Groups / GetGroupMembership */ \
    { 0x0004, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Groups / RemoveGroupResponse */ \
    { 0x0004, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveGroup */ \
    { 0x0004, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Groups / RemoveAllGroups */ \
    { 0x0004, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Groups / AddGroupIfIdentifying */ \
    { 0x0005, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / AddSceneResponse */ \
    { 0x0005, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / AddScene */ \
    { 0x0005, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / ViewSceneResponse */ \
    { 0x0005, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / ViewScene */ \
    { 0x0005, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveSceneResponse */ \
    { 0x0005, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveScene */ \
    { 0x0005, 0x03, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / RemoveAllScenesResponse */ \
    { 0x0005, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RemoveAllScenes */ \
    { 0x0005, 0x04, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / StoreSceneResponse */ \
    { 0x0005, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / StoreScene */ \
    { 0x0005, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / RecallScene */ \
    { 0x0005, 0x06, COMMAND_MASK_OUTGOING_SERVER }, /* Scenes / GetSceneMembershipResponse */ \
    { 0x0005, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Scenes / GetSceneMembership */ \
    { 0x0006, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Off */ \
    { 0x0006, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* On/off / On */ \
    { 0x0006, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* On/off / Toggle */ \
    { 0x0008, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevel */ \
    { 0x0008, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Move */ \
    { 0x0008, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Step */ \
    { 0x0008, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / Stop */ \
    { 0x0008, 0x04, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveToLevelWithOnOff */ \
    { 0x0008, 0x05, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / MoveWithOnOff */ \
    { 0x0008, 0x06, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StepWithOnOff */ \
    { 0x0008, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Level Control / StopWithOnOff */ \
    { 0x0019, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / ImageNotify */ \
    { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QueryNextImageRequest */ \
    { 0x0019, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / QueryNextImageResponse */ \
    { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImageBlockRequest */ \
    { 0x0019, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / ImagePageRequest */ \
    { 0x0019, 0x05, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / ImageBlockResponse */ \
    { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / UpgradeEndRequest */ \
    { 0x0019, 0x07, COMMAND_MASK_INCOMING_CLIENT }, /* Over the Air Bootloading / UpgradeEndResponse */ \
    { 0x0019, 0x08, COMMAND_MASK_OUTGOING_CLIENT }, /* Over the Air Bootloading / QuerySpecificFileRequest */ \
    { 0x0300, 0x07, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToColor */ \
    { 0x0300, 0x08, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveColor */ \
    { 0x0300, 0x09, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / StepColor */ \
    { 0x0300, 0x0A, COMMAND_MASK_INCOMING_SERVER }, /* Color Control / MoveToColorTemperature */ \
    { 0x0600, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Generic Tunnel / MatchProtocolAddressResponse */ \
    { 0x0600, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Generic Tunnel / MatchProtocolAddress */ \
    { 0x0600, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Generic Tunnel / AdvertiseProtocolAddress */ \
    { 0x0704, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Tunneling / RequestTunnelResponse */ \
    { 0x0704, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* Tunneling / RequestTunnel */ \
    { 0x0704, 0x01, COMMAND_MASK_OUTGOING_SERVER }, /* Tunneling / TransferDataServerToClient */ \
    { 0x0704, 0x01, COMMAND_MASK_INCOMING_SERVER }, /* Tunneling / CloseTunnel */ \
    { 0x0704, 0x02, COMMAND_MASK_OUTGOING_SERVER }, /* Tunneling / TransferDataErrorServerToClient */ \
    { 0x0704, 0x02, COMMAND_MASK_INCOMING_SERVER }, /* Tunneling / TransferDataClientToServer */ \
    { 0x0704, 0x03, COMMAND_MASK_INCOMING_SERVER }, /* Tunneling / TransferDataErrorClientToServer */ \
  }
#define EMBER_AF_GENERATED_COMMAND_COUNT (60)
#endif // __AF_ENDPOINT_CONFIG__
